<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bool 周的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-03T09:09:09.544Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bool周</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS Auto Layout-栈视图（译）</title>
    <link href="http://yoursite.com/2018/04/13/iOS%20Auto%20Layout-%E6%A0%88%E8%A7%86%E5%9B%BE%EF%BC%88%E8%AF%91)/"/>
    <id>http://yoursite.com/2018/04/13/iOS Auto Layout-栈视图（译)/</id>
    <published>2018-04-13T12:22:46.000Z</published>
    <updated>2018-06-03T09:09:09.544Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;下面的内容主要介绍了如何使用 stack view 创建一些复杂的布局。Stack view 是一个很强悍的工具，使&lt;br&gt;用它设计用户界面会十分便捷。Stack view 的一些属性在很大程度上只能控制它的子视图如何排列。你可以通过增加一些额外的自定义约束，来更加精确地控制子视图的排列方式；然而，那样将会使布局变得十分复杂。&lt;/p&gt;
&lt;p&gt;有关于这部分内容的源码，请查看 &lt;a href=&quot;https://developer.apple.com/sample-code/xcode/downloads/Auto-Layout-Cookbook.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto Layout Cookbook&lt;/a&gt; 这个项目。&lt;/p&gt;
&lt;h3 id=&quot;简单的-Stack-View&quot;&gt;&lt;a href=&quot;#简单的-Stack-View&quot; class=&quot;headerlink&quot; title=&quot;简单的 Stack View&quot;&gt;&lt;/a&gt;简单的 Stack View&lt;/h3&gt;&lt;p&gt;这里用了一个竖直排版的 stack view 对一个 label、一个 image view 和一个 button 进行了布局。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Simple_Stack_View_Screenshot_2x.png&quot; width=&quot;375&quot; height=&quot;670&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h4 id=&quot;视图和约束&quot;&gt;&lt;a href=&quot;#视图和约束&quot; class=&quot;headerlink&quot; title=&quot;视图和约束&quot;&gt;&lt;/a&gt;视图和约束&lt;/h4&gt;&lt;p&gt;在 Interface Builder 上，拖拽一个垂直方向排布的 stack view，然后在上面添加 flowers label、image view 和 edit button。然后按照下面的方式设置约束条件。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/simple_stack_2x.png&quot; width=&quot;238&quot; height=&quot;428&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. Stack View.Leading = Superview.LeadingMargin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. Stack View.Trailing = Superview.TrailingMargin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Stack View.Top = Top Layout Guide.Bottom + Standard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. Bottom Layout Guide.Top = Stack View.Bottom + Standard&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h4&gt;&lt;p&gt;在属性检查器中，设置以下属性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stack&lt;/th&gt;
&lt;th&gt;Axis&lt;/th&gt;
&lt;th&gt;Alignment&lt;/th&gt;
&lt;th&gt;Distribution&lt;/th&gt;
&lt;th&gt;Spacing&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Stack View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Vertical&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下一步，给 Image View 设置以下属性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;View&lt;/th&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Image View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;（一张花的图片）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Image View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mode&lt;/td&gt;
&lt;td&gt;Aspect Fit&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后，在 Size 检查器中，设置 Image View 的 content-hugging 和 compression-resistance (CHCR) 权重。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Horizontal hugging&lt;/th&gt;
&lt;th&gt;Vertical Hugging&lt;/th&gt;
&lt;th&gt;Horizontal resistance&lt;/th&gt;
&lt;th&gt;Vertical resistance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Image View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;249&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;749&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;讨论&quot;&gt;&lt;a href=&quot;#讨论&quot; class=&quot;headerlink&quot; title=&quot;讨论&quot;&gt;&lt;/a&gt;讨论&lt;/h4&gt;&lt;p&gt;你需要通过设置约束，将 stack view 固定在 superview 上，另一方面，你还需要处理 stack view 的内部布局逻辑。&lt;/p&gt;
&lt;p&gt;在上图中，stack view 以一个标准边距充满了整个父视图。Stack View 中的子视图通过调整充满整个 stack view 的边缘。水平方向上，每个视图通过拉伸以适应 stack view 的宽度。竖直方向上，view 按照之前设置的 CHCR 权重来进行拉伸。Image View 应该按照预留空间的大小进行适配。因此，在竖直方向上，image view 的 CHCR 权重应该要低于 label 和 button 的默认权重。&lt;/p&gt;
&lt;p&gt;最后，设置 image view 的 mode 为 Aspect Fit。这个设置会强制 image 去调整比例以适应 image view 的大小，以防止 image 因为 image view 的改变而比例失调。这样设置可以允许 stack view 随意改变大小，不用担心图片变形。&lt;/p&gt;
&lt;p&gt;关于如何通过布局使一个 view 充满 superview 的更多内容，请查看 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithSimpleConstraints.html#//apple_ref/doc/uid/TP40010853-CH12-SW5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Attributes&lt;/a&gt; 和 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithSimpleConstraints.html#//apple_ref/doc/uid/TP40010853-CH12-SW4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adaptive Single View&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;嵌套-Stack-Views&quot;&gt;&lt;a href=&quot;#嵌套-Stack-Views&quot; class=&quot;headerlink&quot; title=&quot;嵌套 Stack Views&quot;&gt;&lt;/a&gt;嵌套 Stack Views&lt;/h3&gt;&lt;p&gt;这部分内容讲述了一个由多重嵌套的 stack view 构建成的一个复杂的布局。但是，在下面这个布局示例中，并不是只用 stack view 就能创建的，还需要一些额外的约束条件，更加精确地控制布局。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Nested_Stack_Views_Screenshot_2x.png&quot; width=&quot;375&quot; height=&quot;670&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;添加完视图层级之后，如果添加约束将在下一小节讲解。&lt;/p&gt;
&lt;h4 id=&quot;视图和约束-1&quot;&gt;&lt;a href=&quot;#视图和约束-1&quot; class=&quot;headerlink&quot; title=&quot;视图和约束&quot;&gt;&lt;/a&gt;视图和约束&lt;/h4&gt;&lt;p&gt;当处理一个嵌套 stack view 布局时，比较容易的做法是从里向外布局。例如在下图中，先在 Interface Builder 布局 “姓名” 这一行。将 label 和 text field 并排放在一起，然后选中它们两个，点击 Editor &amp;gt; Embed In &amp;gt; Stack View 菜单项。这将为这一行创建一个水平布局的 stack view。&lt;/p&gt;
&lt;p&gt;然后，布局剩下的 “姓名” 相关的两行，选中，然后点击 Editor &amp;gt; Embed In &amp;gt; Stack View 菜单项，将会创建另外两个水平布局的 stack view。类似的，完成如下显示的一个布局。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/nested_stack_views_2x.png&quot; width=&quot;520&quot; height=&quot;554&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. Root Stack View.Leading = Superview.LeadingMargin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. Root Stack View.Trailing = Superview.TrailingMargin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Root Stack View.Top = Top Layout Guide.Bottom + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. Bottom Layout Guide.Top = Root Stack View.Bottom + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. Image View.Height = Image View.Width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6. First Name Text Field.Width = Middle Name Text Field.Width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7. First Name Text Field.Width = Last Name Text Field.Width&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;属性-1&quot;&gt;&lt;a href=&quot;#属性-1&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h4&gt;&lt;p&gt;每个 stack view 有一系列它们自己的属性，这些属性定义了 stack view 里的内容如何排布。在属性检查器中，你可以看到如下属性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stack&lt;/th&gt;
&lt;th&gt;Axis&lt;/th&gt;
&lt;th&gt;Alignment&lt;/th&gt;
&lt;th&gt;Distribution&lt;/th&gt;
&lt;th&gt;Spacing&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;First Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Horizontal&lt;/td&gt;
&lt;td&gt;First Baseline&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Middle Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Horizontal&lt;/td&gt;
&lt;td&gt;First Baseline&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Last Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Horizontal&lt;/td&gt;
&lt;td&gt;First Baseline&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Name Rows&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Vertical&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Upper&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Horizontal&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Button&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Horizontal&lt;/td&gt;
&lt;td&gt;Fist Baseline&lt;/td&gt;
&lt;td&gt;Fill Equally&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Root&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Vertical&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;Fill&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除此之外，在布局中设置 text view 的背景色为亮灰色。这样当布局发生变化时，你可以很容易看到 text view 的具体大小。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;View&lt;/th&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Text View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Background&lt;/td&gt;
&lt;td&gt;Light Gray Color&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后，CHCR 的权重决定了在填充剩余空间时哪个 view 应该被拉伸。在 Size 检查器中，你可是看到如下每个 view CHCR 的权重：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Horizontal&lt;/th&gt;
&lt;th&gt;Vertical hugging&lt;/th&gt;
&lt;th&gt;Horizontal resistance&lt;/th&gt;
&lt;th&gt;Vertical resistance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Image View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Text View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;249&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;First,Middle,and Last Name Labels&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;251&lt;/td&gt;
&lt;td&gt;251&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;First,Middle,and Last Text Fields&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;749&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;讨论-1&quot;&gt;&lt;a href=&quot;#讨论-1&quot; class=&quot;headerlink&quot; title=&quot;讨论&quot;&gt;&lt;/a&gt;讨论&lt;/h4&gt;&lt;p&gt;在这部分内容中，多个 stack view 互相作用，共同完成了一个复杂的布局。但是，这些 stack view 并不能独立完成所有的布局效果。例如，在一个 image view 改变大小时，里面的 image 应该保持纵横比不变。不幸的是，在 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/LayoutUsingStackViews.html#//apple_ref/doc/uid/TP40010853-CH11-SW2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简单的 Stack View&lt;/a&gt; 这部分内容用的的技术并没有用到这里。在这里，image 需要紧贴 image view 头部和底部边缘。如果将 image view 的 mode 设置为 Aspect Fit 可能会导致上下留白。幸运的是，在这里 image 的纵横比永远保持为正方形，所以你可以让 image 完全充满 image view，然后约束 image view 的纵横比为 1:1。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Interface Builder 中，一个纵横比的约束是一个 view 的高度和宽度约束的合成。Interface Builder 可以以多种方式去显示多条约束。一般情况下，对于纵横比约束，会以一个比例式的形式展示。例如 一个 &lt;code&gt;View.Width = View.Height&lt;/code&gt; 约束代表一个 1:1 的长宽比约束。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除此之外，所有的 text fields 宽度应该相同。不幸的是，他们被分布在不同的 stack view 中，这样就不能通过 stack view 进行处理。因此，你必须对这些 view 添加 equal width 约束。&lt;/p&gt;
&lt;p&gt;和其他简单的 stack view 一样，你需要改变其中一些 stack view 的 CHCR 属性。以此来定义当父视图的大小发生改变时，view 应该如何压缩或扩展。&lt;/p&gt;
&lt;p&gt;竖直方向上，你想让 text view 充满整个 stack view。因此在进行设置时，text view 的 Vertical Hugging 权重一定要低于其他 view。&lt;/p&gt;
&lt;p&gt;水平方向上，Label 的大小一般为固有内容的大小。当 text field 进行填充适配时，默认的 CHCR 权重设置可以使 label 不会受到挤压。虽然 Interface Builder 早已经将 label 的 content hugging 权重设置为 251，使它要高于 text fields;但是，你仍然需要将 text fields 的 CHCR 权重设置的更低。&lt;/p&gt;
&lt;p&gt;为了使 image view 可以和 name row stack view 一样高，需要适当对其进行压缩。然而，stack view 为了让内容能显示出来，只会尽可能地扩大空间。这意味着一定要将 image view 的 vertical compression resistance 设置的非常低，这样 image view 才会压缩而不是充满 stack view。除此之外，设置 image view 的纵横比之后，会使布局变得十分复杂，因为设置纵横比之后，水平和竖直方向将会相互作用。这意味着还需要将 text fields 的 horizontal content hugging 权重设置一个较低值，以此避免 image view 被压缩。综合考虑，将权重设置为 48 或者更低最为合适。&lt;/p&gt;
&lt;h3 id=&quot;动态-Stack-View&quot;&gt;&lt;a href=&quot;#动态-Stack-View&quot; class=&quot;headerlink&quot; title=&quot;动态 Stack View&quot;&gt;&lt;/a&gt;动态 Stack View&lt;/h3&gt;&lt;p&gt;这部分内容展示了如何在运行时动态插入或删除一条 item。所有的变化以动画形式展示。除此之外，图中的 stack view 加在了一个 scroll view 内部，如果一屏幕展示不开，可以进行滚动。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Dynamic_Stack_View_Screenshot_2x.png&quot; width=&quot;440&quot; height=&quot;380&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分内容意在介绍如何动态操作 stack view，以及如何在 scroll view 中使用 stack view。在真实的 APP 开发中，这种场景一般使用 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uitableview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UITableView&lt;/a&gt;。一般情况下，你不应该使用动态 stack view 来代替 table view。并且，使用这种方式创建的界面不能灵活使用其他的布局技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;视图和约束-2&quot;&gt;&lt;a href=&quot;#视图和约束-2&quot; class=&quot;headerlink&quot; title=&quot;视图和约束&quot;&gt;&lt;/a&gt;视图和约束&lt;/h4&gt;&lt;p&gt;一开始的界面十分简单。在画布上放置一个 scroll view 并使其充满画布。然后，在 scroll view 中放置一个 stack view，并且在 stack view 中放置一个 button。所有控件放置好之后，设置如下约束：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/dynamic_stack_view_2x.png&quot; width=&quot;280&quot; height=&quot;366&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. Scroll View.Leading = Superview.LeadingMargin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. Scroll View.Trailing = Superview.TrailingMargin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Scroll View.Top = Superview.TopMargin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. Bottom Layout Guide.Top = Scroll View.Bottom + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. Stack View.Leading = Scroll View.Leading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6. Stack View.Trailing = Scroll View.Trailing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7. Stack View.Top = Scroll View.Top&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8. Stack View.Bottom = Scroll View.Bottom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9. Stack View.Width = Scroll View.Width&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;属性-2&quot;&gt;&lt;a href=&quot;#属性-2&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h4&gt;&lt;p&gt;在 Attributes 检查器中，给 stack view 设置如下属性：&lt;/p&gt;
&lt;p&gt;Stack | Axis | Alignment | Distribution | Spacing&lt;br&gt;&lt;strong&gt;Stack View&lt;/strong&gt; | Vertical | Fill | Equal Spacing | 0&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;这里会通过使用一些代码进行布局。创建一个自定义的 view controller，然后将 scroll view 和 stack view 以 outlets 的方式引入。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class DynamicStackViewController: &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBOutlet &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; private var scrollView: &lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBOutlet &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; private var stackView: &lt;span class=&quot;built_in&quot;&gt;UIStackView&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Method implementations will go here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来，重写 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621495-viewdidload&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;viewDidLoad&lt;/a&gt; 方法，在其中设置 scroll view 的位置。如果你想让 scroll view 的内容开始于 status bar 的下面，按照下面代码设置：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override func viewDidLoad() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// setup scrollview&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let insets = &lt;span class=&quot;built_in&quot;&gt;UIEdgeInsetsMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scrollView.contentInset = insets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scrollView.scrollIndicatorInsets = insets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，为 button 添加一个 action。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MARK: Action Methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@IBAction func addEntry(sender: AnyObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let stack = stackView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let index = stack.arrangedSubviews.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let addView = stack.arrangedSubviews[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let scroll = scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let offset = &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;(x: scroll.contentOffset.x,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y: scroll.contentOffset.y + addView.frame.size.height)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let newView = createEntry()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newView.hidden = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.insertArrangedSubview(newView, atIndex: index)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;) &amp;#123; () -&amp;gt; Void &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newView.hidden = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scroll.contentOffset = offset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法首先计算了 scroll view 的 offset，然后创建了一个新视图。将新视图设置为隐藏并加入 stack view。被隐藏的视图不会影响 stack view 的显示和布局——所以 stack view 的显示效果保持不变。然后，在一个动画的 block 中，设置 view 的显示并更新 scroll view 的 offset，使 view 以动画形式展示出来。&lt;/p&gt;
&lt;p&gt;类似的，添加一个删除视图的方法。但是，与 &lt;code&gt;addEntry&lt;/code&gt; 方法不同，这个方法不会直接关联 Interface Builder 上的任何控件。而是在 view 创建时，以编码的方式关联上每个 view。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func deleteStackView(sender: &lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; let view = sender.superview &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt;.animateWithDuration(&lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;, animations: &amp;#123; () -&amp;gt; Void &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.hidden = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, completion: &amp;#123; (success) -&amp;gt; Void &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.removeFromSuperview()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法里，在 animation 的 block 中隐藏 view。完成动画之后，将 view 从 view 层级中移除。这样就可以使 view 自动从 stack view 中移除。&lt;/p&gt;
&lt;p&gt;添加到 stack view 中的条目可以是任意样式，在这个例子中，每个条目是一个 stack view，这个 stack view 中包含了一个显示日期的 label，一个显示十六进制字符串的 label，一个删除 button。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MARK: - Private Methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private func createEntry() -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let date = &lt;span class=&quot;built_in&quot;&gt;NSDateFormatter&lt;/span&gt;.localizedStringFromDate(&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt;(), dateStyle: .ShortStyle, timeStyle: .NoStyle)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let number = &lt;span class=&quot;string&quot;&gt;&quot;\(randomHexQuad())-\(randomHexQuad())-\(randomHexQuad())-\(randomHexQuad())&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let stack = &lt;span class=&quot;built_in&quot;&gt;UIStackView&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.axis = .Horizontal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.alignment = .FirstBaseline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.distribution = .Fill&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.spacing = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let dateLabel = &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dateLabel.text = date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dateLabel.font = &lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt;.preferredFontForTextStyle(&lt;span class=&quot;built_in&quot;&gt;UIFontTextStyleBody&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let numberLabel = &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numberLabel.text = number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numberLabel.font = &lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt;.preferredFontForTextStyle(&lt;span class=&quot;built_in&quot;&gt;UIFontTextStyleHeadline&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let deleteButton = &lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt;(type: .RoundedRect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deleteButton.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;Delete&quot;&lt;/span&gt;, forState: .Normal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deleteButton.addTarget(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, action: &lt;span class=&quot;string&quot;&gt;&quot;deleteStackView:&quot;&lt;/span&gt;, forControlEvents: .TouchUpInside)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.addArrangedSubview(dateLabel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.addArrangedSubview(numberLabel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.addArrangedSubview(deleteButton)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; stack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private func randomHexQuad() -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;(format: &lt;span class=&quot;string&quot;&gt;&quot;%X%X%X%X&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arc4random() % &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arc4random() % &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arc4random() % &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arc4random() % &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) as String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;讨论-2&quot;&gt;&lt;a href=&quot;#讨论-2&quot; class=&quot;headerlink&quot; title=&quot;讨论&quot;&gt;&lt;/a&gt;讨论&lt;/h4&gt;&lt;p&gt;在这个样例中，stack view 可以在 APP 运行时动态添加或删除 view。然后 stack view 可以根据内容变化动态改变布局。最后，这里有一些重要的点值得我们记住：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐藏的 view 一直存在于 stack view 的子 view 数组中. 然而，它们不会展示，也不会影响布局和其他子 view.&lt;/li&gt;
&lt;li&gt;将一个 view 加到 stack view 的子 view 数组中时，这个 view 会自动添加到 view 层级.&lt;/li&gt;
&lt;li&gt;将一个 view 从 stack 的子 view 数组中移除时，不会从 view 层级中自动移除；将一个 view 从 view 层级中移除，同样也不会从 stack 的子 view 数组中移除.&lt;/li&gt;
&lt;li&gt;在 iOS 系统中，view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622585-ishidden&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hidden&lt;/a&gt; 属性通常情况下么有动画效果.然而在这里，将 view 放到 stack view 的子 view 里面时会有动画效果，这个效果是 stack view 实现的，而不是 view 通过使用 &lt;code&gt;hidden&lt;/code&gt; 属性实现的.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这部分内容同时还简单介绍了如何在 scroll view 中使用自动布局。这里在 stack view 和 scroll view 之间设置了一系列的约束，以此来定义 scroll view 内容区域大小。在水平方向上，设置 stack view 的宽度充满 scroll view。竖直方向上，scroll view 的 content size 由 stack view 的大小来决定。stack view 会随着加入的条目越多而变得越长。相应的，scroll view 滚动区域也会随之增加，以适应 stack view 的内容大小。&lt;/p&gt;
&lt;p&gt;关于更多信息，请查看 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithScrollViews.html#//apple_ref/doc/uid/TP40010853-CH24-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Working with Scroll Views&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;下面的内容主要介绍了如何使用 stack view 创建一些复杂的布局。Stack view 是一个很强悍的工具，使&lt;br&gt;用它设计用户界面会十分便捷。Stack view 的一些属性在很大程度上只能控制它的子视图如何排列。你可以通过增加
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS Auto Layout-使用 Interface Builder 布局（译）</title>
    <link href="http://yoursite.com/2018/04/08/iOS%20Auto%20Layout-%E4%BD%BF%E7%94%A8%20Interface%20Builder%20%E5%B8%83%E5%B1%80%EF%BC%88%E8%AF%91)/"/>
    <id>http://yoursite.com/2018/04/08/iOS Auto Layout-使用 Interface Builder 布局（译)/</id>
    <published>2018-04-08T14:02:47.000Z</published>
    <updated>2018-06-03T08:23:22.766Z</updated>
    
    <content type="html">&lt;p&gt;在Interface Bulider 上有三种方式可以设置约束：你可以通过按住 control 键并拖拽设置约束，&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;可以通过 Pin 和 Align 这两个工具设置约束，还可以让 Interface Builder 自动设置约束，然后在这基础上手动做一些改变。每一种设置方式都有它的优势与劣势。大部分开发者比较倾向于只是用一种方式。但是，熟悉三种方式的使用，能够让你在开发过程中根据实际需求进行快速切换，提高效率。&lt;/p&gt;
&lt;p&gt;你可以这样将三种方式配合使用。首先从 Object library 中拖拽几个 view 和控件到画布上。根据你的需要改变他们的大小和位置。当你将 view 放到画布上之后，Interface Builder 会以左上角为基准，自动创建一些约束来定义 view 的大小和位置。&lt;/p&gt;
&lt;p&gt;你的 APP 在使用默认约束的情况下，可以正常编译和运行。先通过设置这些约束，对界面进行测试和预览，然后根据你自己的需求使用新的约束替换到默认约束。永远不要直接在 APP 中使用系统默认设置的约束。&lt;/p&gt;
&lt;p&gt;一旦你创建了自己的约束，被影响到的系统的默认的约束会被移除掉。没有了原来的这些约束，就不能再准确地定义 view 的大小和位置。这样就编程一个模糊不清的布局。被影响的约束会突然变成红色，Xcode 也会报出一些警告。&lt;/p&gt;
&lt;p&gt;不要慌，你可以逐条添加约束，直到完成布局。一旦你添加了一条约束，你需要按照你的布局方式，去完成整个布局。&lt;/p&gt;
&lt;p&gt;关于如何修复布局警告和错误的更多信息，请查看 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/TypesofErrors.html#//apple_ref/doc/uid/TP40010853-CH22-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debugging Auto Layout&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;通过拖拽添加约束&quot;&gt;&lt;a href=&quot;#通过拖拽添加约束&quot; class=&quot;headerlink&quot; title=&quot;通过拖拽添加约束&quot;&gt;&lt;/a&gt;通过拖拽添加约束&lt;/h3&gt;&lt;p&gt;在两个 view 之间创建约束，选择一个 view，按住 control 键拖拽到另一外一个 view 上。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ControlDrag_2x.png&quot; width=&quot;187&quot; height=&quot;72&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;当你释放鼠标之后，Interface Builder 会弹出一个 HUD 菜单，菜单中列出了可以选择的约束。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Popup_Menu_2x.png&quot; width=&quot;244&quot; height=&quot;244&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;根据你布局的控件和拖拽的方向，Interface Builder 智能的为你选出了一系列的约束供你选择。如果你拖拽时稍微偏向水平方向，你会得到一组设置 view 水平间距的约束，和设置 view 竖直方向对齐方式的约束。如果你拖拽时稍微偏向竖直方向，你会得到一组设置 view 竖直方向的约束，和设置水平方向对齐方式的约束。两种手势中，还可能包含一些其他选项（例如设置 view 之间的关联大小）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以直接在画布上面使用拖拽手势，设置两个 view 之间的约束。你还可以在画布的大纲视图中通过过拽设置 view 之间的约束，当 view 非常难找到的时候，这种方式是非常有效的。例如在对 top 和 bottom layout guide 设置约束时。在使用大纲视图拖拽设置约束时，Interface Builder 会将所有方向的约束选项都显示出来，不会进行过滤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Interface Builder 会根据 view 当前的 frame 创建约束。因此，在你设置约束条件之前，给 view 一个合适的位置。在使用 Interface Builder 的大纲视图排列 view 时，最后你应该设置一个符合要求的约束布局。在这过程中，你可能要反复修改约束条件。&lt;/p&gt;
&lt;p&gt;通过拖拽方式设置约束时一个十分便捷的方法；然而，因为约束的常量值是根据 view 当前布局计算的，很容易出现一些小数。如果你想要设置更精确优雅的布局，在设置完约束后，在重新对一些细节进行编辑，或者使用 Pin 和 Align 工具设置约束。&lt;/p&gt;
&lt;p&gt;关于更多通过拖拽设置约束的信息，请查看 “Adding Layout Constraints by Control-Dragging” 这一章节。&lt;/p&gt;
&lt;h3 id=&quot;使用-Stack-Align-Pin-和-Resolve-这些工具&quot;&gt;&lt;a href=&quot;#使用-Stack-Align-Pin-和-Resolve-这些工具&quot; class=&quot;headerlink&quot; title=&quot;使用 Stack,Align,Pin 和 Resolve 这些工具&quot;&gt;&lt;/a&gt;使用 Stack,Align,Pin 和 Resolve 这些工具&lt;/h3&gt;&lt;p&gt;Intercae Builder 为 Auto Layout 提供了四个工具，这四个工具在编辑窗口的右下角，分别为 Stack,Align,Pin 和 Resolve Auto Layout Issues 工具。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Auto_Layout_Tools_2x.png&quot; width=&quot;136&quot; height=&quot;125&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;当你想要更好的控制布局约束，或者你想一次性设置多条约束，可以使用 Pin 和 Align 这两个工具。使用这两个工具还有一个好处，那就是你在设置约束时，不需要去精确设置 view 的位置。你可以先大致摆放一下 view，然后添加约束。待添加约束成功之后，更新 view 的 frame，然后 Auto Layout 会替你计算出 view 的正确位置。&lt;/p&gt;
&lt;h4 id=&quot;Stack-工具&quot;&gt;&lt;a href=&quot;#Stack-工具&quot; class=&quot;headerlink&quot; title=&quot;Stack 工具&quot;&gt;&lt;/a&gt;Stack 工具&lt;/h4&gt;&lt;p&gt;Stack 工具可以帮你快速创建一个 stack view。选中一个或者多个控件视图，然后点击 stack 工具。Interface Builder 会将这些选中视图放到一个 stack view，并根据当前内容给 stack view 设置一个合适大小。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统会根据相关 view 的位置去设置 stack view 的中心轴和对齐方式.你可以通过属性检查器来改变中心轴和对齐方式（同样还可以修改 view 排布方式和间距）.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Align-工具&quot;&gt;&lt;a href=&quot;#Align-工具&quot; class=&quot;headerlink&quot; title=&quot;Align 工具&quot;&gt;&lt;/a&gt;Align 工具&lt;/h4&gt;&lt;p&gt;Align 工具可以帮助你快速设置 view 的对齐方式。选中你想要设置的控件视图，然后点击 Align 工具。Interface Builder 会显示一个弹框，里面包含了一系列可以选择的对齐方式。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Align_Tool_Popup_2x.png&quot; width=&quot;330&quot; height=&quot;345&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;选中你想要的对齐方式，并点击 Add Constraints 按钮。Interface Builder 会根据选择的对齐方式，自动创建一些约束来使这些 view 对齐。默认情况下，通过这种方式使 view 对齐不会时 view 发生位移（view 变得边缘对齐或者中心对齐），更不会更新 frame。你可以在创建约束前改变这一设置。&lt;/p&gt;
&lt;p&gt;通常情况下，你需要选择两个或者多个 view 才能使用 Align 工具。然而，在设置“水平居中于父视图”和“垂直居中于父视图”时只选择一个 view 就可以设置。你可以通过弹框一次性选择很多条约束，然而实际情况中一般只选择一两条，很少会多于两条。&lt;/p&gt;
&lt;p&gt;更多信息，请查看 “Adding Auto Layout Constraints with the Pin and Align Tools”。&lt;/p&gt;
&lt;h4 id=&quot;Pin-工具&quot;&gt;&lt;a href=&quot;#Pin-工具&quot; class=&quot;headerlink&quot; title=&quot;Pin 工具&quot;&gt;&lt;/a&gt;Pin 工具&lt;/h4&gt;&lt;p&gt;使用 Pin 工具可以帮你快速地定义一个 view 与相邻 view 的相对位置和大小。选中你想设置的 view，然后点击 Pin 工具。Interface Builder 呈现一个弹出框，你可以通过弹框上面的各个选项设置 view 的约束。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Pin_Popover_View_2x.png&quot; width=&quot;290&quot; height=&quot;416&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;通过弹框顶部提供的一些功能，你可以设置 view 头部、顶部、尾部或者底部边缘与相邻 view 之间的距离。上面的数字代表当前 view 与其他 view 之间的间距。你可以自定义这个间距，同时你还可以通过点击“小三角”去选择与哪个 view 设置关联。”Constrain to margins” 复选框决定在设置约束时，是相对于 margins 设置，还是相对于 view 边缘设置。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Pin_Settings_2x.png&quot; width=&quot;408&quot; height=&quot;180&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;下半部分提供了另外一些功能，你可以通过这些功能设置 view 的宽度和高度。Width 和 Height 显示的是 view 当前的宽高，你可以修改这些值并创建新的约束。Aspect Ratio 显示的也是当前的纵横比，如果你想修改这个比例，你需要重新编辑刚才设置的约束。&lt;/p&gt;
&lt;p&gt;一般情况下，你只可以通过 pin 工具设置一个 view 的约束。然而，你也可以选择多个 view，并将它们设置为相等宽高。你可以一次性设置多条约束，也可以通过设置约束去重置 view 的 frame。当你选择了想要设置的约束之后，点击 Add Constraints 按钮去添加这些约束。&lt;/p&gt;
&lt;p&gt;关于更多信息，请查看 “Adding Auto Layout Constraints with the Pin and Align Tools”。&lt;/p&gt;
&lt;h4 id=&quot;Resolve-Auto-Layout-Issues-工具&quot;&gt;&lt;a href=&quot;#Resolve-Auto-Layout-Issues-工具&quot; class=&quot;headerlink&quot; title=&quot;Resolve Auto Layout Issues 工具&quot;&gt;&lt;/a&gt;Resolve Auto Layout Issues 工具&lt;/h4&gt;&lt;p&gt;Resolve Auto Layout Issues 工具提供了一些修复约束的功能。如下图所示，上半部分的所提供的功能用来修改当前选中 view 的约束；下半部分提供的功能用来修改当前界面内所有 view 的约束。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Resolve_Auto_Layout_Popup_2x.png&quot; width=&quot;322&quot; height=&quot;260&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;通过这个工具，你可以基于当前约束，更新 view 的 frame；或者基于当前 view 的位置，更新 view 的约束。你也可以通过这个工具添加漏掉的约束，清除约束，或者重置一系列的约束。&lt;/p&gt;
&lt;p&gt;对于添加或者重置约束的命令，在 &lt;strong&gt;Letting Interface Builder Create Constraints&lt;/strong&gt; 章节进行了详细的讨论。&lt;/p&gt;
&lt;h3 id=&quot;让-Interface-Builder-自动创建约束&quot;&gt;&lt;a href=&quot;#让-Interface-Builder-自动创建约束&quot; class=&quot;headerlink&quot; title=&quot;让 Interface Builder 自动创建约束&quot;&gt;&lt;/a&gt;让 Interface Builder 自动创建约束&lt;/h3&gt;&lt;p&gt;Interface Buidler 可以为你创建部分约束或者全部约束。当使用这个功能时，Interface Builder 会根据当前 view 在画布上的位置和大小，尝试创建最合适的约束。所以一定要小心摆放你的 view —— 位置稍有不同，所产生的约束可能会千差万别。&lt;/p&gt;
&lt;p&gt;如果你想通过 Interface Builder 创建所有的约束，你可以点击 Resolve Auto Layout Issues tool -&amp;gt; Add Missing Constraints.通过这个功能可以确定一个清晰的布局。如上面所说，你可以只为选中的 view 添加约束，也可以为当前界面上所有 view 添加约束。&lt;/p&gt;
&lt;p&gt;通过这个功能，你可以快速创建一个清晰、满意的布局。但是，除非界面上的元素十分简单的时候，你可以使用这种方式布局。当界面元素比较复杂的时候，如果你还使用这种方式布局，结果很有可能并不是你想要的。&lt;/p&gt;
&lt;h3 id=&quot;查看并编辑约束&quot;&gt;&lt;a href=&quot;#查看并编辑约束&quot; class=&quot;headerlink&quot; title=&quot;查看并编辑约束&quot;&gt;&lt;/a&gt;查看并编辑约束&lt;/h3&gt;&lt;p&gt;当你创建约束之后，你可能需要编辑这些约束。这里提供了一些方法去编辑这些约束，每种方法都各有各的特色。&lt;/p&gt;
&lt;h4 id=&quot;在画布上查看约束&quot;&gt;&lt;a href=&quot;#在画布上查看约束&quot; class=&quot;headerlink&quot; title=&quot;在画布上查看约束&quot;&gt;&lt;/a&gt;在画布上查看约束&lt;/h4&gt;&lt;p&gt;在下面显示的编辑器中，以有色线的形式显示了当前收到影响的约束。线条的形状、划线类型和线条颜色可以告诉你关于当前约束的很多信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I-BARS(以 T 形作为末端的线).&lt;/strong&gt;I-bars 展示了一段间距。这段间距可以是两个 view 之间的间距，也可以是一个 view 的高度或者宽度.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;普通直线(没有任何末端直线).&lt;/strong&gt;普通直线表示 view 的对齐方式。例如，Interface Builder 使用简单的一条线来作为两个对齐 view 的基准线.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实线.&lt;/strong&gt;实线代表必须满足的约束(权重 = 1000).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚线.&lt;/strong&gt;虚线代表可选的约束(权重 &amp;lt; 1000).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;红色线.&lt;/strong&gt;标明被这条约束影响的 view 有一个错误.当出现红线时，说明当前布局时一个不满足需求的布局.关于错误约束更多信息，你可以通过 issues 导航器查看，也可以通过点击大纲视图中右上角的红色箭头进行查看.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;橘黄色线.&lt;/strong&gt;橘黄色线直接标明了在当前约束条件下，view 没有处于正确的位置。Interface Builder 以虚线的方式显示了 view 应该处于的位置.你可以通过 Resolve Auto Layout Issues tool -&amp;gt; Update Frames 命令将 view 移动到正确的位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;蓝色线.&lt;/strong&gt;被当前约束影响，并且符合当前约束条件布局的控件.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等于号.&lt;/strong&gt;当通过约束设置两个 view 等宽或者等高时，Interface Builder 会使用两个分隔条来显示着两天约束，每个分隔条上面有一个蓝底白色的等号.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大于等于号和小于等于号.&lt;/strong&gt;Interface Builder 会将表示大于等于或者小于等于关系的约束标志上 &amp;gt;= 或者 &amp;lt;= 符号.&lt;/li&gt;
&lt;/ul&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Constraints_In_The_Canvas_2x.png&quot; width=&quot;386&quot; height=&quot;230&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h4 id=&quot;在文件大纲视图中以列表形式查看约束&quot;&gt;&lt;a href=&quot;#在文件大纲视图中以列表形式查看约束&quot; class=&quot;headerlink&quot; title=&quot;在文件大纲视图中以列表形式查看约束&quot;&gt;&lt;/a&gt;在文件大纲视图中以列表形式查看约束&lt;/h4&gt;&lt;p&gt;Interfae Builder 在文件大纲视图中以列表形式列出了所有的约束，并且按照与之关联的情况进行分组，然后将这组约束放在关联 view 的下方。在下面图中，view 包含了它自己和其子视图，还有与这些视图相关的约束。对于 top layout guide 和 bottom layout guide 被包含在当前界面的跟视图层级下面。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Constraints_In_Document_Outline_2x.png&quot; width=&quot;340&quot; height=&quot;386&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;一般情况下，约束分布在大纲视图的各个层级，截止于当前界面根视图那一层级。所以，如果你想要找到所有的约束，你需要逐次展开 view 的层级。&lt;/p&gt;
&lt;p&gt;这些约束条件在列表中一般以伪代码的形式显示。这些伪代码通常包含一系列的视图元素，不能完全显示出来。如果你想查看某条约束的具体信息，在这之前你需要增加大纲视图的宽度。在平时开发中，你可以在画布上选中一条约束，然后通过大纲视图来快速查看约束并校验具体信息。&lt;/p&gt;
&lt;p&gt;在一些简单的布局中，你可以通过大纲视图快速浏览所有的约束。然而，随着布局变得越来越复杂，要想寻找一条具体的约束变得很困难。这时候你最好直接在 view 上面查看，或者选中一条约束后在 Size 检查器中进行审查。&lt;/p&gt;
&lt;h4 id=&quot;在-Size-检查器中查看约束&quot;&gt;&lt;a href=&quot;#在-Size-检查器中查看约束&quot; class=&quot;headerlink&quot; title=&quot;在 Size 检查器中查看约束&quot;&gt;&lt;/a&gt;在 Size 检查器中查看约束&lt;/h4&gt;&lt;p&gt;Size 检查器中列出了与当前选中 view 有关的所有约束。一些必要的约束以实线形式展示，一些可选约束以虚线形式展示。在检查器中，列出了关于约束的很多重要信息。通常包含约束的属性信息和一些其他信息，例如约束的关联关系、常量值、乘积因子和比例等。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Constraints_in_Size_Inspector_2x.png&quot; width=&quot;258&quot; height=&quot;428&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;在上述截图上部分的简图中，列出了受影响的相关约束。如果你想单独查看某一条约束的信息，可以在简图中选中这条约束，下面的列表会将其他约束过滤掉以方便查看。&lt;/p&gt;
&lt;p&gt;关于更多信息，请查看 “Viewing the Complete List of Layout Constraints for an Item”。&lt;/p&gt;
&lt;h4 id=&quot;检查并编辑约束&quot;&gt;&lt;a href=&quot;#检查并编辑约束&quot; class=&quot;headerlink&quot; title=&quot;检查并编辑约束&quot;&gt;&lt;/a&gt;检查并编辑约束&lt;/h4&gt;&lt;p&gt;当你在画布上或者在大纲视图中选中一条约束，属性检查器会显示出这条约束的所有属性信息。同时属性检查器还显示了这条约束的权重和标识。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Editing_Constraints_in_the_Attribute_Inspector_2x.png&quot; width=&quot;258&quot; height=&quot;250&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过约束的 &lt;code&gt;identifier&lt;/code&gt; 属性，你可以为约束设置一个别名。这样在调试时，可以在调试日志中辨别出这条约束。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以将一条约束标记为 placeholder(预置)。被标记为预置的约束只会存在于设计时。在 APP 运行起来后，这些约束将不被包含在内。一般情况下，如果你想在运行时动态添加约束，你可以添加预置约束。当在 Interface Builder 上有一些约束错误或者警告，但你又不想在实际运行中修改这些约束。你可以通过添加这些临时约束，创建一个清晰地、满足需求的布局，以此来消除一些错误与警告。&lt;/p&gt;
&lt;p&gt;你可以任意改变 Constant,Priority,Multiplier,Relation,Identifier 和 Placeholder 这些属性的值。但是对于 ‘First Item’ 和 ‘Relation’ 这两项，你能做出的修改非常有限。你可以通过 ‘First Item’ 将被约束的两个控件进行对调(反向去设置约束值和比例系数)。你可以通过这些功能改变控件的属性，但是不能改变控件本身。如果你想将约束移动到一个完全不同的控件上，需要先将控件原有约束删除，然后使用新的约束进行替换。&lt;/p&gt;
&lt;p&gt;通过使用 Size 检查器你可以直接编辑一些属性值。随意点击一条约束的 ‘Edit’ 按钮，会出现一个弹窗，通过这个弹窗你可以修改约束的 relationship,constant,priority 或者 multiplier 这些值。或者使用另外一种方式，直接双击一条约束，会打开属性检查器，然后你可以通过属性检查器修改这些值。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Editing_Constraints_in_the_Size_Inspector_2x.png&quot; width=&quot;254&quot; height=&quot;140&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;关于更多信息，请查看 “Editing Auto Layout Constraints”.&lt;/p&gt;
&lt;h3 id=&quot;设置-Content-Hugging-和-Compression-Resistance-权重&quot;&gt;&lt;a href=&quot;#设置-Content-Hugging-和-Compression-Resistance-权重&quot; class=&quot;headerlink&quot; title=&quot;设置 Content-Hugging 和 Compression-Resistance 权重&quot;&gt;&lt;/a&gt;设置 Content-Hugging 和 Compression-Resistance 权重&lt;/h3&gt;&lt;p&gt;如果你想设置 view 的 content-hugging 和 compression-resistance 权重(CHCR 权重)，你可以通过画布或者大纲视图选中一个 view。然后打开 Size 检查器，向下滚动属性检查器，直到你看到 CHCR 权重的设置栏。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/CHCR_Priorities_2x.png&quot; width=&quot;260&quot; height=&quot;172&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;你还可以通过 Interface Builder 设置 view 的固有大小。Interface Builder 默认情况下使用 view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622600-intrinsiccontentsize&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;intrinsicContentSize&lt;/a&gt; 方法的返回值。如果你在设计时需要不同的固有大小，可以通过这个功能设置设置一个预置值。这个值只会在 Interface Builder 上面影响到 view 大小，在程序运行时不会起到作用。&lt;/p&gt;
&lt;p&gt;关于更多信息，请查看 “Setting the Placeholder Intrinsic Size for a Custom View”.&lt;/p&gt;
&lt;h3 id=&quot;iOS-仅有特征&quot;&gt;&lt;a href=&quot;#iOS-仅有特征&quot; class=&quot;headerlink&quot; title=&quot;iOS 仅有特征&quot;&gt;&lt;/a&gt;iOS 仅有特征&lt;/h3&gt;&lt;p&gt;iOS 针对 Auto Layout 添加了一些独有的特征。主要包括 top layout guide 和 bottom layout guide、view 的 layout marigins、view 的 readable content guides(最佳阅读区域)和 view 的 semantic content（语义学内容）。&lt;/p&gt;
&lt;h4 id=&quot;Top-and-Bottom-Layout-Guides&quot;&gt;&lt;a href=&quot;#Top-and-Bottom-Layout-Guides&quot; class=&quot;headerlink&quot; title=&quot;Top and Bottom Layout Guides&quot;&gt;&lt;/a&gt;Top and Bottom Layout Guides&lt;/h4&gt;&lt;p&gt;Top and Bottom Layout Guides 代表当前控制器下可视区域的上下两个边界。如果你不想你的内容被一些透明或者半透明的 bar(例如，状态栏，导航栏，tab 栏)遮挡住，使用 Auto Layout 将你的内容布局在边界内。&lt;/p&gt;
&lt;p&gt;Layout Guides 遵循了 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uilayoutsupport&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UILayoutSupport&lt;/a&gt; 协议，并提供了一个&lt;code&gt;length&lt;/code&gt; 属性，这个属性代表每个 guide 到对应一侧边缘的距离。具体可以这样描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 Top Layout Guide,&lt;code&gt;length&lt;/code&gt; 代表当前控制器的 view 的上边缘，到遮挡内容的Bar的下边缘的距离。&lt;/li&gt;
&lt;li&gt;对于 Bottom Layout Guide,&lt;code&gt;lenght&lt;/code&gt; 代表当前控制器 view 的下边缘，到遮挡内容 Bar(例如 tab bar) 的上边缘的距离。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些 guides 在约束布局中充当一个控件，并提供了顶部、底部和高度这些属性。一般情况下，你会约束 view 与 top layout guide 的底部关联，或者约束 view 与 bottom layout guide 的顶部关联。Guides 也提供了 &lt;code&gt;topAnchor&lt;/code&gt;,&lt;code&gt;bottomAnchor&lt;/code&gt;,和 &lt;code&gt;heightAnchor&lt;/code&gt; 属性，通过使用这些属性，可以简化使用代码创建约束的过程。&lt;/p&gt;
&lt;p&gt;当相对于根视图设置约束时，Interface Builder 会提供 top 和 bottom layout guides 作为可选项。如果 view 与 layout guide 相邻，设置上下边缘约束时，Interface Builder 会默认选择使用 guide。你也可以通过使用 Pin 工具，点击小三角，手动设置是与 layout guide 关联还是与 view 本身边缘关联。&lt;/p&gt;
&lt;h4 id=&quot;Layout-Margins&quot;&gt;&lt;a href=&quot;#Layout-Margins&quot; class=&quot;headerlink&quot; title=&quot;Layout Margins&quot;&gt;&lt;/a&gt;Layout Margins&lt;/h4&gt;&lt;p&gt;Auto Layout 针对每个 view 定义了默认内容边距。这些边距代表了 view 的边缘与父视图之间想要添加的一个额外距离。你可以通过 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622566-layoutmargins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;layoutMargins&lt;/a&gt; 属性或者 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622651-layoutmarginsguide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;layoutMarginsGuide&lt;/a&gt; 属性来获取 view 的 margins 的值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;layoutMargins&lt;/code&gt; 属性是一个 readwrite 属性，你可以用一个 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiedgeinsets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIEdgeInsets&lt;/a&gt; 类型数据结构来对其赋值，也可以通过它的 get 方法返回一个这样的数据结构。&lt;code&gt;layoutMarginsGuide&lt;/code&gt; 只提供了 readOnly 属性，因此你可以通过 get 方法返回一个 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uilayoutguide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UILayoutGuide&lt;/a&gt; 对象。除此之外，你还可以通过设置 view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622653-preservessuperviewlayoutmargins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;preservesSuperviewLayoutMargins&lt;/a&gt; 属性去决定是否去适应父视图的边距。&lt;/p&gt;
&lt;p&gt;一个 view 的默认边距是 8-point。你可以根据需要去改变这个值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;系统自动为一个 view controller 的根视图设置了边距。顶部和底部边距设置为 0，方便内容延伸到 bar 的下面（如果需要的话）。两边的边距会根据当前 controller 展示方式而改变，这个边距可以为 16-point 或者 20-point。你不能改变这些边距。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你为一个 view 设置与父视图相关联的约束时，你应该使用 Layout Margins 而不是使用 view 的 edge。在 UIKit 中，&lt;a href=&quot;https://developer.apple.com/documentation/appkit/nslayoutattribute&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSLayoutAttribute&lt;/a&gt; 定义了一系列的属性来代表上部、下部、头部、尾部、左部和右部的边距。同时还包括了与 center X 和 center Y 边距相关的枚举。&lt;/p&gt;
&lt;p&gt;在 Interface Builder 中，通过拖拽方式为一个 view 和它的父视图之间设置约束时，默认情况下使用的是 “边距属性” 来设置。当你使用 Pin 工具设置约束时，你可以勾选 “Constrain to margins” 这个复选框。如果这一项被勾选，将会通过设置父视图边距的方式来满足约束；如果未被勾选，则通过设置与父视图边缘距离的方式来满足约束。类似的，当通过 Attribute 检查器编辑约束时，在第一个 Item 和第二个 Item 的展开菜单中有一项为 “Relative to margin”。如果勾选这一项，则按照 “边距属性” 方式设置约束；没有勾选则按照边缘距离方式设置约束。&lt;/p&gt;
&lt;p&gt;最后，当你通过编码来设置与父视图相关联的约束时，可以使用 &lt;code&gt;layoutMarginsGuide&lt;/code&gt; 属性直接创建与 layout guide 相关联的约束。&lt;/p&gt;
&lt;h4 id=&quot;Readable-Content-Guides&quot;&gt;&lt;a href=&quot;#Readable-Content-Guides&quot; class=&quot;headerlink&quot; title=&quot;Readable Content Guides&quot;&gt;&lt;/a&gt;Readable Content Guides&lt;/h4&gt;&lt;p&gt;view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622644-readablecontentguide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;readableContentGuide&lt;/a&gt; 属性返回了一个 layout guide，这个 layout guide 定义了对象在 view 内部的最佳阅读区域。理想情况下，内容在这个区域内，用户不需要摆头就可以轻松阅读。&lt;/p&gt;
&lt;p&gt;这条 guide 将内容集中在 view 的边距内，永远不会超出边距。最佳阅读区域的大小会随着字体大小的改变而改变。当用户选择较大字体时，系统会创建一个更宽阔的阅读区域。因为有时候用户阅读时，会距离设备稍远一些，这时候系统需要进行适应以达到最佳阅读效果。&lt;/p&gt;
&lt;p&gt;在 Interface Builder 中，你既可以通过设置来确定是用 layout margins 来代表 view 的边距，还是用 “最佳阅读区域” 来制定 view 的边距。选中一个 view（一般是 view controller 的根视图），然后打开 Size 检查器。如果你勾选了 “Follow Readable Width” 复选框，在设置约束时，会按照 “最佳阅读区域” 来制定 view 的边距。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在大多数设备上面，readable content guide 和 layout margins 没有太大区别。仅当在 iPad 上并且横屏时，这两个项有比较明显的区别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;语义内容&quot;&gt;&lt;a href=&quot;#语义内容&quot; class=&quot;headerlink&quot; title=&quot;语义内容&quot;&gt;&lt;/a&gt;语义内容&lt;/h4&gt;&lt;p&gt;如果你使用头部和尾部约束进行布局，当你将语言从 &lt;strong&gt;左-&amp;gt;右&lt;/strong&gt; 切换为 &lt;strong&gt;右-&amp;gt;左&lt;/strong&gt; 时，布局会自动改变左右方向。然而，有些布局元素是不需要根据阅读方向改变的。例如，根据物理方位（上下左右）设置的一些 button，无论阅读方向如何它们都保持不变。&lt;/p&gt;
&lt;p&gt;view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622461-semanticcontentattribute&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semanticContentAttribute&lt;/a&gt; 属性决定了 view 是否会随着阅读方向而改变布局方位。&lt;/p&gt;
&lt;p&gt;在 Interface Builder 中，你可以在属性检查器中手动设置 Semantic 项。如果设置项为 Unspecified，view 的内容会随着阅读方向改变而改变；如果设置为 Spatial，Playback 或者 Force Left-to-Right, view 设置约束时，leading edges 代表左边缘，trailing edges 代表右边缘；如果设置为 Force Right-to-Left，则 leading edges 代表右边缘，trailing edges 代表左边缘。&lt;/p&gt;
&lt;h3 id=&quot;经验法则&quot;&gt;&lt;a href=&quot;#经验法则&quot; class=&quot;headerlink&quot; title=&quot;经验法则&quot;&gt;&lt;/a&gt;经验法则&lt;/h3&gt;&lt;p&gt;下面一些建议可以帮助你成功地使用 Auto Layout。如果你不遵循这些规则，将会产生一些异常。所以，在设计时一定要考虑清楚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;永远不要使用 view 的 frame、bounds 或者 center 这些属性来指定 view 具体几何结构.&lt;/li&gt;
&lt;li&gt;尽可能使用 stack view.&lt;br&gt;&lt;br&gt; Stack view 会自动为其内容设置约束，你只需要对 stack view 设置简单的约束即可.除非使用 stack view 不能满足你的需求，否则尽量使用 stack view，避免进行自定义布局.&lt;/li&gt;
&lt;li&gt;与 view 相邻的一些控件设置约束.&lt;br&gt;&lt;br&gt; 如果你有两个 button 并排在一起，直接将第二个 button 的头部与第一个 button 的尾部关联。最好不要使第二个 button 越过第一个 button 直接与父视图的边缘想关联。&lt;/li&gt;
&lt;li&gt;避免给 view 设置固定宽高.&lt;br&gt;&lt;br&gt;使用 Auto Layout 目的就是能够让 view 进行动态适应。如果将 view 的大小设置为固定值将会使其失去这一特性.&lt;/li&gt;
&lt;li&gt;如果在设置约束时感觉很困难，尝试使用 Pin 和 Align 这两个工具.尽管使用这两个工具设置约束可能会相对于拖拽方式稍慢一些，但是它可以让你在创建约束前精准地控制一些数值。这些小功能会非常有用，特别是当你初次使用 Auto Layout 时.&lt;/li&gt;
&lt;li&gt;当你自动更新一个控件的 frame 时，需要小心执行。如果一个控件没有足够的约束来确定它的大小和位置，那么更新行为将是未定义的.有时候更新 frame 之后，view 会消失不见。这是因为 view 的大小变为了 0 或者它的位置跑到了屏幕外面.&lt;br&gt;&lt;br&gt;如果有需要的话，你可以随时试着更新一下控件的 frame，然后撤销操作.&lt;/li&gt;
&lt;li&gt;确定你的所有 view 都有一个有意义的命名。这样在使用工具进行操作时能够很容易作出区分.&lt;br&gt;&lt;br&gt;系统会根据 label 的内容和 button 的标题自动为控件命名.对于其他的 view，你可能需要通过 Identify 检查器为它们设置一个具体的标识（或者直接在大纲视图中双击 view 并编辑它的名字）.&lt;/li&gt;
&lt;li&gt;使用 leading 和 trailing 约束，而不是 right 和 left 约束.&lt;br&gt;&lt;br&gt;你可以通过设置 view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622461-semanticcontentattribute&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semanticContentAttribute&lt;/a&gt; 属性（iOS）或者 &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsview/1483254-userinterfacelayoutdirection&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;userInterfaceLayoutDirection&lt;/a&gt; 属性（OS X）来确定 leading 和 trailing 边缘的具体意义.&lt;/li&gt;
&lt;li&gt;在 iOS 系统中国，当约束一个控件与 view controller 的根视图边缘做关联时，使用以下约束:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Horizontal constraints&lt;/strong&gt;.对于大多数控件，会通过约束设置与父视图距离为 0.系统会根据设备型号和 view controller 展示形式，自动提供一些间距.&lt;br&gt;&lt;br&gt;对于文本类对象，会根据边距设置情况充满根视图，当然在布局时使用的是 “最佳阅读区域” 设置的边距，而不是普通边距.&lt;br&gt;&lt;br&gt;对于其他控件，会直接铺满视图的边缘（例如，背景图片），在布局时使用的是 leading 和 trailing edges.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vertical constraints&lt;/strong&gt;.如果想让 view 延伸到一些 bar 的下面,通过设置上下边距来控制.这在设置 scroll view 布局时十分常见,在 scroll view 中经常允许内容直接滚动到 bar 的下面.需要注意的是，你需要改变 scroll view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiscrollview/1619406-contentinset&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;contentInset&lt;/a&gt; 和 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiscrollview/1619427-scrollindicatorinsets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scrollIndicatorInsets&lt;/a&gt; 属性来确定内容正确的初始位置.&lt;br&gt;&lt;br&gt;如果不想让 view 延伸到 bar 的下面,使用 top 和 bottom layout guides 来设置约束.&lt;/li&gt;
&lt;li&gt;当你通过编码实例化一个 view 时，必须将它的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622572-translatesautoresizingmaskintoco&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/a&gt; 属性设置为 &lt;code&gt;NO&lt;/code&gt;.否则在默认情况下，系统会基于 view 的 frame 和 autoresizing mask 自动创建一系列的约束.当你创建自己的约束时，他们必然会与自动创建的一些约束发生冲突.这样的布局时不符合要求的.&lt;/li&gt;
&lt;li&gt;需要意识到 OS X 系统和 iOS 系统计算布局的方式是不同的.&lt;br&gt;&lt;br&gt;在 OS X 系统中，Auto Layout 即可以改变 window 内容的布局，也可以改变 window 的布局.&lt;br&gt;&lt;br&gt;在 iOS 系统中,系统会通过当前场景的大小和布局.Auto Layout 只能改变场景中内容的大小和位置.&lt;br&gt;&lt;br&gt;这些不同看起来无关紧要，但是他对你布局的设计有着很大影响，特别是使用一些属性的时候.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Interface Bulider 上有三种方式可以设置约束：你可以通过按住 control 键并拖拽设置约束，
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS Auto Layout-约束的本质（译）</title>
    <link href="http://yoursite.com/2018/04/08/iOS%20Auto%20Layout-%E7%BA%A6%E6%9D%9F%E7%9A%84%E6%9C%AC%E8%B4%A8%EF%BC%88%E8%AF%91)/"/>
    <id>http://yoursite.com/2018/04/08/iOS Auto Layout-约束的本质（译)/</id>
    <published>2018-04-08T06:23:40.000Z</published>
    <updated>2018-06-03T08:22:28.667Z</updated>
    
    <content type="html">&lt;p&gt;对视图层级布局，实际上是定义了一系列的线性方程式。每一条约束代表一个方程式。你的目的就是通过声明一些列的方程式，并使其只有一组最优解。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面展示了一组简单的方程式.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/view_formula_2x.png&quot; width=&quot;530&quot; height=&quot;230&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;这条约束声明了红色视图的头部必须与蓝色视图的尾部保持 8-point 距离。这个方程式可以分为以下几部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Item 1.&lt;/strong&gt; 方程式的第一个 item，这里代表的是红色视图。这一项必须为一个视图或者 layout guide.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attribute 1.&lt;/strong&gt; 被约束的布局属性，在这里即红色视图的头部(左侧)边缘.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RelationShip.&lt;/strong&gt; 左右两边的逻辑关系。逻辑关系有三种情况：等于，大于等于，小于等于。在这里，左右两边是相等的关系.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiplier.&lt;/strong&gt; 需要与 attribute2 相乘的值，这里相乘的值为 1.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Item 2.&lt;/strong&gt; 方程式中的第二个 item，在这里代表红色视图。与 item1 不同，这里可以为空。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attribute 2.&lt;/strong&gt; 第二个 item 中被约束的布局属性。在这里代表蓝色视图的尾部(右侧)边缘。如果 item2 为空的话，那么这就不应该是一个布局属性.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constant.&lt;/strong&gt; 一个浮点型常量，用来表示偏移量。在这里代表 attribute2 加上 8-point.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;br&gt;这里的 layout guide 是指 UIViewController 的 topLayoutGuide 或者 bottomLayoutGuide，直译过来可能会改变意思，这里直接使用 layout guide.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分约束用来定义界面上两个元素的相互关系。这些元素可以是视图，也可以是 layout guides.约束也可以用来定义同一个元素两个不同属性之间的相互关系，例如，通过约束可以设置一个视图的长宽比。你这可以直接给一个视图的长或宽进行常量赋值，如果你这样做，那么上述方程式中的 item2 就会为空，对应的 attribute2 也不再是一个布局属性，multiplier 也会设置为 0.0。&lt;/p&gt;
&lt;h3 id=&quot;自动布局属性&quot;&gt;&lt;a href=&quot;#自动布局属性&quot; class=&quot;headerlink&quot; title=&quot;自动布局属性&quot;&gt;&lt;/a&gt;自动布局属性&lt;/h3&gt;&lt;p&gt;在 Auto Layout 中，一些特定的属性才可以用来进行设置各种约束。一般情况下，有以下几个属性：四条边缘（前，后，上，下）、高和宽、垂直居中线、水平居中线。对于文本类视图，可能还会有几条基准线属性。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/attributes_2x.png&quot; width=&quot;470&quot; height=&quot;420&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;关于全部的布局属性，请查看 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/nslayoutattribute&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSLayoutAttribute&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;br&gt;尽管 OS X 和 iOS 使用的都是 NSLayoutAttribute，但是两个系统定义的这个枚举的值是不同的。当你查看时，注意选择正确的系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;方程式样例&quot;&gt;&lt;a href=&quot;#方程式样例&quot; class=&quot;headerlink&quot; title=&quot;方程式样例&quot;&gt;&lt;/a&gt;方程式样例&lt;/h3&gt;&lt;p&gt;在方程式中有很多参数和布局属性，你可以通过改变这些参数创建各种各样的约束。你可以通过约束来定义两个 view 之间的间隔，多个 view 的对齐方式，两个 view 之间的大小关系，甚至一个 view 的长宽比。然而，并不是所有的属性与约束直接都可以互相兼容。&lt;/p&gt;
&lt;p&gt;这里主要将属性分为两类。大小属性（例如，高和宽）和位置属性（例如，头，左，上）。大小属性用来指定视图的大小。位置属性用来指定 view 之间相对位置。&lt;/p&gt;
&lt;p&gt;考虑到两者的差异性，在进行约束布局时你需要遵循以下原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你不能将一个大小属性和一个位置属性进行约束关联.&lt;/li&gt;
&lt;li&gt;你不能为一个位置属性进行常量赋值.&lt;/li&gt;
&lt;li&gt;两个位置属性之间进行约束关联时，不应该使用不同的倍率(原则上 multiplier 的值都为 1.0).&lt;/li&gt;
&lt;li&gt;对于位置属性，你不能将垂直线和水平线两个属性进行约束关联.&lt;/li&gt;
&lt;li&gt;对于位置属性，你不能将头部边缘或者尾部边缘，与对应的左边缘属性和右边缘进行约束关联.di&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，你直接设置一个 view 的顶部距离为 20.0-point 没有任何意义。你必须设置两个 view 之间的相对位置关系，例如，一个 view 距离 superview 顶部下方 20.0-point。当然，直接通过约束设置一个 view 的高度为 20.0 是最佳使用方法。更多信息，请查看 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Interpreting Values&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;代码 3-1 展示了一些常见的方程式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;br&gt;本章节中所展示的方程式全都是伪代码，如果想要看真实的方程式，请查看&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ProgrammaticallyCreatingConstraints.html#//apple_ref/doc/uid/TP40010853-CH16-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过编码创建约束&lt;/a&gt;或者&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/LayoutUsingStackViews.html#//apple_ref/doc/uid/TP40010853-CH3-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto Layout 宝典&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;代码 3-1&lt;/strong&gt; 常见约束方程式示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 通过约束设置 view 的高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.height = 0.0 * NotAnAttribute + 40.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 通过约束设置两个 button 之间距离为固定值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button_2.leading = 1.0 * Button_1.trailing + 8.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 使两个 button 头部对齐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button_1.leading = 1.0 * Button_2.leading + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置两个 button 等宽&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button_1.width = 1.0 * Button_2.width + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置 view 居中与父视图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.centerX = 1.0 * Superview.centerX + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.centerY = 1.0 * Superview.centerY + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置 view 宽高比为 1:2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.height = 2.0 * View.width + 0.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;等于，代表的不是赋值&quot;&gt;&lt;a href=&quot;#等于，代表的不是赋值&quot; class=&quot;headerlink&quot; title=&quot;等于，代表的不是赋值&quot;&gt;&lt;/a&gt;等于，代表的不是赋值&lt;/h3&gt;&lt;p&gt;这里有必要说明一下，上述方程式代表的是左右两边等价，不是赋值。&lt;/p&gt;
&lt;p&gt;当 Auto Layout 处理这些方程式的时候，并不是直接将右边的值赋给左边。而是计算能够是两边关系保持等价的值。这意味着我们可以随意调换等式两边元素的方向。例如，代码 3-2 与之前 3-1 中的一些方程式等价但却反转了方向。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码 3-2&lt;/strong&gt; 变换的方程式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 通过约束设置两个 button 之间距离为固定值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button_1.trailing = 1.0 * Button_2.leading - 8.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 使两个 button 头部对齐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button_2.leading = 1.0 * Button_1.leading + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置两个 button 等宽&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button_2.width = 1.0 * Button.width + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置 view 居中与父视图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Superview.centerX = 1.0 * View.centerX + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Superview.centerY = 1.0 * View.centerY + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置 view 宽高比为 1:2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.width = 0.5 * View.height + 0.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;br&gt;当你进行左右元素转换时，确定你转换了常量和倍率。例如，如果一个常量之前是 8.0，转换完了就是 -8.0；如果之前倍率是 2.0，转换完了就会是 0.5；如果常量为 0.0 或者倍率为 1.0 则保持不变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你大概可以发现，对于解决同一个问题 Auto Layout 提供了多种解决方案。理想情况下，你应该选择一个最优的解决方案。但是，不同的开发者对理想方案的定义不同。所以，不要去争论谁的方案最优，只要统一方案就好。如果你选择一个合适的方案，并且始终遵循这种方案，那么你遇到的问题将会减少很多。例如，这篇指南中遵循了一下原则：&lt;br&gt;1.尽量用整数，少用小数.&lt;br&gt;2.尽量使用正数，少用负数.&lt;br&gt;3.如果可能的话，你需要遵循这个顺序去设置约束：从头到尾，从上到下。&lt;/p&gt;
&lt;h3 id=&quot;创建一个清晰的，满足要求的布局&quot;&gt;&lt;a href=&quot;#创建一个清晰的，满足要求的布局&quot; class=&quot;headerlink&quot; title=&quot;创建一个清晰的，满足要求的布局&quot;&gt;&lt;/a&gt;创建一个清晰的，满足要求的布局&lt;/h3&gt;&lt;p&gt;当你使用 Auto Layout 时，你的目的是通过提供一系列的方程式，并使其只有一个最优解。设置模糊不定的约束，会使其有多组解。设置不满足条件的约束，得不到有效的解。&lt;/p&gt;
&lt;p&gt;通常情况下，需要通过约束将每个 view 的大小和位置都设置好。假设 superview 的大小已经被设置(例如，iOS 系统上一个页面的根视图)，那么一个清晰、满足需求的布局条件是这样的：给每个 view(不算 superview) 在每个维度(水平和竖直维度)各设置两个约束，用来布局 view 的大小和位置。然而，满足需求的方案有很多。例如，下面展示了三种布局方式(只显示了水平方向的约束)，都是比较简洁并满足需求的布局方案:&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/constraint_examples_2x.png&quot; width=&quot;660&quot; height=&quot;280&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;第一个布局方案，通过设置约束，使 view 的左边缘与 superview 的左边缘关联。并且给 view 的宽度设置一个常量值。这样 view 的右边缘位置可以根据 superview 的大小和其他约束条件计算出来.&lt;/li&gt;
&lt;li&gt;第二个布局方案，通过设置约束，使 view 的左边缘与 superview 的左边缘关联，使 view 的右边缘与 superview 的右边缘关联。这样 view 的宽度可以根据 superview 的大小和其他约束条件计算出来.&lt;/li&gt;
&lt;li&gt;第三个布局方案，通过设置约束，使 view 的左边缘与 superview 的左边缘关联，并且使 view 垂直居中于 superview.这样的话，view 的宽度和 右边缘位置可以根据 superview 大小和其他约束计算出来.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可能注意到，上述三种布局方案中，都是一个 view 对应水平方向两条约束。每个方案中，通过约束完全可以确定 view 的宽度和在水平方向的位置。这就说明这三种布局方案均能够确定 view 水平方向的布局。然而，当 superview 的宽度发生改变时，这三种布局方案产生的效果却不尽相同。&lt;/p&gt;
&lt;p&gt;缘距离保持定值。虽然两种方案表现效果相同，但是两个方案并不完全等价。通常情况下，第二种方案更容易让人理解，但是第三种方案更具使用价值，特别是当你想使多个 view 保持居中对齐时。在实际开发过程中，根据具体需求，选择一种最合适的方案。&lt;/p&gt;
&lt;p&gt;现在考虑一些稍微复杂一点的情况。假设现在有两个 view，你想使这两个 view 在同一屏幕上并排在一起，四周之间距保持一定距离，宽度始终保持相等。并且在屏幕旋转时，也保持这样的效果。&lt;/p&gt;
&lt;p&gt;下面的两幅图中，展示了横屏和竖屏两种情况。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Blocks_Portrait_2x.png&quot; width=&quot;240&quot; height=&quot;430&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/Blocks_Landscape_2x.png&quot; width=&quot;430&quot; height=&quot;240&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;所以针对这种效果应该怎样设置约束呢？下图展示了一种简单的布局方案：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/two_view_example_1_2x.png&quot; width=&quot;330&quot; height=&quot;370&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;上述布局方案，使用了如下约束条件:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 竖直方向约束条件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.top = 1.0 * Superview.top + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Superview.bottom = 1.0 * Red.bottom + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blue.top = 1.0 * Superview.top + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Superview.bottom = 1.0 * Blue.bottom + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 水平方向约束条件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.leading = 1.0 * Superview.leading + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blue.leading = 1.0 * Red.trailing + 8.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Superview.trailing = 1.0 * Blue.trailing + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.width = 1.0 * Blue.width + 0.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;遵循之前说的设计原则，这个布局方案中有两个 view，四条水平方向约束，四条竖直方向约束。这并不是最完美的设计方案，他只是一个参考方案。重要的是，这种方案可以快速地确定两个 view 的大小和位置，实现一个符合需求的布局。如果你现在移除所有的约束，不参考这个方案重新进行布局，你可能会遇到各种约束冲突。&lt;/p&gt;
&lt;p&gt;但是，上述只是一个参考方案，并不是唯一的布局方案。例如这里有一种等价效果的布局方案:&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/two_view_example_2_2x.png&quot; width=&quot;330&quot; height=&quot;370&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;这里不再是将蓝 view 的底部和顶部边缘直接与 superview 的底部和顶部边缘进行约束，而是将蓝色 view 的顶部与红色 view 的顶部对齐。类似的，将蓝色视图的底部和红色视图的底部对齐。具体约束如下所示。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 竖直方向约束&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.top = 1.0 * Superview.top + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Superview.bottom = 1.0 * Red.bottom + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.top = 1.0 * Blue.top + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.bottom = 1.0 * Blue.bottom + 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 水平方向约束&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.leading = 1.0 * Superview.leading + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blue.leading = 1.0 * Red.trailing + 8.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Superview.trailing = 1.0 * Blue.trailing + 20.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red.width = 1.0 * Blue.width + 0.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种布局方案依然是有两个 view，通过水平方向四条约束，竖直方向有四条约束。定义了一个满足需求的布局。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;但是哪一个方案更好呢&lt;/strong&gt;&lt;br&gt;这两种方案都能够满足需求。所以那种方案更好一些呢？&lt;/p&gt;
&lt;p&gt;实际上，针对这两种方案不能绝对的说哪一种更好，两种方案都有各自的优势。&lt;/p&gt;
&lt;p&gt;第一种布局方案更适合有其他 view 被移除的情况。如果一次 view 从视图层级中被移除，那么它的相关的约束也会被移除。所以，在第一种方案中，如果你移除红色视图后，蓝色视图还会保留三条约束。这样你只需要再添加一条约束就能够重新布局。在第二种方案中，如果移除了红色视图，那么蓝色视图只剩一条约束。&lt;/p&gt;
&lt;p&gt;另一方面，在第一种布局方案中，如果你想使两个 view 的上下对齐，你需要将每个视图的上下两条约束各自设置相同的常量值。如果你改变了一个的值，你同时必须要修改另一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;不等式约束&quot;&gt;&lt;a href=&quot;#不等式约束&quot; class=&quot;headerlink&quot; title=&quot;不等式约束&quot;&gt;&lt;/a&gt;不等式约束&lt;/h3&gt;&lt;p&gt;到目前为止，所有示例中展示的都是等式约束，这只是约束的一部分。约束也可以通过不等式来表述。具体来说，约束关系可以是等于、大于等于、小于等于。&lt;/p&gt;
&lt;p&gt;例如，你可以通过约束设置一个 view 的 size 的最大值和最小值(代码 3-3)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码 3-3&lt;/strong&gt; 给一个 view 的 size 设置最大值和最小值&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 设置宽度最小值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.width &amp;gt;= 0.0 * NotAnAttribute + 40.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置宽度最大值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.width &amp;lt;= 0.0 * NotAnAttribute + 280.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一但你使用的不等式约束，每个 view 上之前的约束将会失效。任何时候你都可以通过使用两条不等式约束去代替等式约束。在代码 3-4 中，上面一个等式关系和下面的两个不等式关系所布局的效果是等价的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码 3-4&lt;/strong&gt; 使用两个不等式代替一个等式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 一个等式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blue.leading = 1.0 * Red.trailing + 8.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 可以被下面两个不等式代替&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blue.leading &amp;gt;= 1.0 * Red.trailing + 8.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blue.leading &amp;lt;= 1.0 * Red.trailing + 8.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并不是所有的等式与不等式之间都可以这样转换，有时候两个不等关系并不等价于一个相等关系。例如，在&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码 3-3&lt;/a&gt; 中使用两个不等式约束定义了 view 的宽度范围，但是没有具体定义宽度。你如果你想具体定义 view 的位置和大小，仍然需要在这个范围内添加水平方向的约束。&lt;/p&gt;
&lt;h3 id=&quot;约束的属性&quot;&gt;&lt;a href=&quot;#约束的属性&quot; class=&quot;headerlink&quot; title=&quot;约束的属性&quot;&gt;&lt;/a&gt;约束的属性&lt;/h3&gt;&lt;p&gt;一般情况下，每条约束都是必须的。Auto Layout 需要根据所有的约束条件计算出一个合理的结果。如果不能计算出来，那说明这里存在错误。Auto Layout 会将一些有问题的约束信息输出到控制台，然后你可以根据控制台信息将一些有冲突的约束干掉。然后 Auto Layout 会重新计算结果。关于更多消息，请查看 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ConflictingLayouts.html#//apple_ref/doc/uid/TP40010853-CH19-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unsatisfiable Layouts&lt;/a&gt; 章节。&lt;/p&gt;
&lt;p&gt;你也可以创建可选约束。所有的约束都有一个权重值，这个值的范围是 1~1000。如果一条约束的权重为 1000，那么这个约束条件是必须的。&lt;/p&gt;
&lt;p&gt;当计算约束结果时，Auto Layout 会优先满足权重比较高的约束条件。如果一条可选约束条件不能被满足，这条约束将会被跳过，然后继续处理下一条约束。&lt;/p&gt;
&lt;p&gt;尽管一些可选约束条件不能被满足，但是它依然会影响布局。在布局时，如果跳过一些非法约束后，仍然有一些布局不能确定，系统会从跳过的那些约束中，选择一条最接近需求的约束。这些非法约束条件就会被强行加到当前的视图，从而影响布局效果。&lt;/p&gt;
&lt;p&gt;通常可选约束和不等式约束会配合使用。例如，在 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码 3-4&lt;/a&gt; 中你可以将两个不等式约束的权重设置为不同值。关系为“大于等于”的约束条件设置为最高优先级（权重 1000），关系为”小于等于”的约束条件权重设置为低优先级（权重 250）.这意味着蓝色 view 的距离红色 view 不能小于 8.0-point。然而，其他一些约束可能会使这个距离变得更远。所以，通过添加这条可选约束，可以确保蓝色 view 与红色 view 尽可能保持 8.0-point 左右的距离，而不会因为添加其他约束导致距离变得很远。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;br&gt;不要随意将约束的权重设置为 1000。系统默认定义了一个级别的优先级：低优先级（250），中等优先级（500），高优先级（750）和最高优先级（1000）。在为约束设置权重是，你应该围绕着这些值设定，大于或小于 1 或 2。如果你超出这些值很多，你可能需要重新审查一下你的布局逻辑。&lt;/p&gt;
&lt;p&gt;关于在 iOS 系统中预定义的一些约束优先级，请查看 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uilayoutpriority&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UILayoutPriority&lt;/a&gt;。对于 OS X 系统，请查看 Layout Priorities constants.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;固有内容大小&quot;&gt;&lt;a href=&quot;#固有内容大小&quot; class=&quot;headerlink&quot; title=&quot;固有内容大小&quot;&gt;&lt;/a&gt;固有内容大小&lt;/h3&gt;&lt;p&gt;目前为止，所有的样例中都是通过约束来定义 view 的大小和位置。然而，有一些视图会根据内容产生一个固有大小。这就是之前所有的 &lt;strong&gt;&lt;em&gt;固有内容大小&lt;/em&gt;&lt;/strong&gt;。例如，一个 button 的固有内容大小就是他的 title 内容大小加上一些边缘的大小。&lt;/p&gt;
&lt;p&gt;并不是所有的 view 都有其固有内容大小。如果一个 view 有固有内容大小，那么通过固有内容大小就可以定义这个 view 的宽和高。这里有一些示例在 表 3-1 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 3-1&lt;/strong&gt; 控件的固有内容大小情况&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;View&lt;/th&gt;
&lt;th&gt;固有内容大小情况&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;UIView 和 NSView&lt;/td&gt;
&lt;td&gt;没有固有内容大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sliders&lt;/td&gt;
&lt;td&gt;只有固有宽度（iOS 系统）. 根据不同类型，可能有固有宽度，可能有固有高度，或者两者都有（OS X）.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Labels,buttons,switches 和 text fields&lt;/td&gt;
&lt;td&gt;同时包含固有宽和高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text views 和 image views&lt;/td&gt;
&lt;td&gt;固有内容大小为变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;固有大小根据 view 当前展示的内容而定。对于一个 label 或者一个 button，它的固有大小根据控件所展示的文本字数和字体大小而定。对于其他视图，影响控件固有大小的因素会更多。例如，一个空的 image view 没有固有大小。一旦你将一个图片添加到上面，它的固有大小就变成这个图片的大小。&lt;/p&gt;
&lt;p&gt;一个 text view 的固有大小根据这些因素而定：内容多少，是否可以滚动，是否有额外约束添加到视图上。例如，如果 view 可以滚动，那么这个 text view 就没有固有大小。如果不可以滚动，默认情况下内容不换行，然后根据内容的大小计算固有大小。例如，如果一个 text view 没有内容，那么会按照一行为本的形式来计算它的宽和高。如果通过约束条件指定了它的宽度，那么它的固有高度就是展示这么宽的文本所需要的高度。&lt;/p&gt;
&lt;p&gt;Auto Layout 通过在每个维度设置一组约束条件，以此来表现出固有大小。content hugging 这个约束条件，会尽可能压缩视图，使其紧贴内容；compression resistance 这个约束条件，会尽可能向外扩大视图，是内容尽可能不会被裁剪。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/intrinsic_content_size_2x.png&quot; width=&quot;360&quot; height=&quot;120&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;下面代码中，约束条件使用的是代码 3-5 所提及的不等式约束。在这里，&lt;strong&gt;IntrinsicHeight&lt;/strong&gt; 和 &lt;strong&gt;IntrinsicWidth&lt;/strong&gt; 常量代表 view 的固有内容大小得出的高和宽。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码 3-5&lt;/strong&gt; Compression-Resistance 和 Content-Hugging 方程式.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Compression Resistance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.height &amp;gt;= 0.0 * NotAnAttribute + IntrinsicHeight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.width &amp;gt;= 0.0 * NotAnAttribute + IntrinsicWidth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Content Hugging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.height &amp;lt;= 0.0 * NotAnAttribute + IntrinsicHeight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.width &amp;lt;= 0.0 * NotAnAttribute + IntrinsicWidth&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每条约束都有他自己的权重。默认情况下，Content Hugging 的权重为 250，Compression Resistance 的权重为 750。因此，相对于压缩 view，扩大视图的优先级更高。在多数情况下，这样设计是很有必要的。例如，这样设计后，你可以放心的通过约束去改变 buttton 的大小，使其比固有大小还要大。如果你想压缩这个 button，那么他的内容将会被裁剪，这是不被允许的。需要说的是，通过 Interface Builder 可以改变这些权重。关于更多信息，请查看 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithConstraintsinInterfaceBuidler.html#//apple_ref/doc/uid/TP40010853-CH10-SW2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting Content-Hugging and Compression-Resistance Priorities&lt;/a&gt; 相关内容。&lt;/p&gt;
&lt;p&gt;只有可以，尽可能的在布局中利用 view 固有大小这一特性。这样可以让你的 view 随着内容的改变进行动态适配。而且在布局时，可减少约束的数量，避免太多约束冲突。但是你需要记得处理 view 的 content-hugging 和 compression-resistance （CHCR）这两条约束的权重。关于如何处理固有大小，这里提供了一些参考:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你想要通过拉伸视图来填充父视图时，如果每个 view 的 content-hugging 约束的权重相等，那么布局起来会比较混乱。Auto Layout 不知道那个视图需要被拉伸.&lt;br&gt;&lt;br&gt;一个比较常见的例子就是：这里有一个 label 和一个 text field，通常情况下，你想拉伸 text field 使其填满空白区域，而使 label 保持固有大小。那么此时你就需要将 text field 水平方向的 content-hugging 约束权重设置的相对低一些.&lt;br&gt;&lt;br&gt;实际上，在你使用 Interface Bulider 进行布局时，会自动帮你处理这个问题，直接将 Label 的的 content—hugging 的权重设置为 251。如果你想通编码来进行布局，那么需要你手动去改变 content—hugging 的权重.&lt;/li&gt;
&lt;li&gt;如果你强行拉伸了一些有隐藏背景的视图（例如 button 或者 label），使其超过他们个固有大小，会发生一些意想不到的现象。现象可能并不是特别明显，毕竟只是文本出现在错误的位置而已。为了避免这种拉伸，你可以增加 view 的 content-hugging 的权重.&lt;/li&gt;
&lt;li&gt;基线对齐约束只作用于 view 的固有高度上。如果一个 view 在竖直方向拉伸或压缩，那么基线对齐约束将不能再使 view 正确的对齐。&lt;/li&gt;
&lt;li&gt;一些视图，例如 switch 控件，通常以固有大小展示。你可以通过增加他们的 CHCR 的权重，来避免使它们受到压缩和拉伸。&lt;/li&gt;
&lt;li&gt;尽量避免把 view 的 CHCR 的权重设为特定值。通常情况下，展示一个错误的大小比出现约束冲突更好一些。如果一个 view 有必要总以固有大小展示，那么就把他的 CHCR 设置一个非常高（999）的权重。这个方法可以避免使你的 view 被拉伸或者压缩，防止 view 展示的太大或者太小。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;固有内容大小-VS-合适大小&quot;&gt;&lt;a href=&quot;#固有内容大小-VS-合适大小&quot; class=&quot;headerlink&quot; title=&quot;固有内容大小 VS 合适大小&quot;&gt;&lt;/a&gt;固有内容大小 VS 合适大小&lt;/h3&gt;&lt;p&gt;对于 Auto Layout 来说，固有大小作为一个输入值。当 view 有一个固有大小，系统会将将这个固有大小转化为对应的约束条件，和其他约束条件放在一起。然后针对这些条件计算布局结果。&lt;/p&gt;
&lt;p&gt;另一方面，合适大小相对于 Auto Layout 来说是一个输出值。这个大小是通过 view 的所有约束条件计算出来的。当使用 Auto Layout 布局 view 的子视图时，系统会根据子视图内容大小，为 view 计算出一个合适的展示大小。&lt;/p&gt;
&lt;p&gt;Stack view 是一个很好的例子。不添加任何其他约束的情况下，系统会根据 stack view 的内容和属性设置，去计算这个 stack view 的大小。很多时候，stack view 都被视为是有固有大小的 view，在进行布局时，你仅需要在水平方向和竖直方向各添加一条约束来定义它的位置即可，不需要再通过约束去定义它的大小。但是，它的大小是通过 Auto Layout 计算出来的，而不是作位输入值供 Auto Layout 使用。设置 stack view 的 CHCR 的权重不会起任何作用，因为它本质上不是一个具有固有内容大小的 view，只是类似而已。&lt;/p&gt;
&lt;h3 id=&quot;属性解释&quot;&gt;&lt;a href=&quot;#属性解释&quot; class=&quot;headerlink&quot; title=&quot;属性解释&quot;&gt;&lt;/a&gt;属性解释&lt;/h3&gt;&lt;p&gt;Auto Layout 的一些值都以 point 为单位。这些属性的含义，需要根据具体布局方向来确定。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Auto Layout 属性&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_Height_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Height&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_Width_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Width&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;view 的大小&lt;/td&gt;
&lt;td&gt;这些属性可以直接赋予常量值，或者与其他的 Height 和 Width 属性相关联.这些值不能为负数.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_TopToSuper_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Top&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_BottomToSuper_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Bottom&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_AlignMiddle_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; BaseLine&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;当你上下移动 view 时,这些值会发生变化.&lt;/td&gt;
&lt;td&gt;这些属性仅与 Center Y,Top,Bottom,和 BaseLine 这些属性关联.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_LeftToSuper_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Leading&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_RightToSuper_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Trailing&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;这些值会随着你移动 view 远离边缘时而变大.对于从左到右的布局,当你向右移动 view 时值会变大.对于从右到左的布局,当你像左移动 view 时值会变大.&lt;/td&gt;
&lt;td&gt;这些属性仅与 Leading,Trailing,或者 Center X 属性关联.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_LeftToSuper_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Left&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_RightToSuper_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Right&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;当你左右移动 view 时,这些属性的值会变化.&lt;/td&gt;
&lt;td&gt;这些属性仅可以与 Left,Right,和 Center x 关联使用.&lt;br&gt;在开发过程中,尽量使用 Leading 和 Trailing 代替 Left 和 Right.这样布局方向会随着阅读方向改变而适配.默认的阅读方向是根据用户设置的语言而定的.然而,如果有必要,你可以重写这部分.在 iOS 中,你可以通过设置 view 的 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622461-semanticcontentattribute&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semanticContentAttribute&lt;/a&gt; 这一属性来指定当语言方向改变时,是否改变布局方向.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_AlignCenter_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Center X&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/ALGuide_AlignMiddle_2x.png&quot; width=&quot;30&quot; style=&quot;vertical-align:middle;&quot;&gt; Center Y&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;具体含义需要根据约束方程式中其他属性而确定.&lt;/td&gt;
&lt;td&gt;Center x 可以与 Center X,Leading,Trailing,Right,和 Left 属性关联.Center Y 可以与 Center Y,Top,Bottom,和 BaseLine 属性关联.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对视图层级布局，实际上是定义了一系列的线性方程式。每一条约束代表一个方程式。你的目的就是通过声明一些列的方程式，并使其只有一组最优解。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS Auto Layout-不使用约束布局（译）</title>
    <link href="http://yoursite.com/2018/04/07/iOS%20Auto%20Layout-%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%BA%A6%E6%9D%9F%E5%B8%83%E5%B1%80%EF%BC%88%E8%AF%91)/"/>
    <id>http://yoursite.com/2018/04/07/iOS Auto Layout-不使用约束布局（译)/</id>
    <published>2018-04-07T12:01:23.000Z</published>
    <updated>2018-06-03T08:23:50.267Z</updated>
    
    <content type="html">&lt;p&gt;Stack view 提供了一种简单的方式进行自动布局，通过这种方式可以不用设置一些复杂的约束，&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 而达到自动布局的效果。一个 stack view 定义了一行或者一列界面元素。stack view 通过以下这些属性去排版它的每个元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uistackview/1616223-axis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;axis&lt;/a&gt;:(&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uistackview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIStackView&lt;/a&gt; only) 定义 stack view 的排布方向，是垂直排布还是水平排布.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsstackview/1488950-orientation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;orientation&lt;/a&gt;:(&lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsstackview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSStackView&lt;/a&gt; only) 定义 stack view 的排布方向，是垂直排布还是水平排布.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uistackview/1616233-distribution&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;distribution&lt;/a&gt;:定义了 stack view 中的 view 的排布方式.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uistackview/1616243-alignment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alignment&lt;/a&gt;:定义了 stack view 中的 view 的对齐方式.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uistackview/1616225-spacing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spacing&lt;/a&gt;:定义 stack view 中的 view 之间的间隔.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stack view 使用起来很简单，使用 Interface Builder 拖拽一个垂直或水平排布的 stack view 到画布上.然后拖拽一些你要布局的内容到 stack view 中.&lt;/p&gt;
&lt;p&gt;如果某个控件有固有大小，那么拖入 stack 之后它将保持固有大小。如果它没有固有大小，Interface Builder 会提供一个默认大小.你可以通过添加约束去改变它的大小.&lt;/p&gt;
&lt;p&gt;为了更进一步地调整布局，你可以通过属性检查器去改变 stack view 的属性。例如，下面这个例子中通过设置属性，使每个 view 等大小排布，并且每个 view 之间保持 8-point 距离。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/IB_StackView_Simple_2x.png&quot; width=&quot;215&quot; height=&quot;136&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;同时 stack view 也会根据子视图的排版与大小，去布局自身的大小，使自身紧贴子视图。你可以通过 Size 检查器去改变这些。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;br&gt;如果你想更好的进行布局，你可以直接通过添加约束来排版子视图;而且，如果你想避免任何冲突，你首先要遵循这样一个原则：如果一个 view 的默认尺寸为其根据内容计算出的固有大小，你可以放心的在这个尺寸上面添加约束。关于约束冲突更多的信息，请看 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ConflictingLayouts.html#//apple_ref/doc/uid/TP40010853-CH19-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unsatisfiable Layouts&lt;/a&gt; 章节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除此之外，你可以在 stack view 中嵌套新的 stack view 作为子视图，进行一些更复杂的布局。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/IB_StackView_NestedStacks_2x.png&quot; width=&quot;285&quot; height=&quot;232&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;一般情况下，你可以尽可能地通过 stack view 进行布局。除非当单用 stack view 无法满足你的需求时，在使用约束进行布局。&lt;/p&gt;
&lt;p&gt;关于更多使用它 stack view 的信息，请查看 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uistackview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIStackView Class Reference&lt;/a&gt; 或者 &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsstackview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSStackView Class Reference&lt;/a&gt; 章节。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;br&gt;尽管通过使用嵌套 stack view 可以进行复杂的布局，但是你不能完全避免使用约束。至少你需要通过约束去设置最外层 stack view 的位置（可能还有大小）。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Stack view 提供了一种简单的方式进行自动布局，通过这种方式可以不用设置一些复杂的约束，
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS Auto Layout-理解自动布局（译）</title>
    <link href="http://yoursite.com/2018/04/07/iOS%20Auto%20Layout-%E7%90%86%E8%A7%A3%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%EF%BC%88%E8%AF%91)/"/>
    <id>http://yoursite.com/2018/04/07/iOS Auto Layout-理解自动布局（译)/</id>
    <published>2018-04-07T07:03:40.000Z</published>
    <updated>2018-06-03T08:23:41.242Z</updated>
    
    <content type="html">&lt;p&gt;Auto Layout 可以根据加在 view 上的约束条件，动态计算 view 在视图层级中的大小和位置。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;例如，你可以给一个 button 和一个 image view 设置这样的约束条件：button 与 image view 保持水平居中，并且使 button 的顶部距离 image view 的底部始终保持 8-point 的距离。这样如果 image view 的大小或者位置发生改变，通过 Auto Layout 会重新计算 button 的大小与位置，更新 button 的布局。&lt;/p&gt;
&lt;h3 id=&quot;外部变化&quot;&gt;&lt;a href=&quot;#外部变化&quot; class=&quot;headerlink&quot; title=&quot;外部变化&quot;&gt;&lt;/a&gt;外部变化&lt;/h3&gt;&lt;p&gt;父视图的大小或者形状发生改变时，会引起外部变化。这时你需要根据父视图的大小去更新界面布局，以达到最好的适配效果。以下一些操作会引起这种变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户调整 &lt;code&gt;window&lt;/code&gt; 大小 (OS X).&lt;/li&gt;
&lt;li&gt;用户使用 iPad 的分屏功能时 (iOS).&lt;/li&gt;
&lt;li&gt;设备屏幕发生旋转 (iOS).&lt;/li&gt;
&lt;li&gt;呼入来电，音量条的显示与消失 (iOS).&lt;/li&gt;
&lt;li&gt;你想支持不同的屏幕比例，当屏幕等比缩放时会引起外部变化.&lt;/li&gt;
&lt;li&gt;你想支持不同的屏幕尺寸，当应用在不同屏幕大小运行时会引起外部变化.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些操作大部分发生在 APP 运行的时候，因此需要对这些突然的变化做好动态适配。另外，如果你的 APP 进行了屏幕适配，则意味着你的 APP 可以适配各种机型。一个好的屏幕适配方案，可以使你的 APP 在 iPhone 4S，iPhone 6 Plus，甚至 iPad 上做出很好的适配。同时，Auto Layout 也是使 iPad 能够支持多任务和分屏的关键。&lt;/p&gt;
&lt;h3 id=&quot;内部变化&quot;&gt;&lt;a href=&quot;#内部变化&quot; class=&quot;headerlink&quot; title=&quot;内部变化&quot;&gt;&lt;/a&gt;内部变化&lt;/h3&gt;&lt;p&gt;当视图本身尺寸发生变化或者界面上一些控件发生变化时，会引起内部变化。&lt;/p&gt;
&lt;p&gt;一下一些因素会引起内部变化:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APP 展示内容发生改变.&lt;/li&gt;
&lt;li&gt;APP 支持国际化.&lt;/li&gt;
&lt;li&gt;APP 支持动态字体 (iOS).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 APP 展示内容发生变化时，有时需要更新布局来重新排版内容。这种场景一般发生在文本类或者图片类的 APP 中。例如一个新闻类的 APP，需要根据新闻内容去自动调整布局。类似的，一个图片类 APP 需要根据图片比例做好自动适配。&lt;/p&gt;
&lt;p&gt;所谓的国际化过程，就是将 APP 针对不同语言、地区和文化做好适配。对于一个做了国际化处理的 APP，不同的环境下展示内容可能会不同。因此在进行布局适配时，需要将这些因素考虑进去，使 APP 在不同的环境下可以显示正确的内容。&lt;/p&gt;
&lt;p&gt;国际化对布局的影响主要有三个方面。第一，当切换不同的语言时，对应的一些文本框需要的空间不同。例如，想对于英语来说，德语需要更多的空间，而日语需要更少的空间。&lt;/p&gt;
&lt;p&gt;第二，不同的国家与地区，虽然使用语言相同，但是日期格式可能会有些不同。尽管这些改变不是很明显，但是仍需要对此做好动态适配。&lt;/p&gt;
&lt;p&gt;第三，有时候语言的改变，不仅会影响文本的大小，还有可能影响布局方向。例如，使用英语的国家一般是从左到右的布局，而使用阿拉伯语和希伯来语的国家是从右到左的布局。一般来说，交互设计需要根据用户习惯进行合理布局。一个 &lt;code&gt;button&lt;/code&gt; ，在语言为英语时如果放在右下角，那么当语言切换为阿拉伯语它应该放在左下角。&lt;/p&gt;
&lt;p&gt;最后，如果你的 APP 支持动态字体，那就代表用户可以修改 APP 字体大小，这会影响文本的宽和高。如果用户改变了 APP 的字体大小，那么布局必须做出相应的适配。&lt;/p&gt;
&lt;h3 id=&quot;自动布局相对于-Frame-布局&quot;&gt;&lt;a href=&quot;#自动布局相对于-Frame-布局&quot; class=&quot;headerlink&quot; title=&quot;自动布局相对于 Frame 布局&quot;&gt;&lt;/a&gt;自动布局相对于 Frame 布局&lt;/h3&gt;&lt;p&gt;这里有三种主流方式去设计布局。你可以直接通过编码进行布局，也可以使用 autoresizing 布局，或者使用 Auto Layout。&lt;/p&gt;
&lt;p&gt;在过去，APP 通过编码设置 view 的 frame 进行布局。以父视图为基础坐标系，frame 定义了 view 的 origin，height 和 width。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/layout_views_2x.png&quot; width=&quot;270&quot; height=&quot;360&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;在进行布局时，你需要计算每个子 view 的 size 和 position。当有视图位置或大小发生改变时，你需要对受影响的视图重新布局。&lt;/p&gt;
&lt;p&gt;在很多时候，虽然使用 frame 布局可以灵活控制 view 的大小与位置。但是相对的，当视图结构发生改变时，你需要花费大量的精力去重新布局。&lt;/p&gt;
&lt;p&gt;你可以使用 autoresizing mask 布局来减少工作量。使用 autoresizing mask 可以给 view 和其 superview 设置一些简单约束，当 superview 发生改变时，view 可以动态适配这种改变。&lt;/p&gt;
&lt;p&gt;然而，autoresizing mask 只是布局体系中的一个子集。当布局变得复杂时，需要使用代码与 autoresizing mask 配合才能布局。除此之外，autoresizing mask 只能简单适配的外部变化，不能适配内部变化（例如同一层级的其他 view 发生变化时，使用 autoresizing mask 不能做出动态适配）。&lt;/p&gt;
&lt;p&gt;autoresizing mask 只是相对于代码布局简单提升，而 Auto Layout 则是一种全新的布局范式。在使用 Auto Layout 对个 view 布局时，不仅会考虑 view 的 frame，还会考虑与之相关的其他 view 的相互作用。&lt;/p&gt;
&lt;p&gt;Auto Layout 是通过一系列的约束进行页面布局的。使用约束设置两个 view 的关系之后，Auto Layout 可以根据约束动态计算 view 的大小和位置，这使 view 既可以响应外部变化，又可以响应内部变化。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/Art/layout_constraints_2x.png&quot; width=&quot;275&quot; height=&quot;360&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;通过约束对视图进行详细的布局，与以往通过代码处理一些事件相比，在逻辑处理上似乎有很大不同。其实，两者并没有太大的区别。这里有两项基本功要做：首先你要理解约束布局背后的逻辑，其次你要学习如何使用 API。在平时编码过程中，你已经将这些基本功掌握的十分熟练。所以 Auto Loyout 对你来说不再是什么难事。&lt;/p&gt;
&lt;p&gt;通过阅读剩余的一些篇章，你会很轻松的掌握 Auto Layout.&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutWithoutConstraints.html#//apple_ref/doc/uid/TP40010853-CH8-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto Layout Without Constraints&lt;/a&gt; 章节描述的十分抽象，简化了 Auto Layout 布局过程。&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anatomy of a Constraint&lt;/a&gt; 章节讲解了 Auto Layout 背后的原理，如果你想更好的掌握 Auto Layout,你需要自己去了解这些原理。&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithConstraintsinInterfaceBuidler.html#//apple_ref/doc/uid/TP40010853-CH10-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Working with Constraints in Interface Builder&lt;/a&gt; 讲解了一些用来设计 Auto Layout 的工具，而 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/ProgrammaticallyCreatingConstraints.html#//apple_ref/doc/uid/TP40010853-CH16-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Programmatically Creating Constraints&lt;/a&gt; 和 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/LayoutUsingStackViews.html#//apple_ref/doc/uid/TP40010853-CH3-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto Layout Cookbook&lt;/a&gt; 章节详细讲解了的 Auto Layout 的 API。最后，在 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/LayoutUsingStackViews.html#//apple_ref/doc/uid/TP40010853-CH3-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto Layout Cookbook&lt;/a&gt; 这一篇中，提供了许多的基于 Auto Layout 的样例，你可以学习这些样例，将其中的一些技巧运用到你自己的项目中，&lt;a href=&quot;https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/TypesofErrors.html#//apple_ref/doc/uid/TP40010853-CH22-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debugging Auto Layout&lt;/a&gt; 提供了一些常见问题解决方案和调试工具，当布局出现问题时，你可以参考这些方案或者使用这些工具进行修复。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Auto Layout 可以根据加在 view 上的约束条件，动态计算 view 在视图层级中的大小和位置。
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>我所理解的 iOS 并发编程</title>
    <link href="http://yoursite.com/2018/04/06/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%20iOS%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/04/06/我所理解的 iOS 并发编程/</id>
    <published>2018-04-06T15:04:23.000Z</published>
    <updated>2018-05-13T13:39:18.351Z</updated>
    
    <content type="html">&lt;p&gt;无论在哪个平台，并发编程都是一个让人头疼的问题。庆幸的是，相对于服务端，客户端的并发编程简单了许&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;多。这篇文章主要讲述一些基于 iOS 平台的一些并发编程相关东西，我写博客习惯于先介绍原理，后介绍用法，毕竟对于 API 的使用，官网有更好的文档。&lt;/p&gt;
&lt;h3 id=&quot;一些原理性的东西&quot;&gt;&lt;a href=&quot;#一些原理性的东西&quot; class=&quot;headerlink&quot; title=&quot;一些原理性的东西&quot;&gt;&lt;/a&gt;一些原理性的东西&lt;/h3&gt;&lt;p&gt;为了便于理解，这里先解释一些相关概念。如果你对这些概念已经很熟悉，可以直接跳过。&lt;/p&gt;
&lt;h4 id=&quot;1-进程&quot;&gt;&lt;a href=&quot;#1-进程&quot; class=&quot;headerlink&quot; title=&quot;1.进程&quot;&gt;&lt;/a&gt;1.进程&lt;/h4&gt;&lt;p&gt;从操作系统定义上来说，进程就是系统进行资源分配和调度的基本单位，系统创建一个线程后，会为其分配对应的资源。在 iOS 系统中，进程可以理解为就是一个 App。iOS 并没有提供可以创建进程的 API，即使你调用 &lt;code&gt;fork()&lt;/code&gt; 函数，也不能创建新的进程。所以，&lt;strong&gt;本文所说的并发编程，都是针对线程来说的&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;2-线程&quot;&gt;&lt;a href=&quot;#2-线程&quot; class=&quot;headerlink&quot; title=&quot;2.线程&quot;&gt;&lt;/a&gt;2.线程&lt;/h4&gt;&lt;p&gt;线程是程序执行流的最小单元。一般情况下，一个进程会有多个线程，或者至少有一个线程。一个线程有创建、就绪、运行、阻塞和死亡五种状态。线程可以共享进程的资源，所有的问题也是因为共享资源引起的。&lt;/p&gt;
&lt;h4 id=&quot;3-并发&quot;&gt;&lt;a href=&quot;#3-并发&quot; class=&quot;headerlink&quot; title=&quot;3.并发&quot;&gt;&lt;/a&gt;3.并发&lt;/h4&gt;&lt;p&gt;操作系统引入线程的概念，是为了使过个 CPU 更好的协调运行，充分发挥他们的并行处理能力。例如在 iOS 系统中，你可以在主线程中进行 UI 操作，然后另启一些线程来处理与 UI 操作无关的事情，两件事情并行处理，速度比较快。这就是并发的大致概念。&lt;/p&gt;
&lt;h4 id=&quot;4-时间片&quot;&gt;&lt;a href=&quot;#4-时间片&quot; class=&quot;headerlink&quot; title=&quot;4.时间片&quot;&gt;&lt;/a&gt;4.时间片&lt;/h4&gt;&lt;p&gt;按照 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E7%89%87&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki&lt;/a&gt; 上面解释：是分时操作系统分配给每个正在运行的进程微观上的一段CPU时间（在抢占内核中是：从进程开始运行直到被抢占的时间）。线程可以被认为是 ”微进程“，因此这个概念也可以用到线程方面。&lt;/p&gt;
&lt;p&gt;一般操作系统使用时间片轮转算法进行调度，即每次调度时，总是选择就绪队列的队首进程，让其在CPU上运行一个系统预先设置好的时间片。一个时间片内没有完成运行的进程，返回到绪队列末尾重新排队，等待下一次调度。不同的操作系统，时间片的范围不一致，一般都是毫秒（ms）级别。&lt;/p&gt;
&lt;h4 id=&quot;4-死锁&quot;&gt;&lt;a href=&quot;#4-死锁&quot; class=&quot;headerlink&quot; title=&quot;4.死锁&quot;&gt;&lt;/a&gt;4.死锁&lt;/h4&gt;&lt;p&gt;死锁是由于多个线程（进程）在执行过程中，因为争夺资源而造成的互相等待现象，你可以理解为卡主了。产生死锁的必要条件有四个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件 ： 指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。&lt;/li&gt;
&lt;li&gt;请求和保持条件 ： 指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。&lt;/li&gt;
&lt;li&gt;不可剥夺条件 ： 指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。&lt;/li&gt;
&lt;li&gt;环路等待条件 ： 指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了便于理解，这里举一个例子：一座桥，同一时间只允许一辆车经过（&lt;strong&gt;互斥&lt;/strong&gt;）。两辆车 A,B 从桥的两端开上桥，走到桥的中间。此时 A 车不肯退（&lt;strong&gt;不可剥夺&lt;/strong&gt;），又想占用 B 车所占据的道路；B 车此时也不肯退，又想占用 A 车所占据的道路（&lt;strong&gt;请求和保持&lt;/strong&gt;）。此时，A 等待 B 占用的资源，B 等待 A 占用的资源（&lt;strong&gt;环路等待&lt;/strong&gt;），两车僵持下去，就形成了&lt;strong&gt;死锁现象&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;5-线程安全&quot;&gt;&lt;a href=&quot;#5-线程安全&quot; class=&quot;headerlink&quot; title=&quot;5.线程安全&quot;&gt;&lt;/a&gt;5.线程安全&lt;/h4&gt;&lt;p&gt;当多个线程同时访问一块共享资源（例如数据库），因为时序性问题，会导致数据错乱，这就是&lt;strong&gt;线程不安全&lt;/strong&gt;。例如数据库中某个整形字段的 value 为 0，此时两个线程同时对其进行写入操作，线程 A 拿到原值为 0，加一后变为 1；线程 B 并不是在 A 加完后拿的，而是和 A 同时拿的，加完后也是 1，加了两次，理想值应该为 2，但是数据库中最终值却是 1。实际开发场景可能要比这个复杂的多。&lt;/p&gt;
&lt;p&gt;所谓的线程安全，可以理解为在多个线程操作（例如读写操作）这部分数据时，不会出现问题。&lt;/p&gt;
&lt;h3 id=&quot;Lock&quot;&gt;&lt;a href=&quot;#Lock&quot; class=&quot;headerlink&quot; title=&quot;Lock&quot;&gt;&lt;/a&gt;Lock&lt;/h3&gt;&lt;p&gt;因为线程共享进程资源，在并发情况下，就会出现线程安全问题。为了解决此问题，就出现了锁这个概念。在多线程环境下，当你访问一些共享数据时，拿到访问权限，给数据加锁，在这期间其他线程不可访问，直到你操作完之后进行解锁，其他线程才可以对其进行操作。&lt;/p&gt;
&lt;p&gt;iOS 提供了多种锁，ibireme 大神的 &lt;a href=&quot;https://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt; 对这些锁进行了性能分析，我这里直接把图 cp 过来了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/lock_benchmark.png&quot; alt=&quot;lock_benchmark&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面针对这些锁，逐一分析。&lt;/p&gt;
&lt;h4 id=&quot;1-OSSpinLock&quot;&gt;&lt;a href=&quot;#1-OSSpinLock&quot; class=&quot;headerlink&quot; title=&quot;1.OSSpinLock&quot;&gt;&lt;/a&gt;1.OSSpinLock&lt;/h4&gt;&lt;p&gt;ibireme 大神的文章也说了，虽然这个锁性能最高，但是已经不安全了，建议不再使用，这里简单说一下。&lt;/p&gt;
&lt;p&gt;OSSpinLock 是一种自旋锁，主要提供了加锁（&lt;code&gt;OSSpinLockLock&lt;/code&gt;）、尝试枷锁（&lt;code&gt;OSSpinLockTry&lt;/code&gt;）和解锁（&lt;code&gt;OSSpinLockUnlock&lt;/code&gt;）三个方法。对一块资源进行加锁时，如果尝试加锁失败，不会进入睡眠状态，而是一直进行询问（自旋），占用 CPU资源，不适用于较长时间的任务。在自旋期间，因为占用 CPU 导致低优先级线程拿不到 CUP 资源，无法完成任务并释放锁，从而形成了&lt;strong&gt;优先级反转&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;so，虽然性能很高，但是不要用了。而且 Apple 也已经将这个类比较为 deprecate 了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自旋锁 &amp;amp; 互斥锁&lt;br&gt;两者大体类似，区别在于：自旋锁属于 busy-waiting 类型锁，尝试加锁失败，会一直处于询问状态，占用 CPU 资源，效率高；互斥锁属于 sleep-waiting 类型锁，在尝试失败之后，会被阻塞，然后进行上下文切换置于等待队列，因为有上下文切换，效率较低。&lt;br&gt;在 iOS 中 NSLock 属于互斥锁。&lt;/p&gt;
&lt;p&gt;优先级反转 ：当一个高优先级任务访问共享资源时，该资源已经被一个低优先级任务抢占，阻塞了高优先级任务；同时，该低优先级任务被一个次高优先级的任务所抢先，从而无法及时地释放该临界资源。最终使得任务优先级被倒置，发生阻塞。（引用自 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BC%98%E5%85%88%E8%BD%AC%E7%BD%AE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于自旋锁的原理，bestswifter 的文章 &lt;a href=&quot;https://bestswifter.com/ios-lock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 iOS 开发中的锁&lt;/a&gt; 这篇文章讲得很好，我这里大部分锁的知识引用于此，建议读一下原文。&lt;/p&gt;
&lt;p&gt;自旋锁是加不上就一直尝试，也就是一个循环，直到尝试加上锁，伪代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; lock = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 一开始没有锁上，任何线程都可以申请锁  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(test_and_set(&amp;amp;lock); &lt;span class=&quot;comment&quot;&gt;// test_and_set 是一个原子操作,尝试加锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Critical section  &lt;span class=&quot;comment&quot;&gt;// 临界区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lock = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 相当于释放锁，这样别的线程可以进入临界区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Reminder section &lt;span class=&quot;comment&quot;&gt;// 不需要锁保护的代码        &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 ：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OSSpinLock spinLock = OS_SPINLOCK_INIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSSpinLockLock(&amp;amp;spinLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 被锁住的资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSSpinLockUnlock(&amp;amp;spinLock);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-dispatch-semaphore&quot;&gt;&lt;a href=&quot;#2-dispatch-semaphore&quot; class=&quot;headerlink&quot; title=&quot;2.dispatch_semaphore&quot;&gt;&lt;/a&gt;2.dispatch_semaphore&lt;/h4&gt;&lt;p&gt;dispatch_semaphore 并不属于锁，而是信号量。两者的区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁是用于线程互斥操作，一个线程锁住了某个资源，其他线程都无法访问，直到整个线程解锁；信号量用于线程同步，一个线程完成了某个动作通过信号量告诉别的线程，别的线程再进行操作。&lt;/li&gt;
&lt;li&gt;锁的作用域是线程之间；信号量的作用域是线程和进程之间。&lt;/li&gt;
&lt;li&gt;信号量有时候可以充当锁的作用，初次之前还有其他作用。&lt;/li&gt;
&lt;li&gt;如果转化为数值，锁可以认为只有 0 和 1；信号量可以大于零和小于零，有多个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dispatch_semaphore 使用分为三步：create、wait 和 signal。如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// create&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_semaphore_t semaphore = dispatch_semaphore_create(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// thread A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// execute task A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;task A&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_semaphore_signal(semaphore);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// thread B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// execute task B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;task B&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_semaphore_signal(semaphore);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;09.068586&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt; ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;44084&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1384262&lt;/span&gt;] task A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-03&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19.072951&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt; ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;44084&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1384265&lt;/span&gt;] task B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;thread A，B 是两个异步线程，一般情况下，各自执行自己的事件，互不干涉。但是根据 console 输出，B 是在 A 执行完了 10s 执行之后才执行的，显然受到阻塞。使用 dispatch_semaphore 大致执行过程这样：创建 semaphore 时，信号量值为 1；执行到线程 A 的 &lt;code&gt;dispatch_semaphore_wait&lt;/code&gt; 时，信号量值减 1，变为 0；然后执行任务 A，执行完毕后 &lt;code&gt;sleep&lt;/code&gt; 方法阻塞当前线程 10s；与此同时，线程 B 执行到了 &lt;code&gt;dispatch_semaphore_wait&lt;/code&gt;，由于信号量此时为 0，且线程 A 中设置的为 &lt;code&gt;DISPATCH_TIME_FOREVER&lt;/code&gt;，因此需要等到线程 A sleep 10s 之后，执行 &lt;code&gt;dispatch_semaphore_signal&lt;/code&gt; 将信号量置为 1，线程 B 的任务才开始执行。&lt;/p&gt;
&lt;p&gt;根据上面的描述，dispatch_semaphore 的原理大致也就了解了。&lt;a href=&quot;https://opensource.apple.com/tarballs/libdispatch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GCD 源码&lt;/a&gt; 对这些方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_semaphore_wait&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_semaphore_t dsema, dispatch_time_t timeout)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; value = dispatch_atomic_dec2o(dsema, dsema_value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_atomic_acquire_barrier();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fastpath(value &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_semaphore_wait_slow(dsema, timeout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_semaphore_wait_slow(&lt;span class=&quot;keyword&quot;&gt;dispatch_semaphore_t&lt;/span&gt; dsema,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;dispatch_time_t&lt;/span&gt; timeout)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; orig;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;again:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Mach semaphores appear to sometimes spuriously wake up. Therefore,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// we keep a parallel count of the number of times a Mach semaphore is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// signaled (6880961).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((orig = dsema-&amp;gt;dsema_sent_ksignals)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dispatch_atomic_cmpxchg2o(dsema, dsema_sent_ksignals, orig,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				orig - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timespec _timeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (timeout) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; nsec = _dispatch_timeout(timeout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_timeout.tv_sec = (typeof(_timeout.tv_sec))(nsec / NSEC_PER_SEC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_timeout.tv_nsec = (typeof(_timeout.tv_nsec))(nsec % NSEC_PER_SEC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ret = slowpath(sem_timedwait(&amp;amp;dsema-&amp;gt;dsema_sem, &amp;amp;_timeout));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ret == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno == EINTR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno != ETIMEDOUT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_SEMAPHORE_VERIFY_RET(ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Fall through and try to undo what the fast path did to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// dsema-&amp;gt;dsema_value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; DISPATCH_TIME_NOW:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((orig = dsema-&amp;gt;dsema_value) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dispatch_atomic_cmpxchg2o(dsema, dsema_value, orig, orig + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				errno = ETIMEDOUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Another thread called semaphore_signal().&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Fall through and drain the wakeup.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; DISPATCH_TIME_FOREVER:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ret = sem_wait(&amp;amp;dsema-&amp;gt;dsema_sem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ret != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DISPATCH_SEMAPHORE_VERIFY_RET(ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; again;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上时对 wait 方法的定义，如果你不想看代码，可以直接听我说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;dispatch_semaphore_wait&lt;/code&gt; 方法时，如果信号量大于 0，直接返回；否则进入后续步骤。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_dispatch_semaphore_wait_slow&lt;/code&gt; 方法根据传入 &lt;code&gt;timeout&lt;/code&gt; 参数不同，使用 switch-case 处理。&lt;/li&gt;
&lt;li&gt;如果传入的是 DISPATCH_TIME_NOW 参数，将信号量加 1 并立即返回。&lt;/li&gt;
&lt;li&gt;如果传入的是一个超时时间，调用系统的 &lt;code&gt;semaphore_timedwait&lt;/code&gt; 方法进行等待，直至超时。&lt;/li&gt;
&lt;li&gt;如果传入的是 DISPATCH_TIME_FOREVER 参数，调用系统的 &lt;code&gt;semaphore_wait&lt;/code&gt; 进行等待，直到收到 &lt;code&gt;singal&lt;/code&gt; 信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于 &lt;code&gt;dispatch_semaphore_signal&lt;/code&gt; 就比较简单了，源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_semaphore_signal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_semaphore_t dsema)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_atomic_release_barrier();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; value = dispatch_atomic_inc2o(dsema, dsema_value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fastpath(value &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (slowpath(value == LONG_MIN)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DISPATCH_CLIENT_CRASH(&lt;span class=&quot;string&quot;&gt;&quot;Unbalanced call to dispatch_semaphore_signal()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_semaphore_signal_slow(dsema);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;现将信号量加 1，大于 0 直接返回。&lt;/li&gt;
&lt;li&gt;小于 0 返回 &lt;code&gt;_dispatch_semaphore_signal_slow&lt;/code&gt;，这个方法的作用是调用内核的 semaphore_signal 函数唤醒信号量，然后返回 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-pthread-mutex&quot;&gt;&lt;a href=&quot;#3-pthread-mutex&quot; class=&quot;headerlink&quot; title=&quot;3.pthread_mutex&quot;&gt;&lt;/a&gt;3.pthread_mutex&lt;/h4&gt;&lt;p&gt;Pthreads 是 POSIX Threads 的缩写。&lt;code&gt;pthread_mutex&lt;/code&gt; 属于互斥锁，即尝试加锁失败后悔阻塞线程并睡眠，会进行上下文切换。锁的类型主要有三种：&lt;code&gt;PTHREAD_MUTEX_NORMAL&lt;/code&gt;、&lt;code&gt;PTHREAD_MUTEX_ERRORCHECK&lt;/code&gt;、&lt;code&gt;PTHREAD_MUTEX_RECURSIVE&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PTHREAD_MUTEX_NORMAL，普通锁，当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁。这种锁策略保证了资源分配的公平性。&lt;/li&gt;
&lt;li&gt;PTHREAD_MUTEX_ERRORCHECK，检错锁，如果同一个线程请求同一个锁，则返回 EDEADLK。否则和 PTHREAD_MUTEX_NORMAL 相同。&lt;/li&gt;
&lt;li&gt;PTHREAD_MUTEX_RECURSIVE，递归锁，允许一个线程进行递归申请锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;   &lt;span class=&quot;comment&quot;&gt;// 定义锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_mutexattr_t&lt;/span&gt; attr; &lt;span class=&quot;comment&quot;&gt;// 定义 mutexattr_t 变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutexattr_init(&amp;amp;attr); &lt;span class=&quot;comment&quot;&gt;// 初始化attr为默认属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutexattr_settype(&amp;amp;attr, PTHREAD_MUTEX_NORMAL);  &lt;span class=&quot;comment&quot;&gt;// 设置锁的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_init(&amp;amp;mutex, &amp;amp;attr); &lt;span class=&quot;comment&quot;&gt;// 创建锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_lock(&amp;amp;mutex); &lt;span class=&quot;comment&quot;&gt;// 申请锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 临界区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_unlock(&amp;amp;mutex); &lt;span class=&quot;comment&quot;&gt;// 释放锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-NSLock&quot;&gt;&lt;a href=&quot;#4-NSLock&quot; class=&quot;headerlink&quot; title=&quot;4.NSLock&quot;&gt;&lt;/a&gt;4.NSLock&lt;/h4&gt;&lt;p&gt;NSLock 属于互斥锁，是 Objective-C 封装的一个对象。虽然我们不知道 Objective-C 是如何实现的，但是我们可以在 &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSLock.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift 源码&lt;/a&gt; 中找到他的实现 ：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mutex = _PthreadMutexPointer.allocate(capacity: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_lock(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pthread_mutex_unlock(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; os(macOS) || os(iOS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Wakeup any threads waiting in lock(before:)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pthread_mutex_lock(timeoutMutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pthread_cond_broadcast(timeoutCond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pthread_mutex_unlock(timeoutMutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出他只是将 &lt;code&gt;pthread_mutex&lt;/code&gt; 封装了一下。只因为比 &lt;code&gt;pthread_mutex&lt;/code&gt; 慢一些，难道是因为方法层级之间的调用，多了几次压栈操作？？？&lt;/p&gt;
&lt;p&gt;常规使用：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; *mutexLock = [&lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mutexLock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 临界区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[muteLock unlock];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-NSCondition-amp-NSConditionLock&quot;&gt;&lt;a href=&quot;#4-NSCondition-amp-NSConditionLock&quot; class=&quot;headerlink&quot; title=&quot;4.NSCondition &amp;amp; NSConditionLock&quot;&gt;&lt;/a&gt;4.NSCondition &amp;amp; NSConditionLock&lt;/h4&gt;&lt;p&gt;NSCondition 可以同时起到 lock 和条件变量的作用。同样你可以在 &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSLock.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift 源码&lt;/a&gt; 中找到他的实现 ：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSCondition&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSLocking&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mutex = _PthreadMutexPointer.allocate(capacity: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cond = _PthreadCondPointer.allocate(capacity: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_init(mutex, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_cond_init(cond, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;deinit&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_destroy(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_cond_destroy(cond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mutex.deinitialize(&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cond.deinitialize(&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mutex.deallocate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cond.deallocate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_lock(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_unlock(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_cond_wait(cond, mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(until limit: Date)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timeout = timeSpecFrom(date: limit) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pthread_cond_timedwait(cond, mutex, &amp;amp;timeout) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_cond_signal(cond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_cond_broadcast(cond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出，它还是遵循 NSLocking 协议，lock 方法同样还是使用的 &lt;code&gt;pthread_mutex&lt;/code&gt;，wait 和 signal 使用的是 &lt;code&gt;pthread_cond_wait&lt;/code&gt; 和 &lt;code&gt;pthread_cond_signal&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 NSCondition 是，先对要操作的临界区加锁，然后因为条件不满足，使用 wait 方法阻塞线程；待条件满足之后，使用 signal 方法进行通知。下面是一个 生产者-消费者的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSCondition&lt;/span&gt; *condition = [&lt;span class=&quot;built_in&quot;&gt;NSCondition&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *products = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// consume&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condition lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (products.count == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [condition wait];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [products removeObjectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condition unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// product&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condition lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [products addObject:[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; new]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condition signal];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condition unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;NSConditionLock 是通过使用 NSCondition 来实现的，遵循 NSLocking 协议，然后这是 &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSLock.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift 源码&lt;/a&gt; (源码比较占篇幅，我这里简化一下)：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSConditionLock&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSLocking&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _cond = &lt;span class=&quot;type&quot;&gt;NSCondition&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(whenCondition condition: Int)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; = lock(whenCondition: condition, before: &lt;span class=&quot;type&quot;&gt;Date&lt;/span&gt;.distantFuture)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; `&lt;span class=&quot;title&quot;&gt;try&lt;/span&gt;`&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lock(before: &lt;span class=&quot;type&quot;&gt;Date&lt;/span&gt;.distantPast)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tryLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(whenCondition condition: Int)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lock(whenCondition: condition, before: &lt;span class=&quot;type&quot;&gt;Date&lt;/span&gt;.distantPast)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(withCondition condition: Int)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cond.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _thread = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _value = condition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cond.broadcast()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cond.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(before limit: Date)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cond.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; _thread != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !_cond.wait(until: limit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _cond.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _thread = pthread_self()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cond.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(whenCondition condition: Int, before limit: Date)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cond.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; _thread != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; || _value != condition &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !_cond.wait(until: limit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _cond.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _thread = pthread_self()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cond.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出它使用了一个 NSCondition 全局变量来实现 lock 和 unlock 方法，都是一些简单的代码逻辑，就不详细说了。&lt;/p&gt;
&lt;p&gt;使用 NSConditionLock 注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化 NSConditionLock 会设置一个 condition，只有满足这个 condition 才能加锁。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-[unlockWithCondition:]&lt;/code&gt; &lt;strong&gt;并不是满足条件时解锁，而是解锁后，修改 condition 值&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;, CTLockCondition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CTLockConditionNone = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CTLockConditionPlay,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CTLockConditionShow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)testConditionLock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSConditionLock&lt;/span&gt; *conditionLock = [[&lt;span class=&quot;built_in&quot;&gt;NSConditionLock&lt;/span&gt; alloc] initWithCondition:CTLockConditionPlay];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// thread one&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [conditionLock lockWhenCondition:CTLockConditionNone];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread one&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [conditionLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// thread two&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([conditionLock tryLockWhenCondition:CTLockConditionPlay]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread two&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [conditionLock unlockWithCondition:CTLockConditionShow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread two unlocked&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread two try lock failed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// thread three&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([conditionLock tryLockWhenCondition:CTLockConditionPlay]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread three&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [conditionLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread three locked success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread three try lock failed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// thread four&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([conditionLock tryLockWhenCondition:CTLockConditionShow]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread four&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [conditionLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread four unlocked success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;thread four try lock failed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后看输出结果 ：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33.801855&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt; ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;97128&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3100768&lt;/span&gt;] thread two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33.802312&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt; ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;97128&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3100768&lt;/span&gt;] thread two unlocked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34.804384&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt; ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;97128&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3100776&lt;/span&gt;] thread three try lock failed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35.806634&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt; ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;97128&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3100778&lt;/span&gt;] thread four&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-05&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35.806883&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0800&lt;/span&gt; ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;97128&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3100778&lt;/span&gt;] thread four unlocked success&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出，thread one 因为条件和初始化不符，加锁失败，未输出 log; thread two 条件相符，解锁成功，并修改加锁条件；thread three 使用原来的加锁条件，显然无法加锁，尝试加锁失败; thread four 使用修改后的条件，加锁成功。&lt;/p&gt;
&lt;h4 id=&quot;5-NSRecursiveLock&quot;&gt;&lt;a href=&quot;#5-NSRecursiveLock&quot; class=&quot;headerlink&quot; title=&quot;5. NSRecursiveLock&quot;&gt;&lt;/a&gt;5. NSRecursiveLock&lt;/h4&gt;&lt;p&gt;NSRecursiveLock 属于递归锁。然后这是 &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/NSLock.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift 源码&lt;/a&gt;，只贴一下关键部分：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open class NSRecursiveLock: NSObject, NSLocking &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public override init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.init()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if CYGWIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var attrib : pthread_mutexattr_t? = nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var attrib = pthread_mutexattr_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        withUnsafeMutablePointer(to: &amp;amp;attrib) &amp;#123; attrs in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pthread_mutexattr_settype(attrs, Int32(PTHREAD_MUTEX_RECURSIVE))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pthread_mutex_init(mutex, attrs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它是使用 &lt;code&gt;PTHREAD_MUTEX_RECURSIVE&lt;/code&gt; 类型的 &lt;code&gt;pthread_mutex_t&lt;/code&gt; 初始化的。递归所可以在一个线程中重复调用，然后底层会记录加锁和解锁次数，当二者次数相同时，才能正确解锁，释放这块临界区。&lt;/p&gt;
&lt;p&gt;使用例子：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)testRecursiveLock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSRecursiveLock&lt;/span&gt; *recursiveLock = [&lt;span class=&quot;built_in&quot;&gt;NSRecursiveLock&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (^__block fibBlock)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [recursiveLock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [recursiveLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || num == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [recursiveLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; newValue = fibBlock(num - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + fibBlock(num - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [recursiveLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = fibBlock(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;value is %d&quot;&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;6-synchronized&quot;&gt;&lt;a href=&quot;#6-synchronized&quot; class=&quot;headerlink&quot; title=&quot;6. @synchronized&quot;&gt;&lt;/a&gt;6. @synchronized&lt;/h4&gt;&lt;p&gt;@synchronized 是牺牲性能来换取语法上的简洁。如果你想深入了解，建议你去读 &lt;a href=&quot;http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。这里说一下他的大概原理：&lt;/p&gt;
&lt;p&gt;@synchronized 的加锁过程，大概是这个样子：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_enter(obj); &lt;span class=&quot;comment&quot;&gt;// lock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 临界区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;@finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_exit(obj);    &lt;span class=&quot;comment&quot;&gt;// unlock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;@synchronized 的存储结构，是使用哈希表来实现的。当你传入一个对象后，会为这个对象分配一个锁。锁和对象打包成一个对象，然后和一个锁在进行二次打包成一个对象，可以理解为 value；通过一个算法，根据对象的地址得到一个值，作为 key。然后以 key-value 的形式写入哈希表。结构大概是这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/synchronized结构.png&quot; alt=&quot;synchronized结构&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;存储的时候，是以哈希表结构存储，不是我上面画的顺序存储，上面只是一个节点而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@synchronized 的使用就很简单了 ：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *elementArray = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synchronized&lt;/span&gt;(elementArray) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [elementArray addObject:[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; new]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Pthreads&quot;&gt;&lt;a href=&quot;#Pthreads&quot; class=&quot;headerlink&quot; title=&quot;Pthreads&quot;&gt;&lt;/a&gt;Pthreads&lt;/h3&gt;&lt;p&gt;前面也说了，pthreads 是 POSIX Threads 的缩写。这个东西一般我们用不到，这里简单介绍一下。Pthreads 是POSIX的线程标准，定义了创建和操纵线程的一套API。实现POSIX 线程标准的库常被称作Pthreads，一般用于Unix-like POSIX 系统，如Linux、 Solaris。&lt;/p&gt;
&lt;h3 id=&quot;NSThread&quot;&gt;&lt;a href=&quot;#NSThread&quot; class=&quot;headerlink&quot; title=&quot;NSThread&quot;&gt;&lt;/a&gt;NSThread&lt;/h3&gt;&lt;p&gt;&lt;code&gt;NSThread&lt;/code&gt; 是对内核 mach kernel 中的 mach thread 的封装，一个 &lt;code&gt;NSThread&lt;/code&gt; 对象就是一个线程。使用频率比较低，除了 API 的使用，没什么可讲的。如果你已经熟悉这些 API，可以跳过这一节了。&lt;/p&gt;
&lt;h4 id=&quot;1-初始化线程执行一个-task&quot;&gt;&lt;a href=&quot;#1-初始化线程执行一个-task&quot; class=&quot;headerlink&quot; title=&quot;1.初始化线程执行一个 task&quot;&gt;&lt;/a&gt;1.初始化线程执行一个 task&lt;/h4&gt;&lt;p&gt;使用初始化方法初始化一个 &lt;code&gt;NSTherad&lt;/code&gt; 对象，调用 &lt;code&gt;-[cancel]&lt;/code&gt;、&lt;code&gt;-[start&lt;/code&gt;、&lt;code&gt;-[main]&lt;/code&gt; 方法对线程进行操作，一般线程执行完即销毁，或者因为某种异常退出。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 使用 target 对象的中的方法作为执行主体，可以通过 argument 传递一些参数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithTarget:(id)target selector:(SEL)selector object:(nullable id)argument;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/** 使用 block 对象作为执行主体 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithBlock:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;))block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 类方法，上面对象方法需要调用 -[start] 方法启动线程，下面两个方法不需要手动启动 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)detachNewThreadWithBlock:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;))block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)detachNewThreadSelector:(SEL)selector toTarget:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)target withObject:(nullable &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)argument;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-在主线程执行一个-task&quot;&gt;&lt;a href=&quot;#2-在主线程执行一个-task&quot; class=&quot;headerlink&quot; title=&quot;2.在主线程执行一个 task&quot;&gt;&lt;/a&gt;2.在主线程执行一个 task&lt;/h4&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 说一下最后一个参数，这里你至少指定一个 mode 执行 selector，如果你传 nil 或者空数组，selector 不会执行，虽然方法定义写了 nullable */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)arg waitUntilDone:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)wait modes:(nullable &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; *)array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)arg waitUntilDone:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)wait;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-在其他线程执行一个-task&quot;&gt;&lt;a href=&quot;#3-在其他线程执行一个-task&quot; class=&quot;headerlink&quot; title=&quot;3.在其他线程执行一个 task&quot;&gt;&lt;/a&gt;3.在其他线程执行一个 task&lt;/h4&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** modes 参数同上一个 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)performSelector:(SEL)aSelector onThread:(&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; *)thr withObject:(nullable &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)arg waitUntilDone:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)wait modes:(nullable &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; *)array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)performSelector:(SEL)aSelector onThread:(&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; *)thr withObject:(nullable &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)arg waitUntilDone:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)wait&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-在后台线程执行一个-task&quot;&gt;&lt;a href=&quot;#4-在后台线程执行一个-task&quot; class=&quot;headerlink&quot; title=&quot;4.在后台线程执行一个 task&quot;&gt;&lt;/a&gt;4.在后台线程执行一个 task&lt;/h4&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)performSelectorInBackground:(SEL)aSelector withObject:(nullable &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)arg;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;5-获取当前线程&quot;&gt;&lt;a href=&quot;#5-获取当前线程&quot; class=&quot;headerlink&quot; title=&quot;5.获取当前线程&quot;&gt;&lt;/a&gt;5.获取当前线程&lt;/h4&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (class, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; *currentThread;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;使用线程相关方法时，记得设置好 name，方便后面调试。同时也设置好优先级等其他参数。&lt;/p&gt;
&lt;p&gt;performSelector: 系列方法已经不太安全，慎用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Grand-Central-Dispatch-GCD&quot;&gt;&lt;a href=&quot;#Grand-Central-Dispatch-GCD&quot; class=&quot;headerlink&quot; title=&quot;Grand Central Dispatch (GCD)&quot;&gt;&lt;/a&gt;Grand Central Dispatch (GCD)&lt;/h3&gt;&lt;p&gt;GCD 是基于 C 实现的一套 API，而且是开源的，如果有兴趣，可以在 &lt;a href=&quot;https://opensource.apple.com/tarballs/libdispatch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; down 一份源码研究一下。GCD 是由系统帮我们处理多线程调度，很是方便，也是使用频率最高的。这一章节主要讲解一下 GCD 的原理和使用。&lt;/p&gt;
&lt;p&gt;在讲解之前，我们先有个概览，看一下 GCD 为我们提供了那些东西：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/GCD总体结构.png&quot; alt=&quot;GCD总体结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;系统所提供的 API，完全可以满足我们日常开发需求了。下面就根据这些模块分别讲解一下。&lt;/p&gt;
&lt;h4 id=&quot;1-Dispatch-Queue&quot;&gt;&lt;a href=&quot;#1-Dispatch-Queue&quot; class=&quot;headerlink&quot; title=&quot;1. Dispatch Queue&quot;&gt;&lt;/a&gt;1. Dispatch Queue&lt;/h4&gt;&lt;p&gt;GCD 为我们提供了两类队列，&lt;strong&gt;串行队列&lt;/strong&gt; 和 &lt;strong&gt;并行队列&lt;/strong&gt;。两者的区别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;串行队列中，按照 FIFO 的顺序执行任务，前面一个任务执行完，后面一个才开始执行。&lt;/li&gt;
&lt;li&gt;并行队列中，也是按照 FIFO 的顺序执行任务，只要前一个被拿去执行，继而后面一个就开始执行，后面的任务无需等到前面的任务执行完再开始执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还要解释一个容易混淆的概念，&lt;strong&gt;并发&lt;/strong&gt;和&lt;strong&gt;并行&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发：是指单独部分可以同时执行，但是需要系统决定怎样发生。&lt;/li&gt;
&lt;li&gt;并行：两个任务互不干扰，同时执行。单核设备，系统需要通过切换上下文来实现并发；多核设备，系统可以通过并行来执行并发任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，还有一个概念，&lt;strong&gt;同步&lt;/strong&gt;和&lt;strong&gt;异步&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步 ： 同步执行的任务会阻塞当前线程。&lt;/li&gt;
&lt;li&gt;异步 ： 异步执行的任务不会阻塞当前线程。是否开启新的线程，由系统管理。如果当前有空闲的线程，使用当前线程执行这个异步任务；如果没有空闲的线程，而且线程数量没有达到系统最大，则开启新的线程；如果线程数量已经达到系统最大，则需要等待其他线程中任务执行完毕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h5&gt;&lt;p&gt;我们使用时，一般使用这几个队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主队列 - dispatch_get_main_queue ：一个特殊的串行队列。在 GCD 中，方法主队列中的任务都是在主线程执行。当我们更新 UI 时想 dispatch 到主线程，可以使用这个队列。&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), 	^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	      &lt;span class=&quot;comment&quot;&gt;// UI 相关操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局并行队列 - dispatch_get_global_queue ： 系统提供的一个全局并行队列，我们可以通过指定参数，来获取不同优先级的队列。系统提供了四个优先级，所以也可以认为系统为我们提供了四个并行队列，分别为 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DISPATCH_QUEUE_PRIORITY_HIGH&lt;/li&gt;
&lt;li&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/li&gt;
&lt;li&gt;DISPATCH_QUEUE_PRIORITY_LOW&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 相关操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自定义队列 ：你可以自己定义串行或者并行队列，来执行一些相关的任务，平时开发中也建议用自定义队列。创建自定义队列时，需要两个参数。一个是队列的名字，方便我们再调试时查找队列使用，命名方式采用的是&lt;strong&gt;反向 DNS 命名规则&lt;/strong&gt;；一个是队列类型，传 NULL 或者 DISPATCH_QUEUE_SERIAL 代表串行队列，传 DISPATCH_QUEUE_CONCURRENT 代表并行队列，通常情况下，不要传 NULL，会降低可读性。&lt;br&gt;  DISPATCH_QUEUE_SERIAL_INACTIVE 代表串行不活跃队列，DISPATCH_QUEUE_CONCURRENT_INACTIVE 代表并行不活跃队列，在执行 block 任务时，需要被激活。&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.dispatch&quot;&lt;/span&gt;,DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;你可以使用 &lt;code&gt;dispatch_queue_set_specific&lt;/code&gt;、&lt;code&gt;dispatch_queue_get_specific&lt;/code&gt; 和 &lt;code&gt;dispatch_get_specific&lt;/code&gt; 方法，为 queue 设置关联的 key 或者根据 key 找到关联对象等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以说，系统为我们提供了 5 中不同的队列，运行在主线程中的 main queue;3 个不同优先级的 global queue; 一个优先级更低的 background queue。除此之外，开发者可以自定义一些串行和并行队列，这些自定义队列中被调度的所有 block 最终都会被放到系统全局队列和线程池中，后面会讲这部分原理。盗用一张经典图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/gcd-queues.png&quot; alt=&quot;gcd-queues&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;同步-VS-异步&quot;&gt;&lt;a href=&quot;#同步-VS-异步&quot; class=&quot;headerlink&quot; title=&quot;同步 VS 异步&quot;&gt;&lt;/a&gt;同步 VS 异步&lt;/h5&gt;&lt;p&gt;我们大多数情况下，都是使用 &lt;code&gt;dispatch_asyn()&lt;/code&gt; 做异步操作，因为程序本来就是顺序执行，很少用到同步操作。有时候我们会把 &lt;code&gt;dispatch_syn()&lt;/code&gt; 当做锁来用，以达到保护的作用。&lt;/p&gt;
&lt;p&gt;系统维护的是一个队列，根据 FIFO 的规则，将 dispatch 到队列中的任务一一执行。有时候我们想把一些任务延后执行以下，例如 App 启动时，我想让主线程中一个耗时的工作放在后，可以尝试用一下 &lt;code&gt;dispatch_asyn()&lt;/code&gt;，相当于把任务重新追加到了队尾。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 想要延后的任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常情况下，我们使用 &lt;code&gt;dispatch_asyn()&lt;/code&gt; 是不会造成死锁的。死锁一般出现在使用 &lt;code&gt;dispatch_syn()&lt;/code&gt; 的时候。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_sync&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;dead lock&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想上面这样写，启动就会报错误。以下情况也如此：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.dispatch&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;dispatch asyn&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dispatch_sync&lt;/span&gt;(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;dispatch asyn -&amp;gt; dispatch syn&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，&lt;code&gt;dispatch_asyn()&lt;/code&gt; 整个 block（称作 blcok_asyn） 当做一个任务追加到串行队列队尾，然后开始执行。在 block_asyn 内部中，又进行了 &lt;code&gt;dispatch_syn()&lt;/code&gt;，想想要执行 block_syn。因为是串行队列，需要前一个执行完（block_asyn），再执行后面一个（block_syn）；但是要执行完 block_asyn，需要执行内部的 block_syn。互相等待，形成死锁。&lt;/p&gt;
&lt;p&gt;现实开发中，还有更复杂的死锁场景。不过现在编译器很友好，我们能在编译执行时就检测到了。&lt;/p&gt;
&lt;h5 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h5&gt;&lt;p&gt;针对下面这几行代码，我们分析一下它的底层过程：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.dispatch&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;dispatch asyn test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;创建队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;源码很长，但实际只有一个方法，逻辑比较清晰，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 开发者调用的方法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_queue_create(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *label, &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_attr_t&lt;/span&gt; attr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_queue_create_with_target(label, attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_TARGET_QUEUE_DEFAULT, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 内部实际调用方法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_NOINLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_queue_create_with_target(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *label, &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_attr_t&lt;/span&gt; dqa,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; tq, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; legacy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 1.初步判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!slowpath(dqa)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dqa = _dispatch_get_default_queue_attr();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dqa-&amp;gt;do_vtable != DISPATCH_VTABLE(queue_attr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DISPATCH_CLIENT_CRASH(dqa-&amp;gt;do_vtable, &lt;span class=&quot;string&quot;&gt;&quot;Invalid queue attribute&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 2.配置队列参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_qos_t&lt;/span&gt; qos = _dispatch_priority_qos(dqa-&amp;gt;dqa_qos_and_relpri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; !HAVE_PTHREAD_WORKQUEUE_QOS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (qos == DISPATCH_QOS_USER_INTERACTIVE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		qos = DISPATCH_QOS_USER_INITIATED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (qos == DISPATCH_QOS_MAINTENANCE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		qos = DISPATCH_QOS_BACKGROUND;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// !HAVE_PTHREAD_WORKQUEUE_QOS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;_dispatch_queue_attr_overcommit_t&lt;/span&gt; overcommit = dqa-&amp;gt;dqa_overcommit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (overcommit != _dispatch_queue_attr_overcommit_unspecified &amp;amp;&amp;amp; tq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tq-&amp;gt;do_targetq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_CLIENT_CRASH(tq, &lt;span class=&quot;string&quot;&gt;&quot;Cannot specify both overcommit and &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;string&quot;&gt;&quot;a non-global target queue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tq &amp;amp;&amp;amp; !tq-&amp;gt;do_targetq &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tq-&amp;gt;do_ref_cnt == DISPATCH_OBJECT_GLOBAL_REFCNT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Handle discrepancies between attr and target queue, attributes win&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (overcommit == _dispatch_queue_attr_overcommit_unspecified) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tq-&amp;gt;dq_priority &amp;amp; DISPATCH_PRIORITY_FLAG_OVERCOMMIT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				overcommit = _dispatch_queue_attr_overcommit_enabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				overcommit = _dispatch_queue_attr_overcommit_disabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (qos == DISPATCH_QOS_UNSPECIFIED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;dispatch_qos_t&lt;/span&gt; tq_qos = _dispatch_priority_qos(tq-&amp;gt;dq_priority);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tq = _dispatch_get_root_queue(tq_qos,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					overcommit == _dispatch_queue_attr_overcommit_enabled);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tq = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tq &amp;amp;&amp;amp; !tq-&amp;gt;do_targetq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// target is a pthread or runloop root queue, setting QoS or overcommit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// is disallowed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (overcommit != _dispatch_queue_attr_overcommit_unspecified) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_CLIENT_CRASH(tq, &lt;span class=&quot;string&quot;&gt;&quot;Cannot specify an overcommit attribute &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;string&quot;&gt;&quot;and use this kind of target queue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (qos != DISPATCH_QOS_UNSPECIFIED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_CLIENT_CRASH(tq, &lt;span class=&quot;string&quot;&gt;&quot;Cannot specify a QoS attribute &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;string&quot;&gt;&quot;and use this kind of target queue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (overcommit == _dispatch_queue_attr_overcommit_unspecified) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;comment&quot;&gt;// Serial queues default to overcommit!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			overcommit = dqa-&amp;gt;dqa_concurrent ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					_dispatch_queue_attr_overcommit_disabled :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					_dispatch_queue_attr_overcommit_enabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!tq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tq = _dispatch_get_root_queue(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				qos == DISPATCH_QOS_UNSPECIFIED ? DISPATCH_QOS_DEFAULT : qos,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				overcommit == _dispatch_queue_attr_overcommit_enabled);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (slowpath(!tq)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_CLIENT_CRASH(qos, &lt;span class=&quot;string&quot;&gt;&quot;Invalid queue attribute&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 3. 初始化队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (legacy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// if any of these attributes is specified, use non legacy classes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dqa-&amp;gt;dqa_inactive || dqa-&amp;gt;dqa_autorelease_frequency) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			legacy = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *vtable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_flags_t&lt;/span&gt; dqf = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (legacy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vtable = DISPATCH_VTABLE(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dqa-&amp;gt;dqa_concurrent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vtable = DISPATCH_VTABLE(queue_concurrent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vtable = DISPATCH_VTABLE(queue_serial);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (dqa-&amp;gt;dqa_autorelease_frequency) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; DISPATCH_AUTORELEASE_FREQUENCY_NEVER:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dqf |= DQF_AUTORELEASE_NEVER;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dqf |= DQF_AUTORELEASE_ALWAYS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (legacy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dqf |= DQF_LEGACY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (label) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *tmp = _dispatch_strdup_if_mutable(label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tmp != label) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dqf |= DQF_LABEL_NEEDS_FREE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			label = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; dq = _dispatch_object_alloc(vtable,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dispatch_queue_s) - DISPATCH_QUEUE_CACHELINE_PAD);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_queue_init(dq, dqf, dqa-&amp;gt;dqa_concurrent ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_QUEUE_WIDTH_MAX : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, DISPATCH_QUEUE_ROLE_INNER |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			(dqa-&amp;gt;dqa_inactive ? DISPATCH_QUEUE_INACTIVE : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dq-&amp;gt;dq_label = label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; HAVE_PTHREAD_WORKQUEUE_QOS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dq-&amp;gt;dq_priority = dqa-&amp;gt;dqa_qos_and_relpri;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (overcommit == _dispatch_queue_attr_overcommit_enabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dq-&amp;gt;dq_priority |= DISPATCH_PRIORITY_FLAG_OVERCOMMIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_retain(tq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (qos == QOS_CLASS_UNSPECIFIED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// legacy way of inherithing the QoS from the target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_queue_priority_inherit_from_target(dq, tq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!dqa-&amp;gt;dqa_inactive) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_queue_inherit_wlh_from_target(dq, tq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dq-&amp;gt;do_targetq = tq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_object_debug(dq, &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, __func__);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_introspection_queue_create(dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据代码生成的流程图，不想看代码直接看图，下同：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/Create_Queue.png&quot; alt=&quot;Create_Queue&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据流程图，这个方法的步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者调用 &lt;code&gt;dispatch_queue_create()&lt;/code&gt; 方法之后，内部会调用 &lt;code&gt;_dispatch_queue_create_with_target()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;然后进行初步判断，多数情况下，我们是不会传队列类型的，都是穿 NULL，所以这里是个 slowpath。如果传了参数，但是不是规定的队列类型，系统会认为你是个智障，并抛出错误。&lt;/li&gt;
&lt;li&gt;然后初始化一些配置项。主要是 target_queue，overcommit 项和 qos。target_queue 是依赖的目标队列，像任何队列提交的任务（block），最终都会放到目标队列中执行；支持 overcommit 时，每当想队列提交一个任务时，都会开一个新的线程处理，这样是为了避免单一线程任务太多而过载；qos 是队列优先级，之前已经说过。&lt;/li&gt;
&lt;li&gt;然后进入判断分支。普通的串行队列的目标队列，就是一个支持 overcommit 的全局队列（对应 else 分支）；当前 tq 对象的引用计数为 DISPATCH_OBJECT_GLOBAL_REFCNT （永远不会释放）时，且还没有目标队列时，才可以设置 overcommit 项，而且当优先级为 DISPATCH_QOS_UNSPECIFIED 时，需要重置 tq （对应 if 分支）；其他情况（else if 分支）。&lt;/li&gt;
&lt;li&gt;然后配置队列的标识，以方便在调试时找到自己的那个队列。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;_dispatch_object_alloc&lt;/code&gt; 方法申请一个 dispatch_queue_t 对象空间，dq。&lt;/li&gt;
&lt;li&gt;根据传入的信息（并行 or 串行；活跃 or 非活跃）来初始化这个队列。并行队列的 width 会设置为 &lt;code&gt;DISPATCH_QUEUE_WIDTH_MAX&lt;/code&gt; 即最大，不设限；串行的会设置为 1。&lt;/li&gt;
&lt;li&gt;将上面获得配置项，目标队列，是否支持 overcommit，优先级和 dq 绑定。&lt;/li&gt;
&lt;li&gt;返回这个队列。返回去还输出了一句信息，便于调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;异步执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个版本异步执行的代码，因为方法拆分很多，所以显得很乱。源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 开发者调用 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_queue_t dq, dispatch_block_t work)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_continuation_t&lt;/span&gt; dc = _dispatch_continuation_alloc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; dc_flags = DISPATCH_OBJ_CONSUME_BIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_continuation_init(dc, dq, work, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, dc_flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_continuation_async(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 内部调用，包一层，再深入调用 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_NOINLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_continuation_async(&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; dq, &lt;span class=&quot;keyword&quot;&gt;dispatch_continuation_t&lt;/span&gt; dc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_continuation_async2(dq, dc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dc-&amp;gt;dc_flags &amp;amp; DISPATCH_OBJ_BARRIER_BIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 根据 barrier 关键字区别串行还是并行，分两支 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_ALWAYS_INLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_continuation_async2(&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; dq, &lt;span class=&quot;keyword&quot;&gt;dispatch_continuation_t&lt;/span&gt; dc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; barrier)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fastpath(barrier || !DISPATCH_QUEUE_USES_REDIRECTION(dq-&amp;gt;dq_width))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 串行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_continuation_push(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 并行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_async_f2(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 并行又多了一层调用，就是这个方法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_NOINLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_async_f2(&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; dq, &lt;span class=&quot;keyword&quot;&gt;dispatch_continuation_t&lt;/span&gt; dc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (slowpath(dq-&amp;gt;dq_items_tail)) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 少路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_continuation_push(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (slowpath(!_dispatch_queue_try_acquire_async(dq))) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 少路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_continuation_push(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 多路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_async_f_redirect(dq, dc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_continuation_override_qos(dq, dc));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 主要用来重定向 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_NOINLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_async_f_redirect(&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; dq,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;dispatch_object_t&lt;/span&gt; dou, &lt;span class=&quot;keyword&quot;&gt;dispatch_qos_t&lt;/span&gt; qos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!slowpath(_dispatch_object_is_redirection(dou))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dou._dc = _dispatch_async_redirect_wrap(dq, dou);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dq = dq-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Find the queue to redirect to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (slowpath(DISPATCH_QUEUE_USES_REDIRECTION(dq-&amp;gt;dq_width))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fastpath(_dispatch_queue_try_acquire_async(dq))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!dou._dc-&amp;gt;dc_ctxt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dou._dc-&amp;gt;dc_ctxt = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					(&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)_dispatch_queue_autorelease_frequency(dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dq = dq-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 同步异步最终都是调用的这个方法，将任务追加到队列中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dx_push(dq, dou, qos);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... 省略一些调用层级，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 核心方法，通过 dc_flags 参数区分了是 group，还是串行，还是并行 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_ALWAYS_INLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_continuation_invoke_inline(&lt;span class=&quot;keyword&quot;&gt;dispatch_object_t&lt;/span&gt; dou, &lt;span class=&quot;keyword&quot;&gt;voucher_t&lt;/span&gt; ov,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;dispatch_invoke_flags_t&lt;/span&gt; flags)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_continuation_t&lt;/span&gt; dc = dou._dc, dc1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_invoke_with_autoreleasepool(flags, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; dc_flags = dc-&amp;gt;dc_flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_continuation_voucher_adopt(dc, ov, dc_flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dc_flags &amp;amp; DISPATCH_OBJ_CONSUME_BIT) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 并行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dc1 = _dispatch_continuation_free_cacheonly(dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dc1 = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(dc_flags &amp;amp; DISPATCH_OBJ_GROUP_BIT)) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// group&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_continuation_with_group_invoke(dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 串行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_client_callout(dc-&amp;gt;dc_ctxt, dc-&amp;gt;dc_func);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_introspection_queue_item_complete(dou);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(dc1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_continuation_free_to_cache_limit(dc1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_perfmon_workitem_inc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不想看代码，直接看图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/Dispatch_Asyn.png&quot; alt=&quot;Dispatch_Asyn&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据流程图描述一下过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先开发者调用 &lt;code&gt;dispatch_async()&lt;/code&gt; 方法，然后内部创建了一个 &lt;code&gt;_dispatch_continuation_init&lt;/code&gt; 队列，将 queue、block 这些信息和这个 dc 绑定起来。这过程中 copy 了 block。&lt;/li&gt;
&lt;li&gt;然后经过了几个层次的调用，主要为了区分并行还是串行。&lt;/li&gt;
&lt;li&gt;如果是串行（这种情况比较常见，所以是 fastpath），直接就 dx_push 了，其实就是讲任务追加到一个链表里面。&lt;/li&gt;
&lt;li&gt;如果是并行，需要做重定向。之前我们说过，放到队列中的任务，最终都会以各种形式追加到目标队列里面。在 &lt;code&gt;_dispatch_async_f_redirect&lt;/code&gt; 方法中，重新寻找依赖目标队列，然后追加过去。&lt;/li&gt;
&lt;li&gt;经过一系列调用，我们会在 &lt;code&gt;_dispatch_continuation_invoke_inline&lt;/code&gt; 方法里区分串行还是并行。因为这个方法会被频繁调用，所以定义成了内联函数。对于串行队列，我们使用信号量控制，执行前信号量置为 wait，执行完毕后发送 singal；对于调度组，我们会在执行完之后调用 &lt;code&gt;dispatch_group_leave&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;底层的线程池，是使用 pthread 维护的，所以最终都会使用 pthread 来处理这些任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;同步执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同步执行，相对来说比较简单，源码如下 ：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 开发者调用 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_sync&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_queue_t dq, dispatch_block_t work)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(_dispatch_block_has_private_data(work))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_sync_block_with_private_data(dq, work, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_sync_f(dq, work, _dispatch_Block_invoke(work));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 内部调用 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DISPATCH_NOINLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_sync_f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_queue_t dq, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ctxt, dispatch_function_t func)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (likely(dq-&amp;gt;dq_width == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dispatch_barrier_sync_f(dq, ctxt, func);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Global concurrent queues and queues bound to non-dispatch threads&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// always fall into the slow case, see DISPATCH_ROOT_QUEUE_STATE_INIT_VALUE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(!_dispatch_queue_try_reserve_sync_width(dq))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_sync_f_slow(dq, ctxt, func, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_introspection_sync_begin(dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(dq-&amp;gt;do_targetq-&amp;gt;do_targetq)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _dispatch_sync_recurse(dq, ctxt, func, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_sync_invoke_and_complete(dq, ctxt, func);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同步执行，相对来说简单些，大体逻辑差不多。偷懒一下，就不画图了，直接描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者使用 &lt;code&gt;dispatch_sync()&lt;/code&gt; 方法，大多数路径，都会调用 &lt;code&gt;dispatch_sync_f()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;如果是串行队列，则通过 &lt;code&gt;dispatch_barrier_sync_f()&lt;/code&gt; 方法来保证原子操作。&lt;/li&gt;
&lt;li&gt;如果不是串行的（一般很少），我们使用 &lt;code&gt;_dispatch_introspection_sync_begin&lt;/code&gt; 和 &lt;code&gt;_dispatch_sync_invoke_and_complete&lt;/code&gt; 来保证同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;dispatch-after&quot;&gt;&lt;a href=&quot;#dispatch-after&quot; class=&quot;headerlink&quot; title=&quot;dispatch_after&quot;&gt;&lt;/a&gt;dispatch_after&lt;/h5&gt;&lt;p&gt;dispatch_after 一般用于延后执行一些任务，可以用来代替 NSTimer，因为有时候 NSTimer 问题太多了。在后面的一章里，我会总体讲一下多线程中的问题，这里就不详细说了。一般我们这样来使用 dispatch_after ：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.dispatch&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;span class=&quot;built_in&quot;&gt;NSEC_PER_SEC&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;f)),queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 2.0 second execute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在做页面过渡时，刚进入到新的页面我们并不会立即更新一些 view，为了引起用户注意，我们会过会儿再进行更新，可以中此 API 来完成。&lt;/p&gt;
&lt;p&gt;源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_ALWAYS_INLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_after(&lt;span class=&quot;keyword&quot;&gt;dispatch_time_t&lt;/span&gt; when, &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ctxt, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *handler, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_timer_source_refs_t&lt;/span&gt; dt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_source_t&lt;/span&gt; ds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; leeway, delta;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (when == DISPATCH_TIME_FOREVER) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; DISPATCH_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DISPATCH_CLIENT_CRASH(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dispatch_after called with &#39;when&#39; == infinity&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	delta = _dispatch_timeout(when);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (delta == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (block) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dispatch_async(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dispatch_async_f(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;, ctxt, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leeway = delta / &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// &amp;lt;rdar://problem/13447496&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (leeway &amp;lt; NSEC_PER_MSEC) leeway = NSEC_PER_MSEC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (leeway &amp;gt; &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * NSEC_PER_SEC) leeway = &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * NSEC_PER_SEC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// this function can and should be optimized to not use a dispatch source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ds = dispatch_source_create(&amp;amp;_dispatch_source_type_after, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dt = ds-&amp;gt;ds_timer_refs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_continuation_t&lt;/span&gt; dc = _dispatch_continuation_alloc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (block) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_continuation_init(dc, ds, handler, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_continuation_init_f(dc, ds, ctxt, handler, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// reference `ds` so that it doesn&#39;t show up as a leak&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dc-&amp;gt;dc_data = ds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_trace_continuation_push(ds-&amp;gt;_as_dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	os_atomic_store2o(dt, ds_handler[DS_EVENT_HANDLER], dc, relaxed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;)when &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// wall clock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		when = (&lt;span class=&quot;keyword&quot;&gt;dispatch_time_t&lt;/span&gt;)-((&lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt;)when);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// absolute clock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dt-&amp;gt;du_fflags |= DISPATCH_TIMER_CLOCK_MACH;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		leeway = _dispatch_time_nano2mach(leeway);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dt-&amp;gt;dt_timer.target = when;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dt-&amp;gt;dt_timer.interval = UINT64_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dt-&amp;gt;dt_timer.deadline = when + leeway;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_activate(ds);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;dispatch_after()&lt;/code&gt; 内部会调用 &lt;code&gt;_dispatch_after()&lt;/code&gt; 方法，然后先判断延迟时间。如果为 &lt;code&gt;DISPATCH_TIME_FOREVER&lt;/code&gt;（永远不执行），则会出现异常；如果为 0 则立即执行；否则的话会创建一个 dispatch_timer_source_refs_t 结构体指针，将上下文相关信息与之关联。然后使用 dispatch_source 相关方法，将定时器和 block 任务关联起来。定时器时间到时，取出 block 任务开始执行。&lt;/p&gt;
&lt;h5 id=&quot;dispatch-once&quot;&gt;&lt;a href=&quot;#dispatch-once&quot; class=&quot;headerlink&quot; title=&quot;dispatch_once&quot;&gt;&lt;/a&gt;dispatch_once&lt;/h5&gt;&lt;p&gt;如果我们有一段代码，在 App 生命周期内最好只初始化一次，这时候使用 dispatch_once 最好不过了。例如我们单例中经常这样用：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)sharedManager &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; BLDispatchManager *sharedInstance = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sharedInstance = [[BLDispatchManager alloc] initPrivate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sharedInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有在定义 &lt;code&gt;NSDateFormatter&lt;/code&gt; 时使用：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)todayDateString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSDateFormatter&lt;/span&gt; *formatter = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        formatter = [&lt;span class=&quot;built_in&quot;&gt;NSDateFormatter&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        formatter.locale = [&lt;span class=&quot;built_in&quot;&gt;NSLocale&lt;/span&gt; localeWithLocaleIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;en_US_POSIX&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        formatter.timeZone = [&lt;span class=&quot;built_in&quot;&gt;NSTimeZone&lt;/span&gt; timeZoneForSecondsFromGMT:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        formatter.dateFormat = &lt;span class=&quot;string&quot;&gt;@&quot;yyyyMMdd&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [formatter stringFromDate:[&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; date]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为这是很常用的一个代码片段，所以被加在了 Xcode 的 &lt;a href=&quot;https://help.apple.com/xcode/mac/current/#/dev2b24f6f93&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;code snippet&lt;/a&gt; 中。&lt;/p&gt;
&lt;p&gt;它的源代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 一个结构体，里面为当前的信号量、线程端口和指向下一个节点的指针 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _dispatch_once_waiter_s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _dispatch_once_waiter_s *&lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; dow_next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_thread_event_s dow_event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;mach_port_t&lt;/span&gt; dow_thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; *&lt;span class=&quot;keyword&quot;&gt;_dispatch_once_waiter_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 我们调用的方法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_once&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_once_t *val, dispatch_block_t block)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_once_f(val, block, _dispatch_Block_invoke(block));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 实际执行的方法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DISPATCH_NOINLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_once_f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_once_t *val, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ctxt, dispatch_function_t func)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; !DISPATCH_ONCE_INLINE_FASTPATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (likely(os_atomic_load(val, acquire) == DLOCK_ONCE_DONE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// !DISPATCH_ONCE_INLINE_FASTPATH&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dispatch_once_f_slow(val, ctxt, func);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DISPATCH_ONCE_SLOW_INLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_once_f_slow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_once_t *val, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ctxt, dispatch_function_t func)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; DISPATCH_GATE_USE_FOR_DISPATCH_ONCE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_once_gate_t&lt;/span&gt; l = (&lt;span class=&quot;keyword&quot;&gt;dispatch_once_gate_t&lt;/span&gt;)val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_dispatch_once_gate_tryenter(l)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_client_callout(ctxt, func);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_once_gate_broadcast(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_once_gate_wait(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;_dispatch_once_waiter_t&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; *vval = (&lt;span class=&quot;keyword&quot;&gt;_dispatch_once_waiter_t&lt;/span&gt;*)val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _dispatch_once_waiter_s dow = &amp;#123; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;_dispatch_once_waiter_t&lt;/span&gt; tail = &amp;amp;dow, next, tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;dispatch_thread_event_t&lt;/span&gt; event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (os_atomic_cmpxchg(vval, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, tail, acquire)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dow.dow_thread = _dispatch_tid_self();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_client_callout(ctxt, func);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		next = (&lt;span class=&quot;keyword&quot;&gt;_dispatch_once_waiter_t&lt;/span&gt;)_dispatch_once_xchg_done(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (next != tail) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tmp = (&lt;span class=&quot;keyword&quot;&gt;_dispatch_once_waiter_t&lt;/span&gt;)_dispatch_wait_until(next-&amp;gt;dow_next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			event = &amp;amp;next-&amp;gt;dow_event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			next = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_thread_event_signal(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_thread_event_init(&amp;amp;dow.dow_event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		next = *vval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (next == DISPATCH_ONCE_DONE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (os_atomic_cmpxchgv(vval, next, tail, &amp;amp;next, release)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dow.dow_thread = next-&amp;gt;dow_thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dow.dow_next = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dow.dow_thread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;pthread_priority_t&lt;/span&gt; pp = _dispatch_get_priority();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					_dispatch_thread_override_start(dow.dow_thread, pp, val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_dispatch_thread_event_wait(&amp;amp;dow.dow_event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dow.dow_thread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					_dispatch_thread_override_end(dow.dow_thread, val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_thread_event_destroy(&amp;amp;dow.dow_event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不想看代码直接看图 (emmm… 根据逻辑画完图才发现，其实这个图也挺乱的，所以我将两个主分支用不同颜色标记处理)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/Dispatch_Once.png&quot; alt=&quot;Dispatch_Once&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据这个图，我来表述一下主要过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们调用 &lt;code&gt;dispatch_once()&lt;/code&gt; 方法之后，内部多数情况下会调用 &lt;code&gt;dispatch_once_f_slow()&lt;/code&gt; 方法，这个方法才是真正的执行方法。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;os_atomic_cmpxchg(vval, NULL, tail, acquire)&lt;/code&gt; 这个方法，执行过程实际是这个样子&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*vval == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*vval = tail = &amp;amp;dow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;我们初始化的 once_token,也就是 *vval 实际是 0，所以第一次执行时是返回 true 的。if() 中的这个方法是原子操作，也就是说，如果多个线程同时调用这个方法，只有一个线程会进入 true 的分支，其他都进入 else 分支。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这里先说进入 true 分支。进入之后，会执行对应的 block，也就是对应的任务。然后 next 指向 &lt;em&gt;vval， &lt;/em&gt;vval 标记为 &lt;code&gt;DISPATCH_ONCE_DONE&lt;/code&gt;，即执行的是这样一个过程：&lt;/p&gt;
  &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;next = (&lt;span class=&quot;keyword&quot;&gt;_dispatch_once_waiter_t&lt;/span&gt;)_dispatch_once_xchg_done(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实际执行时这样的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next = *vval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*vval = DISPATCH_ONCE_DONE;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后 &lt;code&gt;tail = &amp;amp;dow&lt;/code&gt;。此时我们发现，原来的 &lt;code&gt;*vval = &amp;amp;dow -&amp;gt; next = *vval&lt;/code&gt;，实际则是 &lt;code&gt;next = &amp;amp;dow&lt;/code&gt;，&lt;strong&gt;如果没有其他线程(或者调用）进入 else 分支，&amp;amp;dow 实际没有改变，即 &lt;code&gt;tail == tmp&lt;/code&gt;&lt;/strong&gt;。此时 &lt;code&gt;while (tail != tmp)&lt;/code&gt; 是不会执行的，分支结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果有其他线程(或者调用)进入了 else 分支，那么就已经生成了一个等待响应的链表。此时进入 &amp;amp;dow 已经改变，成为了链表尾部，*vval 是链表头部。进入 while 循环后，开始遍历链表，依次发送信号进行唤起。&lt;/li&gt;
&lt;li&gt;然后说进入 else 分支的这些调用。进入分支后，随即进入一个死循环，直到发现 *vval 已经标记为了 &lt;code&gt;DISPATCH_ONCE_DONE&lt;/code&gt; 才跳出循环。&lt;/li&gt;
&lt;li&gt;发现 *vval 不是 &lt;code&gt;DISPATCH_ONCE_DONE&lt;/code&gt; 之后，会将这个节点追加到链表尾部，并调用信号量的 wait 方法，等待被唤起。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上为全部的执行过程。通过源码可以看出，使用的是 原子操作 + 信号量来保证 block 只会被执行多次，哪怕是在多线程情况下。&lt;/p&gt;
&lt;p&gt;这样一个关于 &lt;code&gt;dispatch_once&lt;/code&gt; 递归调用会产生死锁的现象，也就很好解释了。看下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dispatchOnceTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dispatchOnceTest];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面分析，在 block 执行完，并将 *vval 置为 &lt;code&gt;DISPATCH_ONCE_DONE&lt;/code&gt; 之前，其他的调用都会进入 else 分支。第二次递归调用，信号量处于等待状态，需要等到第一个 block 执行完才能被唤起；但是第一个 block 所执行的内容就是进行第二次调用，这个任务被 wait 了，也即是说 block 永远执行不完。死锁就这样发生了。&lt;/p&gt;
&lt;h5 id=&quot;dispatch-apply&quot;&gt;&lt;a href=&quot;#dispatch-apply&quot; class=&quot;headerlink&quot; title=&quot;dispatch_apply&quot;&gt;&lt;/a&gt;dispatch_apply&lt;/h5&gt;&lt;p&gt;有时候没有时序性依赖的时候，我们会用 &lt;code&gt;dispatch_apply&lt;/code&gt; 来代替 &lt;code&gt;for loop&lt;/code&gt;。例如我们下载一组图片：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 使用 for loop */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)downloadImages:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *&amp;gt; *)imageURLs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *imageURL &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; imageURLs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; downloadImageWithURL:imageURL];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** dispatch_apply */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)downloadImages:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *&amp;gt; *)imageURLs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; downloadQueue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.download&quot;&lt;/span&gt;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_apply(imageURLs.count, downloadQueue, ^(size_t index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *imageURL = imageURLs[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; downloadImageWithURL:imageURL];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进行替换是需要注意几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务之间没有时序性依赖，谁先执行都可以。&lt;/li&gt;
&lt;li&gt;一般在并发队列，并发执行任务时，才替换。串行队列替换没有意义。&lt;/li&gt;
&lt;li&gt;如果数组中数据很少，或者每个任务执行时间很短，替换也没有意义。强行进行并发的消耗，可能比使用 for loop 还要多，并不能得到优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于原理，就不大篇幅讲了。大概是这个样子：这个方法是同步的，会阻塞当前线程，直到所有的 block 任务都完成。如果提交到并发队列，每个任务执行顺序是不一定的。&lt;/p&gt;
&lt;p&gt;更多时候，我们执行下载任务，并不希望阻塞当前线程，这时我们可以使用 &lt;code&gt;dispatch_group&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;dispatch-group&quot;&gt;&lt;a href=&quot;#dispatch-group&quot; class=&quot;headerlink&quot; title=&quot;dispatch_group&quot;&gt;&lt;/a&gt;dispatch_group&lt;/h5&gt;&lt;p&gt;当处理批量异步任务时，&lt;code&gt;dispatch_group&lt;/code&gt; 是一个很好的选择。针对上面说的下载图片的例子，我们可以这样做：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)downloadImages:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *&amp;gt; *)imageURLs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_group_t taskGroup = dispatch_group_create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.group&quot;&lt;/span&gt;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *imageURL &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; imageURLs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatch_group_enter(taskGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 下载方法是异步的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; downloadImageWithURL:imageURL withQueue:queue completeHandler:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dispatch_group_leave(taskGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_group_notify(taskGroup, queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// all task finish&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** 如果使用这个方法，内部执行异步任务，会立即到 dispatch_group_notify 方法中，因为是异步，系统认为已经执行完了。所以这个方法使用不多。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_group_async(taskGroup, queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于原理方面，和 &lt;code&gt;dispatch_async()&lt;/code&gt; 方法类似，前面也提到。这里只说一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_ALWAYS_INLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_continuation_group_async(dispatch_group_t dg, &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; dq,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dispatch_continuation_t dc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_group_enter(dg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dc-&amp;gt;dc_data = dg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_continuation_async(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码中，调用了 &lt;code&gt;dispatch_group_enter(dg)&lt;/code&gt; 方法进行标记，最终都会和 &lt;code&gt;dispatch_async()&lt;/code&gt; 走到同样的方法里 &lt;code&gt;_dispatch_continuation_invoke_inline()&lt;/code&gt;。在里面判断类型为 group，执行 task，执行结束后调用 &lt;code&gt;dispatch_group_leave((dispatch_group_t)dou)&lt;/code&gt;，和之前的 enter 对应。&lt;/p&gt;
&lt;p&gt;以上是 Dispatch Queues 内容的介绍，我们平时使用 GCD 的过程中，60% 都是使用的以上内容。&lt;/p&gt;
&lt;h4 id=&quot;2-Dispatch-Block&quot;&gt;&lt;a href=&quot;#2-Dispatch-Block&quot; class=&quot;headerlink&quot; title=&quot;2. Dispatch Block&quot;&gt;&lt;/a&gt;2. Dispatch Block&lt;/h4&gt;&lt;p&gt;在 iOS 8 中，Apple 为我们提供了新的 API，&lt;code&gt;Dispatch Block&lt;/code&gt; 相关。虽然之前我们可以向 dispatch 传递 block 参数，作为任务，但是这里和之前的不一样。之前经常说，使用 &lt;code&gt;NSOperation&lt;/code&gt; 创建的任务可以 cancel，使用 GCD 不可以。但是在 iOS 8 之后，可以 cancel 任务了。&lt;/p&gt;
&lt;h5 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建一个 block 并执行。&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dispatchBlockTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// 不指定优先级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    dispatch_block_t dsBlock = dispatch_block_create(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// 指定优先级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    dispatch_block_t dsQosBlock = dispatch_block_create_with_qos_class(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, QOS_CLASS_USER_INITIATED, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), dsBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), dsQosBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// 直接创建并执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    dispatch_block_perform(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       		 &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞当前任务，等 block 执行完在继续执行。&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dispatchBlockTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.block&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_block_t dsBlock = dispatch_block_create(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, dsBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 等到 block 执行完&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_block_wait(dsBlock, DISPATCH_TIME_FOREVER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;block was finished&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;block 执行完后，收到通知，执行其他任务&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dispatchBlockTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.block&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_block_t dsBlock = dispatch_block_create(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, dsBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// block 执行完收到通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_block_notify(dsBlock, queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;block was finished,do other thing&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;execute first&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对 block 进行 cancel 操作&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dispatchBlockTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.block&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_block_t dsBlock1 = dispatch_block_create(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test block1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_block_t dsBlock2 = dispatch_block_create(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test block2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, dsBlock1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, dsBlock2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 第二个 block 将会被 cancel，不执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_block_cancel(dsBlock2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-Dispatch-Barriers&quot;&gt;&lt;a href=&quot;#3-Dispatch-Barriers&quot; class=&quot;headerlink&quot; title=&quot;3. Dispatch Barriers&quot;&gt;&lt;/a&gt;3. Dispatch Barriers&lt;/h4&gt;&lt;p&gt;Dispatch Barriers 可以理解为调度屏障，常用于多线程并发读写操作。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; imageQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *imageArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageQueue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.image&quot;&lt;/span&gt;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageArray = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 保证写入时不会有其他操作，写完之后到主线程更新 UI */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addImage:(&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_barrier_async(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageArray addObject:image];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// update UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 这里的 dispatch_sync 起到了 lock 的作用 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *&amp;gt; *)images &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *imagesArray = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_sync&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imagesArray = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageArray mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; imagesArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转化成图可能好理解一些：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/Dispatch_Barrier.png&quot; alt=&quot;Dispatch_Barrier&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatch_barrier_async()&lt;/code&gt; 的原理和 &lt;code&gt;dispatch_async()&lt;/code&gt; 差不多，只不过设置的 flags 不一样：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_barrier_async(&lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; dq, dispatch_block_t work)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_continuation_t dc = _dispatch_continuation_alloc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 在 dispatch_async() 中只设置了 DISPATCH_OBJ_CONSUME_BIT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	uintptr_t dc_flags = DISPATCH_OBJ_CO&lt;span class=&quot;built_in&quot;&gt;NSUME_BIT&lt;/span&gt; | DISPATCH_OBJ_BARRIER_BIT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_continuation_init(dc, dq, work, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, dc_flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_continuation_push(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后面都是 push 到队列中，然后，获取任务时一个死循环，在从队列中获取任务一个一个执行，如果判断 flag 为 barrier，终止循环，则单独执行这个任务。它后面的任务放入一个队列，等它执行完了再开始执行。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DISPATCH_ALWAYS_INLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;dispatch_queue_wakeup_target_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_queue_drain(&lt;span class=&quot;keyword&quot;&gt;dispatch_queue_t&lt;/span&gt; dq, &lt;span class=&quot;keyword&quot;&gt;dispatch_invoke_context_t&lt;/span&gt; dic,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;dispatch_invoke_flags_t&lt;/span&gt; flags, &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; *owned_ptr, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; serial_drain)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;first_iteration:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dq_state = os_atomic_load(&amp;amp;dq-&amp;gt;dq_state, relaxed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(_dq_state_is_suspended(dq_state))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(orig_tq != dq-&amp;gt;do_targetq)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (serial_drain || _dispatch_object_is_barrier(dc)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!serial_drain &amp;amp;&amp;amp; owned != DISPATCH_QUEUE_IN_BARRIER) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!_dispatch_queue_try_upgrade_full_width(dq, owned)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; out_with_no_width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				owned = DISPATCH_QUEUE_IN_BARRIER;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			next_dc = _dispatch_queue_next(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_dispatch_object_is_sync_waiter(dc)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				owned = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dic-&amp;gt;dic_deferred = dc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; out_with_deferred;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (owned == DISPATCH_QUEUE_IN_BARRIER) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// we just ran barrier work items, we have to make their&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// effect visible to other sync work items on other threads&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// that may start coming in after this point, hence the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// release barrier&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				os_atomic_xor2o(dq, dq_state, owned, release);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				owned = dq-&amp;gt;dq_width * DISPATCH_QUEUE_WIDTH_INTERVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(owned == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_dispatch_object_is_sync_waiter(dc)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// sync &quot;readers&quot; don&#39;t observe the limit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					_dispatch_queue_reserve_sync_width(dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!_dispatch_queue_try_acquire_async(dq)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; out_with_no_width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				owned = DISPATCH_QUEUE_WIDTH_INTERVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			next_dc = _dispatch_queue_next(dq, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_dispatch_object_is_sync_waiter(dc)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				owned -= DISPATCH_QUEUE_WIDTH_INTERVAL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_dispatch_sync_waiter_redirect_or_wake(dq,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						DISPATCH_SYNC_WAITER_NO_UNLOCK, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-Dispatch-Source&quot;&gt;&lt;a href=&quot;#4-Dispatch-Source&quot; class=&quot;headerlink&quot; title=&quot;4. Dispatch Source&quot;&gt;&lt;/a&gt;4. Dispatch Source&lt;/h4&gt;&lt;p&gt;关于 &lt;code&gt;dispatch_source&lt;/code&gt; 我们使用的少之又少，他是 BSD 系统内核功能的包装，经常用来监测某些事件发生。例如监测断点的使用和取消。[这里][&lt;a href=&quot;https://developer.apple.com/documentation/dispatch/dispatch_source_type_constants?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/documentation/dispatch/dispatch_source_type_constants?language=objc&lt;/a&gt;] 介绍了可以监测的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_DATA_ADD ： 自定义事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_DATA_OR ： 自定义事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_MACH_RECV ： MACH 端口接收事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_MACH_SEND ： MACH 端口发送事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_PROC ： 进程相关事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_READ ： 文件读取事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_SIGNAL ： 信号相关事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_TIMER ： 定时器相关事件 &lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_VNODE ： 文件属性修改事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_WRITE ： 文件写入事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_MEMORYPRESSURE ： 内存压力事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如我们可以通过下面代码，来监测断点的使用和取消：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) dispatch_source_t signalSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; signalOnceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;_signalOnceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_get_main_queue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalSource = dispatch_source_create(DISPATCH_SOURCE_TYPE_SIGNAL, SIGSTOP, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, queue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalSource) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dispatch_source_set_event_handler(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalSource, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            	&lt;span class=&quot;comment&quot;&gt;// 点击一下断点，再取消断点，便会执行这里。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;debug test&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dispatch_resume(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有 &lt;code&gt;diapatch_after()&lt;/code&gt; 就是依赖 &lt;code&gt;dispatch_source()&lt;/code&gt; 来实现的。我们可以自己实现一个类似的定时器：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)customTimer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_source_t timerSource = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, DISPATCH_TARGET_QUEUE_DEFAULT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_source_set_timer(timerSource, dispatch_time(DISPATCH_TIME_NOW, &lt;span class=&quot;number&quot;&gt;5.0&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;NSEC_PER_SEC&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;NSEC_PER_SEC&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_source_set_event_handler(timerSource, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;dispatch source timer&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalSource = timerSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_resume(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;基本原理-1&quot;&gt;&lt;a href=&quot;#基本原理-1&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h5&gt;&lt;p&gt;使用 &lt;code&gt;dispatch_source&lt;/code&gt; 时，大致过程是这样的：我们创建一个 source，然后加到队列中，并调用 &lt;code&gt;dispatch_resume()&lt;/code&gt; 方法，便会从队列中唤起 source，执行对应的 block。下面是一个详细的流程图，我们结合这张图来说一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/Dispatch_Source.png&quot; alt=&quot;Dispatch_Source&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建一个 source 对象，过程和创建 queue 类似，所以后面一些操作，和操作 queue 很类似。&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_source_t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_source_create(dispatch_source_type_t dst, uintptr_t handle,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; mask, &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; dq)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_source_refs_t dr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_source_t ds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dr = dux_create(dst, handle, mask)._dr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (unlikely(!dr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; DISPATCH_BAD_INPUT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 申请内存空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ds = _dispatch_object_alloc(DISPATCH_VTABLE(source),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dispatch_source_s));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 初始化一个队列，然后配置参数，完全被当做一个 queue 来处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_queue_init(ds-&amp;gt;_as_dq, DQF_LEGACY, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			DISPATCH_QUEUE_INACTIVE | DISPATCH_QUEUE_ROLE_INNER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ds-&amp;gt;dq_label = &lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ds-&amp;gt;do_ref_cnt++; &lt;span class=&quot;comment&quot;&gt;// the reference the manager queue holds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ds-&amp;gt;ds_refs = dr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dr-&amp;gt;du_owner_wref = _dispatch_ptr2wref(ds);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (slowpath(!dq)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dq = _dispatch_get_root_queue(DISPATCH_QOS_DEFAULT, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_retain((&lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; _Nonnull)dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ds-&amp;gt;do_targetq = dq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dr-&amp;gt;du_is_timer &amp;amp;&amp;amp; (dr-&amp;gt;du_fflags &amp;amp; DISPATCH_TIMER_INTERVAL)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_source_set_interval(ds, handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_object_debug(ds, &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, __func__);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置 event_handler。从源码中看出，用的是 &lt;code&gt;dispatch_continuation_t&lt;/code&gt; 进行绑定，和之前绑定 queue 一样，将 block copy 了一份。后面执行的时候，拿出来用。然后将这个任务 push 到队列里。&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_source_set_event_handler(dispatch_source_t ds,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dispatch_block_t handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_continuation_t dc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 这里实际就是在初始化 dispatch_continuation_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dc = _dispatch_source_handler_alloc(ds, handler, DS_EVENT_HANDLER, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 经过一顿操作，将任务 push 到队列中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_dispatch_source_set_handler(ds, DS_EVENT_HANDLER, dc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用 resume 方法，执行 source。一般新创建的都是暂停状态，这里判断是暂停状态，就开始唤起。&lt;/p&gt;
  &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;dispatch_resume&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dispatch_object_t dou)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DISPATCH_OBJECT_TFB(_dispatch_objc_resume, dou);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dx_vtable(dou._do)-&amp;gt;do_suspend) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dx_vtable(dou._do)-&amp;gt;do_resume(dou._do, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后一步，是最核心的异步，唤起任务开始执行。之前的 queue 最终也是走到这样类似的一步，可以看返回类型都是 &lt;code&gt;dispatch_queue_wakeup_target_t&lt;/code&gt;，基本是沿着 queue 的逻辑一路 copy 过来。这个方法，经过一系列判断，保证所有的 source 都会在正确的队列上面执行；如果队列和任务不对应，那么就返回正确的队列，重新派发让任务在正确的队列上执行。&lt;/p&gt;
  &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	DISPATCH_ALWAYS_INLINE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static inline dispatch_queue_wakeup_target_t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_dispatch_source_invoke2(dispatch_object_t dou, dispatch_invoke_context_t dic,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dispatch_invoke_flags_t flags, uint64_t *owned)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_source_t ds = dou._ds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_queue_wakeup_target_t retq = DISPATCH_QUEUE_WAKEUP_NONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 获取当前 queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_queue_t dq = _dispatch_queue_get_current();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_source_refs_t dr = ds-&amp;gt;ds_refs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_queue_flags_t dqf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// timer 事件处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (dr-&amp;gt;du_is_timer &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			os_atomic_load2o(ds, ds_timer_refs-&amp;gt;dt_pending_config, relaxed)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dqf = _dispatch_queue_atomic_flags(ds-&amp;gt;_as_dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (!(dqf &amp;amp; (DSF_CANCELED | DQF_RELEASED))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// timer has to be configured on the kevent queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (dq != dkq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return dkq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_source_timer_configure(ds);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 是否安装 source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!ds-&amp;gt;ds_is_installed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// The source needs to be installed on the kevent queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (dq != dkq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return dkq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_source_install(ds, _dispatch_get_wlh(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_dispatch_get_basepri());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 是否暂停，因为之前判断过，一般不可能走到这里&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (unlikely(DISPATCH_QUEUE_IS_SUSPENDED(ds))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Source suspended by an item drained from the source queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return ds-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 是否在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (_dispatch_source_get_registration_handler(dr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// The source has been registered and the registration handler needs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// to be delivered on the target queue.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (dq != ds-&amp;gt;do_targetq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return ds-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// clears ds_registration_handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_dispatch_source_registration_callout(ds, dq, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (!(dqf &amp;amp; (DSF_CANCELED | DQF_RELEASED)) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			os_atomic_load2o(ds, ds_pending_data, relaxed)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 有些 source 还有未完成的数据，需要通过目标队列上的回调进行传送；有些 source 则需要切换到管理队列上去。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (dq == ds-&amp;gt;do_targetq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_source_latch_and_call(ds, dq, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dqf = _dispatch_queue_atomic_flags(ds-&amp;gt;_as_dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			prevent_starvation = dq-&amp;gt;do_targetq ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					!(dq-&amp;gt;dq_priority &amp;amp; DISPATCH_PRIORITY_FLAG_OVERCOMMIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (prevent_starvation &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					os_atomic_load2o(ds, ds_pending_data, relaxed)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				retq = ds-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return ds-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if ((dqf &amp;amp; (DSF_CANCELED | DQF_RELEASED)) &amp;amp;&amp;amp; !(dqf &amp;amp; DSF_DEFERRED_DELETE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 已经被取消的 source 需要从管理队列中卸载。卸载完成后，取消的 handler 需要交付到目标队列。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (!(dqf &amp;amp; DSF_DELETED)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (dr-&amp;gt;du_is_timer &amp;amp;&amp;amp; !(dqf &amp;amp; DSF_ARMED)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// timers can cheat if not armed because there&#39;s nothing left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// to do on the manager queue and unregistration can happen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// on the regular target queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; else if (dq != dkq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return dkq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_source_refs_unregister(ds, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dqf = _dispatch_queue_atomic_flags(ds-&amp;gt;_as_dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (unlikely(dqf &amp;amp; DSF_DEFERRED_DELETE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				if (!(dqf &amp;amp; DSF_ARMED)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					goto unregister_event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// we need to wait for the EV_DELETE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return retq ? retq : DISPATCH_QUEUE_WAKEUP_WAIT_FOR_EVENT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (dq != ds-&amp;gt;do_targetq &amp;amp;&amp;amp; (_dispatch_source_get_event_handler(dr) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_dispatch_source_get_cancel_handler(dr) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_dispatch_source_get_registration_handler(dr))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			retq = ds-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_source_cancel_callout(ds, dq, flags);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dqf = _dispatch_queue_atomic_flags(ds-&amp;gt;_as_dq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		prevent_starvation = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (_dispatch_unote_needs_rearm(dr) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			!(dqf &amp;amp; (DSF_ARMED|DSF_DELETED|DSF_CANCELED|DQF_RELEASED))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 需要在管理队列进行 rearm 的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (dq != dkq) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return dkq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (unlikely(dqf &amp;amp; DSF_DEFERRED_DELETE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 如果我们可以直接注销，不需要 resume&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			goto unregister_event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (unlikely(DISPATCH_QUEUE_IS_SUSPENDED(ds))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 如果 source 已经暂停，不需要在管理队列 rearm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return ds-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (prevent_starvation &amp;amp;&amp;amp; dr-&amp;gt;du_wlh == DISPATCH_WLH_ANON) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return ds-&amp;gt;do_targetq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (unlikely(!_dispatch_source_refs_resume(ds))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			goto unregister_event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (!prevent_starvation &amp;amp;&amp;amp; _dispatch_wlh_should_poll_unote(dr)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_dispatch_event_loop_drain(KEVENT_FLAG_IMMEDIATE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return retq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;还有一些其他的方法，这里就不介绍了。有兴趣的可以看源码，太多了。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;5-Dispatch-I-O&quot;&gt;&lt;a href=&quot;#5-Dispatch-I-O&quot; class=&quot;headerlink&quot; title=&quot;5. Dispatch I/O&quot;&gt;&lt;/a&gt;5. Dispatch I/O&lt;/h4&gt;&lt;p&gt;我们可以使用 Dispatch I/O 快速读取一些文件，例如这样 ：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)readFile &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *filePath = &lt;span class=&quot;string&quot;&gt;@&quot;/.../青花瓷.m&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.readfile&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_fd_t fd = open(filePath.UTF8String, O_RDONLY,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_io_t fileChannel = dispatch_io_create(DISPATCH_IO_STREAM, fd, queue, ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        close(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableData&lt;/span&gt; *fileData = [&lt;span class=&quot;built_in&quot;&gt;NSMutableData&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_io_set_low_water(fileChannel, SIZE_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_io_read(fileChannel, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SIZE_MAX, queue, ^(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; done, dispatch_data_t  _Nullable data, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dispatch_data_get_size(data) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [fileData appendData:(&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *)data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (done) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithData:fileData encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;read file completed, string is :\n %@&quot;&lt;/span&gt;,str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ConcurrencyTest[&lt;span class=&quot;number&quot;&gt;41479&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5357296&lt;/span&gt;] read file completed, string is :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 天青色等烟雨 而我在等你&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;月色被打捞起 晕开了结局&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果读取大文件，我们可以进行切片读取，将文件分割多个片，放在异步线程中并发执行，这样会比较快一些。&lt;/p&gt;
&lt;p&gt;关于源码，简单看了一下，调度逻辑和之前的任务类似。然后读写操作，是调用的一些底层接口实现，这里就偷懒一下不详细说了。使用 Dispatch I/O，多数情况下是为了并发读取一个大文件，提高读取速度。&lt;/p&gt;
&lt;h4 id=&quot;6-Other&quot;&gt;&lt;a href=&quot;#6-Other&quot; class=&quot;headerlink&quot; title=&quot;6. Other&quot;&gt;&lt;/a&gt;6. Other&lt;/h4&gt;&lt;p&gt;上面已经讲了概览图中的大部分东西，还有一些未讲述，这里简单描述一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dispatch_object。GCD 用 C 函数实现的对象，不能通过集成 dispatch 类实现，也不能用 alloc 方法初始化。GCD 针对 dispatch_object 提供了一些接口，我们使用这些接口可以处理一些内存事件、取消和暂停操作、定义上下文和处理日志相关工作。dispatch_object 必须要手动管理内存，不遵循垃圾回收机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dispatch_time。在 GCD 中使用的时间对象，可以创建自定义时间，也可以使用 &lt;code&gt;DISPATCH_TIME_NOW&lt;/code&gt;、&lt;code&gt;DISPATCH_TIME_FOREVER&lt;/code&gt; 这两个系统给出的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上为 GCD 相关知识，这次使用的源码版本为最新版本 —— &lt;strong&gt;912.30.4.tar.gz&lt;/strong&gt;，和之前看的版本代码差距很大，因为代码量的增加，新版本代码比较乱，不过基本原理还是差不多的。曾经我一度认为，最上面的是最新版本…&lt;/p&gt;
&lt;h3 id=&quot;Operations&quot;&gt;&lt;a href=&quot;#Operations&quot; class=&quot;headerlink&quot; title=&quot;Operations&quot;&gt;&lt;/a&gt;Operations&lt;/h3&gt;&lt;p&gt;Operations 也是我们在并发编程中常用的一套 API，根据 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsinvocationoperation?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt; 划分的结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/Operations 结构图.png&quot; alt=&quot;Operations 结构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;NSBlockOperation&lt;/code&gt; 和 &lt;code&gt;NSInvocationOperation&lt;/code&gt; 是基于 &lt;code&gt;NSOperation&lt;/code&gt; 的子类化实现。相对于 GCD，Operations 的原理要稍微好理解一些，下面就将用法和原理介绍一下。&lt;/p&gt;
&lt;h4 id=&quot;1-NSOperation&quot;&gt;&lt;a href=&quot;#1-NSOperation&quot; class=&quot;headerlink&quot; title=&quot;1. NSOperation&quot;&gt;&lt;/a&gt;1. NSOperation&lt;/h4&gt;&lt;h5 id=&quot;基本使用-1&quot;&gt;&lt;a href=&quot;#基本使用-1&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h5&gt;&lt;p&gt;每一个 operation 可以认为是一个 task。&lt;code&gt;NSOperation&lt;/code&gt; 本事是一个抽象类，使用前需子类化。幸运的是，Apple 为我们实现了两个子类：&lt;code&gt;NSInvocationOperation&lt;/code&gt;、&lt;code&gt;NSBlockOperation&lt;/code&gt;。我们也可以自己去定义一个 operation。下面介绍一下基本使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建一个 &lt;code&gt;NSInvocationOperation&lt;/code&gt; 对象并在当前线程执行.&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSInvocationOperation&lt;/span&gt; *invocationOperation = [[&lt;span class=&quot;built_in&quot;&gt;NSInvocationOperation&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(log) object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [invocationOperation start];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建一个 &lt;code&gt;NSBlockOperation&lt;/code&gt; 对象并执行 （每个 block 不一定会在当前线程，也不一定在同一线程执行）.&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSBlockOperation&lt;/span&gt; *blockOpeartion = [&lt;span class=&quot;built_in&quot;&gt;NSBlockOperation&lt;/span&gt; blockOperationWithBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;block operation&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// 可以添加多个 block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [blockOpeartion addExecutionBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;other block opeartion&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [blockOpeartion start];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义一个 Operation。当我们不需要操作状态的时候，只需要实现 &lt;code&gt;main()&lt;/code&gt; 方法即可。需要操作状态的后面再说.&lt;/p&gt;
  &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BLOpeartion&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSOperation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BLOpeartion&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;BLOperation main method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	 	BLOperation *blOperation = [BLOperation new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	[blOperation start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个 operation 之间设置依赖.&lt;/p&gt;
   &lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSBlockOperation&lt;/span&gt; *blockOpeartion1 = [&lt;span class=&quot;built_in&quot;&gt;NSBlockOperation&lt;/span&gt; blockOperationWithBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;block operation1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSBlockOperation&lt;/span&gt; *blockOpeartion2 = [&lt;span class=&quot;built_in&quot;&gt;NSBlockOperation&lt;/span&gt; blockOperationWithBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;block operation2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 2 需要在 1 执行完之后再执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [blockOpeartion2 addDependency:blockOpeartion1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与队列相关的使用，后面再说.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;基本原理-2&quot;&gt;&lt;a href=&quot;#基本原理-2&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSOperation&lt;/code&gt; 内置了一个强大的状态机，一个 operation 从初始化到执行完毕这一生命周期，对应了各种状态。下面是在 &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/226/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WWDC 2015 Advanced NSOperations&lt;/a&gt; 出现的一张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/opeartion_status.png&quot; alt=&quot;opeartion_status&quot;&gt;&lt;/p&gt;
&lt;p&gt;operation 一开始是 Pending 状态，代表即将进入 Ready；进入 Ready 之后，代表任务可以执行；然后进入 Executing 状态；最后执行完成，进入 Finished 状态。过程中，除了 Finished 状态，在其他几个状态中都可以进行 Cancelled。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSOperation&lt;/code&gt; 并没有开源。但是 swift 开源了，在 swift 中它叫 &lt;code&gt;Opeartion&lt;/code&gt;，我们可以在 &lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/blob/master/Foundation/Operation.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 找到他的源码。我这里 copy 了一份：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Operation&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; lock = &lt;span class=&quot;type&quot;&gt;NSLock&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _queue: &lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 默认几个状态都是 false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _cancelled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _executing = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _finished = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _ready = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 用一个集合来保存依赖它的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _dependencies = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 初始化一些 dispatch_group 对象，来管理 operation 以及其依赖对象的 执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _group = &lt;span class=&quot;type&quot;&gt;DispatchGroup&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _depGroup = &lt;span class=&quot;type&quot;&gt;DispatchGroup&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _groups = [&lt;span class=&quot;type&quot;&gt;DispatchGroup&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _group.enter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; _leaveGroups&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// assumes lock is taken&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _groups.forEach() &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.leave() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _groups.removeAll()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _group.leave()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 默认实现的 start 方法中，执行 main 方法，线程安全，下同。执行前后设置 _executing。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !isCancelled &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _executing = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _executing = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        finish()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 默认实现的 finish 方法中，标记 _finished 状态。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _finished = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _leaveGroups()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; queue = _queue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            queue._operationFinished(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// main 方法默认空，需要子类去实现。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 调用 cancel 方法后，只是标记状态，具体操作在 main 中，调用 cancel 后也被认为是 finish。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cancelled = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** 几个状态的 get 方法，省略 */&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 是否为异步任务，默认为 false。这个方法在 OC 中永远不会去实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isAsynchronous: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置依赖，即将 operation 放到集合中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addDependency&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; op: Operation)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _dependencies.insert(op)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        op.lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _depGroup.enter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        op._groups.append(_depGroup)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        op.lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 默认队列优先级为  normal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; queuePriority: &lt;span class=&quot;type&quot;&gt;QueuePriority&lt;/span&gt; = .normal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; completionBlock: (() -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;)?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;waitUntilFinished&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _group.wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 线程优先级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; threadPriority: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// - Note: Quality of service is not directly supported here since there are not qos class promotions available outside of darwin targets.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; qualityOfService: &lt;span class=&quot;type&quot;&gt;QualityOfService&lt;/span&gt; = .&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; _waitUntilReady&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _depGroup.wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _ready = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码很简单，具体过程可以直接看注释，就不另说了。除此之外，我们可以看出，&lt;code&gt;Operation&lt;/code&gt; 总很多方法造作都加了锁，说明这个类是线程安全的，当我们对 &lt;code&gt;NSOperation&lt;/code&gt; 进行子类化时，重写方法要注意线程暗转问题。&lt;/p&gt;
&lt;h4 id=&quot;2-NSOperationQueue&quot;&gt;&lt;a href=&quot;#2-NSOperationQueue&quot; class=&quot;headerlink&quot; title=&quot;2. NSOperationQueue&quot;&gt;&lt;/a&gt;2. NSOperationQueue&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NSOperation&lt;/code&gt; 的很多花式操作，都是结合着 &lt;code&gt;NSOperationQueue&lt;/code&gt; 进行的。我们在使用的时候，也是两者结合着使用。下面对其进行详细分析。&lt;/p&gt;
&lt;h5 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;operation 放到 queue 中不用在手动调用 &lt;code&gt;start&lt;/code&gt; 方法去执行，operation 会自动执行。&lt;/li&gt;
&lt;li&gt;queue 可以设置最大并发数，当并发数量设置为 1 时，为串行队列；默认并发数量为无限大。&lt;/li&gt;
&lt;li&gt;queue 可以通过设置 &lt;code&gt;suspended&lt;/code&gt; 属性来&lt;strong&gt;暂停或者启动还未执行的 operation&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;queue 可以通过调用 &lt;code&gt;-[cancelAllOperations]&lt;/code&gt; 方法来取消队列中的任务。&lt;/li&gt;
&lt;li&gt;queue 可以通过 &lt;code&gt;mainQueue&lt;/code&gt; 方法来回到主队列（主线程）；可以通过 &lt;code&gt;currentQueue&lt;/code&gt; 方法来获取当前队列。&lt;/li&gt;
&lt;li&gt;更多方法，请参考 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/nsoperationqueue?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用例子：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)testOperationQueue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSOperationQueue&lt;/span&gt; *operationQueue = [&lt;span class=&quot;built_in&quot;&gt;NSOperationQueue&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 设置最大并发数量为 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [operationQueue setMaxConcurrentOperationCount:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInvocationOperation&lt;/span&gt; *invocationOpeartion = [[&lt;span class=&quot;built_in&quot;&gt;NSInvocationOperation&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(log) object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [operationQueue addOperation:invocationOpeartion];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [operationQueue addOperationWithBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;block operation&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 回到主线程执行任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[&lt;span class=&quot;built_in&quot;&gt;NSOperationQueue&lt;/span&gt; mainQueue] addOperationWithBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;execute in main thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 暂停还未开始执行的任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    operationQueue.suspended = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 取消所有任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [operationQueue cancelAllOperations];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有一个问题要特别说明一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;NSOperationQueue&lt;/code&gt; 和 GCD 中的队列不同。GCD 中的队列是遵循 FIFO 原则，先加入队列的先执行；&lt;code&gt;NSOperationQueue&lt;/code&gt; 中的任务，根据谁先进入到 &lt;code&gt;Ready&lt;/code&gt; 状态，谁先执行。如果有多个任务同时达到 &lt;code&gt;Ready&lt;/code&gt; 状态，那么根据优先级来执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如下面的任务中，4 先到达了 &lt;code&gt;Ready&lt;/code&gt; 状态，4 先执行。并不是按照 1，2，3… 顺序执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/concurrency-programming/Operation_Queue.png&quot; alt=&quot;Operation_Queue&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;基本原理-3&quot;&gt;&lt;a href=&quot;#基本原理-3&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h5&gt;&lt;p&gt;我们依然是在 swift 中找到相关源码，然后来进行分析：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 默认最大并发数量为 int 最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OperationQueue&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; defaultMaxConcurrentOperationCount: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用一个 list 来保存各个优先级的 operation。调用其中的方法对 operation 进行增删等操作。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _OperationList &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; veryLow = [&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; low = [&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; normal = [&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; high = [&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; veryHigh = [&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; all = [&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; operation: Operation)&lt;/span&gt;&lt;/span&gt; &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; operation: Operation)&lt;/span&gt;&lt;/span&gt; &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;? &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; all.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&amp;lt;T&amp;gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; transform: &lt;span class=&quot;params&quot;&gt;(Operation)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;rethrows&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; all.&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(transform)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OperationQueue&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用一个信号量的来控制并发数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; __concurrencyGate: &lt;span class=&quot;type&quot;&gt;DispatchSemaphore&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; __underlyingQueue: &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;OperationQueueKey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            oldValue?.setSpecific(key: key, value: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __underlyingQueue?.setSpecific(key: key, value: &lt;span class=&quot;type&quot;&gt;Unmanaged&lt;/span&gt;.passUnretained(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _underlyingQueue: &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; queue = __underlyingQueue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 信号量的值根据最大并发数量来确定。每当执行一个任务，wait 信号量减一，signal 信号量加一，当信号量为0时，一直等待，直接大于 0 才会正常执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; maxConcurrentOperationCount == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                attr = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                __concurrencyGate = &lt;span class=&quot;type&quot;&gt;DispatchSemaphore&lt;/span&gt;(value: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                attr = .concurrent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; maxConcurrentOperationCount != &lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;.defaultMaxConcurrentOperationCount &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    __concurrencyGate = &lt;span class=&quot;type&quot;&gt;DispatchSemaphore&lt;/span&gt;(value:maxConcurrentOperationCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; queue = &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;(label: effectiveName, attributes: attr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _suspended &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                queue.suspend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __underlyingQueue = queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; queue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 出队列，每个任务执行时拿出队列执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; _dequeueOperation&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; op = _operations.dequeue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; op&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOperation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; op: Operation)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addOperations([op], waitUntilFinished: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 主要执行方法。先判断 operation 是否 ready，处于 ready 后判断是否 cancel。没有 cancel 则执行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; _runOperation&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; op = _dequeueOperation() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !op.isCancelled &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                op._waitUntilReady()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !op.isCancelled &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    op.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将任务加到队列中。如果不指定任务优先级，执行的还快一些。否则需要对不同优先级进行划分，然后执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOperations&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; ops: [Operation], waitUntilFinished wait: Bool)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; waitGroup: &lt;span class=&quot;type&quot;&gt;DispatchGroup&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; wait &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            waitGroup = &lt;span class=&quot;type&quot;&gt;DispatchGroup&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 将 operation 依依加入 list，根据优先级保存到不同数组中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ops.forEach &amp;#123; (operation: &lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            operation._queue = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _operations.insert(operation)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 遍历执行，使用了 diapatch group，控制 enter 和 leave&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ops.forEach &amp;#123; (operation: &lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; group = waitGroup &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                group.enter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 通过信号量来控制并发数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; block = &lt;span class=&quot;type&quot;&gt;DispatchWorkItem&lt;/span&gt;(flags: .enforceQoS) &amp;#123; () -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sema = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;._concurrencyGate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    sema.wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;._runOperation()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    sema.signal()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;._runOperation()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; group = waitGroup &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    group.leave()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _underlyingQueue.async(group: queueGroup, execute: block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; group = waitGroup &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            group.wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; _operationFinished&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; operation: Operation)&lt;/span&gt;&lt;/span&gt; &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addOperation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; block: @escaping &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Swift&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt;) &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 返回值不一定准确&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; operations: [&lt;span class=&quot;type&quot;&gt;Operation&lt;/span&gt;] &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 返回值不一定准确&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; operationCount: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maxConcurrentOperationCount: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;.defaultMaxConcurrentOperationCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// suppend 属性的 get &amp;amp; set 方法。默认不暂停&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _suspended = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isSuspended: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// operation 在获取系统资源时的优先级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; qualityOfService: &lt;span class=&quot;type&quot;&gt;QualityOfService&lt;/span&gt; = .&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 依次调用每个 operation 的 cancel 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cancelAllOperations&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;waitUntilAllOperationsAreFinished&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        queueGroup.wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;OperationQueueKey&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;DispatchSpecificKey&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Unmanaged&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;&amp;gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通过使用 GCD 中的 getSpecific 方法获取当前队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;current&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;OperationQueue&lt;/span&gt;? &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;DEPLOYMENT_ENABLE_LIBDISPATCH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; specific = &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;.getSpecific(key: &lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;OperationQueueKey&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _CFIsMainThread() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;.main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; specific.takeUnretainedValue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 定义主队列，最大并发数量为 1，获取主队列时将这个值返回  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _main = &lt;span class=&quot;type&quot;&gt;OperationQueue&lt;/span&gt;(_queue: .main, maxConcurrentOperations: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;OperationQueue&lt;/span&gt; &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码很长，但是简单，可以直接通过注释来理解了。这里屡一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将每个 operation 加入到队列时，会根据优先级将 operation 分类存入 list 中，根据优先级执行。如果都不设置优先级，执行起来比较快一些。&lt;/li&gt;
&lt;li&gt;加入到队列，会遍历每个 operation，取出进入 &lt;code&gt;Ready&lt;/code&gt; 状态且没被 &lt;code&gt;Cancel&lt;/code&gt; 的依次执行。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;concurrencyGate&lt;/code&gt; 这个信号量来控制并发数量。每当执行一个任务，wait 信号量减一，signal 信号量加一，当信号量为0时，一直等待，直接大于 0 才会正常执行。&lt;/li&gt;
&lt;li&gt;每个方法中基本都加了锁，来保证线程安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;自定义-NSOperation&quot;&gt;&lt;a href=&quot;#自定义-NSOperation&quot; class=&quot;headerlink&quot; title=&quot;自定义 NSOperation&quot;&gt;&lt;/a&gt;自定义 NSOperation&lt;/h5&gt;&lt;p&gt;之前说了自定义普通的 &lt;code&gt;NSOperation&lt;/code&gt;，只需要重写 &lt;code&gt;main&lt;/code&gt; 方法就可以了,但是因为我们没有处理并发情况，线程执行结束操作，KVO 机制，所以这种普通的不建议用来做并发任务。下面讲一下如何自定义并行的 &lt;code&gt;NSOperation&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;必须要实现的一些方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; 方法，在你想要执行的线程中调用此方法。&lt;strong&gt;不需要调用 super 方法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; 方法，在 &lt;code&gt;start&lt;/code&gt; 方法中调用，任务主体。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isExecuting&lt;/code&gt; 方法，是否正在执行，要实现 KVO 机制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isConcurrent&lt;/code&gt; 方法，已经弃用，由 &lt;code&gt;isAsynchronous&lt;/code&gt; 来代替。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isAsynchronous&lt;/code&gt; 方法，在并发任务中，需要返回 YES。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BLOperation&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; executing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BLOperation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synthesize&lt;/span&gt; executing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synthesize&lt;/span&gt; finished;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        executing = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        finished = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)start &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isCancelled]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isFinished&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        finished = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isFinished&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isExecuting&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; detachNewThreadSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(main) toTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; withObject:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    executing = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isExecuting&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;main begin&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;custom operation&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;currentThread = %@&quot;&lt;/span&gt;, [&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; currentThread]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;mainThread    = %@&quot;&lt;/span&gt;, [&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; mainThread]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isFinished&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isExecuting&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            executing = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            finished = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isExecuting&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didChangeValueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;isFinished&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;@catch&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; *exception) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;exception is %@&quot;&lt;/span&gt;, exception);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;main end&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isExecuting &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; executing;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isFinished &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; finished;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)isAsynchronous &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 &lt;code&gt;NSBlockOpeartion&lt;/code&gt;，主要实现了 &lt;code&gt;main&lt;/code&gt; 方法，然后用一个数组保存加进来的其他 block，源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;open class BlockOperation: Operation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    typealias ExecutionBlock = () -&amp;gt; Void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    internal var _block: () -&amp;gt; Void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    internal var _executionBlocks = [ExecutionBlock]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public init(block: @escaping () -&amp;gt; Void) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _block = block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override open func main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let block = _block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let executionBlocks = _executionBlocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        block()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        executionBlocks.forEach &amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open func addExecutionBlock(_ block: @escaping () -&amp;gt; Void) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _executionBlocks.append(block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open var executionBlocks: [() -&amp;gt; Void] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let blocks = _executionBlocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; blocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 &lt;code&gt;NSOperation&lt;/code&gt; 的相关东西，到此结束。&lt;/p&gt;
&lt;h3 id=&quot;在开发中的一些问题&quot;&gt;&lt;a href=&quot;#在开发中的一些问题&quot; class=&quot;headerlink&quot; title=&quot;在开发中的一些问题&quot;&gt;&lt;/a&gt;在开发中的一些问题&lt;/h3&gt;&lt;p&gt;相对于 API 的使用和基本原理的了解，我认为最重要的还是这一部分。毕竟我们还是要拿这些东西来开发的。并发编程中有很多坑，这里简单介绍一些。&lt;/p&gt;
&lt;h4 id=&quot;1-NSNotification-与多线程问题&quot;&gt;&lt;a href=&quot;#1-NSNotification-与多线程问题&quot; class=&quot;headerlink&quot; title=&quot;1. NSNotification 与多线程问题&quot;&gt;&lt;/a&gt;1. NSNotification 与多线程问题&lt;/h4&gt;&lt;p&gt;我们都知道，&lt;code&gt;NSNotification&lt;/code&gt; 在哪个线程 post，最终就会在哪个线程执行。如果我们不是在主线程 post 的，但是却在主线程接收的，而且我们期望 selector 在主线程执行。这时候我们需要注意下，在 selector 需要 dispatch 到主线程才可以。当然你也可以使用 &lt;code&gt;addObserverForName:object:queue:usingBlock:&lt;/code&gt; 来指定执行 block 的 queue。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BLPostNotification&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)postNotification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.post.notification&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 从非主线程发送通知 （通知名字最好定义成一个常量）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] postNotificationName:&lt;span class=&quot;string&quot;&gt;@&quot;downloadImage&quot;&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImageViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(show) name:&lt;span class=&quot;string&quot;&gt;@&quot;downloadImage&quot;&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)showImage &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 需要 dispatch 到主线程更新 UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// update UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-NSTimer-与多线程问题&quot;&gt;&lt;a href=&quot;#2-NSTimer-与多线程问题&quot; class=&quot;headerlink&quot; title=&quot;2. NSTimer 与多线程问题&quot;&gt;&lt;/a&gt;2. NSTimer 与多线程问题&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;NSTimer&lt;/code&gt; 时，在哪个线程生成的 timer，就在哪个线程销毁，否则会有意想不到的结果。官方这样描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, for a repeating timer, you must invalidate the timer object yourself by calling its invalidate method. Calling this method requests the removal of the timer from the current run loop; as a result, &lt;strong&gt;you should always call the invalidate method from the same thread on which the timer was installed&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BLTimerTest&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; *timer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BLTimerTest&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _queue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.bool.timer.test&quot;&lt;/span&gt;, DISPATCH_QUEUE_SERIAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)installTimer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer = [&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;f repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; block:^(&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; * _Nonnull timer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;test timer&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)clearTimer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer isValid]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer invalidate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-Dispatch-Once-死锁问题&quot;&gt;&lt;a href=&quot;#3-Dispatch-Once-死锁问题&quot; class=&quot;headerlink&quot; title=&quot;3. Dispatch Once 死锁问题&quot;&gt;&lt;/a&gt;3. Dispatch Once 死锁问题&lt;/h4&gt;&lt;p&gt;在开发中，我们经常使用 &lt;code&gt;dispatch_once&lt;/code&gt;，但是递归调用会造成死锁。例如下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dispatchOnceTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dispatchOnceTest];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于为什么会死锁，上文介绍 Dispatch Once 的时候已经说明了，这里就不多做介绍了。提醒一下使用的时候要注意，不要造成递归调用。&lt;/p&gt;
&lt;h4 id=&quot;4-Dispatch-Group-问题&quot;&gt;&lt;a href=&quot;#4-Dispatch-Group-问题&quot; class=&quot;headerlink&quot; title=&quot;4. Dispatch Group 问题&quot;&gt;&lt;/a&gt;4. Dispatch Group 问题&lt;/h4&gt;&lt;p&gt;在使用 &lt;code&gt;dispatch_group&lt;/code&gt; 的时候，&lt;code&gt;dispatch_group_enter(taskGroup)&lt;/code&gt; 和 &lt;code&gt;dispatch_group_leave(taskGroup)&lt;/code&gt; 一定要成对，否则也会出现崩溃。大多数情况下我们都会注意，但是有时候可能会疏忽。例如多层 for loop 时 ：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)testDispatchGroup &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *path = &lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; *fileManager = [&lt;span class=&quot;built_in&quot;&gt;NSFileManager&lt;/span&gt; defaultManager];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *folderList = [fileManager contentsOfDirectoryAtPath:path error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_group_t taskGroup = dispatch_group_create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *folderName &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; folderList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatch_group_enter(taskGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *folderPath = [&lt;span class=&quot;string&quot;&gt;@&quot;path&quot;&lt;/span&gt; stringByAppendingPathComponent:folderName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *fileList = [fileManager contentsOfDirectoryAtPath:folderPath error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *fileName &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; fileList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(_queue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 异步任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dispatch_group_leave(taskGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的 &lt;code&gt;dispatch_group_enter(taskGroup)&lt;/code&gt; 在第一层 for loop 中，而 &lt;code&gt;dispatch_group_leave(taskGroup)&lt;/code&gt; 在第二层 for loop 中，两者的关系是一对多，很容造成崩溃。有时候嵌套层级太多，很容易忽略这个问题。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;关于 iOS 并发编程，就总结到这里。后面如果有一些 best practices 我会更新进来。另外，因为文章比较长，可能会出现一个错误，欢迎指正，我会对此加以修改。&lt;/p&gt;
&lt;h3 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://bestswifter.com/ios-lock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 iOS 开发中的锁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于 @synchronized，这儿比你想知道的还要多&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bestswifter.com/deep-gcd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 GCD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jimmyis.in/dispatch_once/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GCD源码分析2 —— dispatch_once篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lingyuncxb.com/2018/02/10/GCD%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%906%20%E2%80%94%E2%80%94%20dispatch-source%E7%AF%87/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GCD源码分析6 —— dispatch_source篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/dispatch?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dispatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/foundation/task_management?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Task Management - Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-corelibs-foundation/tree/master/Foundation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift-corelibs-foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/226/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Advanced NSOperations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;无论在哪个平台，并发编程都是一个让人头疼的问题。庆幸的是，相对于服务端，客户端的并发编程简单了许
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS 中的事件响应与处理</title>
    <link href="http://yoursite.com/2018/03/25/iOS%20%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E4%B8%8E%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/03/25/iOS 中的事件响应与处理/</id>
    <published>2018-03-25T13:00:45.000Z</published>
    <updated>2018-05-13T13:32:44.421Z</updated>
    
    <content type="html">&lt;p&gt;在使用 iPhone 过程中，会产生很多交互事件，例如点击、长按、摇晃、3D Touch 等。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;这些事件都需要 iOS 系统去响应并作出处理。这篇文章主要讲解一下系统如何去响应并处理这些事件。&lt;/p&gt;
&lt;h3 id=&quot;事件种类&quot;&gt;&lt;a href=&quot;#事件种类&quot; class=&quot;headerlink&quot; title=&quot;事件种类&quot;&gt;&lt;/a&gt;事件种类&lt;/h3&gt;&lt;p&gt;为满足用户需求，iOS 提供了多种事件，这里先说一下具体有哪些事件，现在脑中有一个清晰的轮廓。iOS 中的事件大致可以分为如下几类：&lt;/p&gt;
&lt;h4 id=&quot;1-触摸事件&quot;&gt;&lt;a href=&quot;#1-触摸事件&quot; class=&quot;headerlink&quot; title=&quot;1.触摸事件&quot;&gt;&lt;/a&gt;1.触摸事件&lt;/h4&gt;&lt;p&gt;触摸事件主要来源于人体触摸和通过 Apple Pencil (iPad) 触摸。触摸事件也分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手势事件&lt;ul&gt;
&lt;li&gt;长按手势 (UILongPressGestureRecognizer)&lt;/li&gt;
&lt;li&gt;拖动手势 (UIPanGestureRecognizer)&lt;/li&gt;
&lt;li&gt;捏合手势 (UIPinchGestureRecognizer)&lt;/li&gt;
&lt;li&gt;响应屏幕边缘手势 (UIScreenEdgePanGestureRecognizer)&lt;/li&gt;
&lt;li&gt;轻扫手势 (UISwipeGestureRecognizer)&lt;/li&gt;
&lt;li&gt;旋转手势 (UIRotationGestureRecognizer)&lt;/li&gt;
&lt;li&gt;点击手势 (UITapGestureRecognizer)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义手势&lt;/li&gt;
&lt;li&gt;点击 button 相关&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-运动事件&quot;&gt;&lt;a href=&quot;#2-运动事件&quot; class=&quot;headerlink&quot; title=&quot;2.运动事件&quot;&gt;&lt;/a&gt;2.运动事件&lt;/h4&gt;&lt;p&gt;iPhone 内置陀螺仪、加速器和磁力仪，可以感知手机的运动情况。iOS 提供了 &lt;a href=&quot;https://developer.apple.com/documentation/coremotion?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Motion&lt;/a&gt; 框架来处理这些运动事件。根据这些内置硬件，运动事件大致分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;陀螺仪相关：陀螺仪会测量设备绕 X-Y-Z 轴的自转速率，倾斜角度等。通过 &lt;a href=&quot;https://developer.apple.com/documentation/coremotion?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Motion&lt;/a&gt; 提供的一些 API 可以获取到这些数据，并进行处理；通过系统可以通过内置陀螺仪获取设备的朝向，以此对 App UI 做出调整。&lt;/li&gt;
&lt;li&gt;加速器相关：设备可以通过内置加速器测量设备在 X-Y-Z 轴速度的改变； &lt;a href=&quot;https://developer.apple.com/documentation/coremotion?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Motion&lt;/a&gt; 提供了高度计（CMAltimeter）、计步器（CMPedometer） 等对象，来获取并处理这些产生的数据。&lt;/li&gt;
&lt;li&gt;磁力仪相关：使用磁力仪可以获取当前设备的磁极、方向、经纬度等数据，这些数据多用于地图导航开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-远程控制事件&quot;&gt;&lt;a href=&quot;#3-远程控制事件&quot; class=&quot;headerlink&quot; title=&quot;3.远程控制事件&quot;&gt;&lt;/a&gt;3.远程控制事件&lt;/h4&gt;&lt;p&gt;远程控制事件指通过耳机去控制手机上的一些操作。目前 iOS 仅提供我们远程控制音频和视频的权限。即对音频实现暂停/播放、上一曲/下一曲、快进/快退操作。可以在 &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uieventsubtype?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIEventSubtype&lt;/a&gt; 中看到这些事件，一般用于开发播放器相关。&lt;/p&gt;
&lt;h4 id=&quot;4-按压事件&quot;&gt;&lt;a href=&quot;#4-按压事件&quot; class=&quot;headerlink&quot; title=&quot;4.按压事件&quot;&gt;&lt;/a&gt;4.按压事件&lt;/h4&gt;&lt;p&gt;iOS 9 提供了 3D Touch 事件，通过使用这个功能我们可以做如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quick Actions，重压 App icon 可以进行很多快捷操作。&lt;/li&gt;
&lt;li&gt;Peek and Pop，使用这个功能对文件进行预览和其他操作，可以在手机自带 “信息” 里面试验。&lt;/li&gt;
&lt;li&gt;Pressure Sensitivity，压力响应敏感，可以在备忘录中选择画笔，按压不同力度画出来的颜色深浅不一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;事件响应&quot;&gt;&lt;a href=&quot;#事件响应&quot; class=&quot;headerlink&quot; title=&quot;事件响应&quot;&gt;&lt;/a&gt;事件响应&lt;/h3&gt;&lt;p&gt;当 iPhone 接收到一个事件时，处理过程大体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/iOS 事件响应.png&quot; alt=&quot;iOS 事件响应&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当你通过一个动作（触摸/摇晃/线控）等触发一个事件，这时候会唤起处于休眠状态的 cup。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事件会通过使用 &lt;code&gt;IOKit.framework&lt;/code&gt; 来封装成 &lt;code&gt;IOHIDEvent&lt;/code&gt; 对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;IOKit.framework&lt;/code&gt; 是一个系统框架的集合，用来驱动一些系统事件。&lt;code&gt;IOHIDEvent&lt;/code&gt; 中的 HID 代表 &lt;strong&gt;Human Interface Device，即人机交互驱动&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后系统通过 mach port(IPC 进程间通信) 将 &lt;code&gt;IOHIDEvent&lt;/code&gt; 对象转发给 SpringBoard.app。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SpringBoard.app 是 iOS 系统桌面 App，它只接收按键、触摸、加速、接近传感器等几种 Event。SpringBoard.app 会找到可以响应这个事件的 App，并通过 mach port(IPC 进程间通信) 将 &lt;code&gt;IOHIDEvent&lt;/code&gt; 对象转发给这个 App。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前台 App 主线程 Runloop 接收到 SpringBoard.app 转发过来的消息之后，触发对应的 mach port 的 Source1 回调 &lt;code&gt;__IOHIDEventSystemClientQueueCallback()&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source1 回调内部触发了 Source0 回调 &lt;code&gt;__UIApplicationHandleEventQueue()&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Source0 回掉内部，将 &lt;code&gt;IOHIDEvent&lt;/code&gt; 对象转化为 &lt;code&gt;UIEvent&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Soucre0 回调内部调用 &lt;code&gt;UIApplication&lt;/code&gt; 的 &lt;code&gt;+[sendEvent:]&lt;/code&gt; 方法，将 &lt;code&gt;UIEvent&lt;/code&gt; 传给&lt;code&gt;UIWindow&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;UIWindow&lt;/code&gt; 接收到这个事件后，开始传递事件，就是下一节要说的问题了。&lt;/p&gt;
&lt;h3 id=&quot;事件传递&quot;&gt;&lt;a href=&quot;#事件传递&quot; class=&quot;headerlink&quot; title=&quot;事件传递&quot;&gt;&lt;/a&gt;事件传递&lt;/h3&gt;&lt;p&gt;&lt;code&gt;UIWindow&lt;/code&gt; 的收到的事件，有的是通过响应链传递，找到合适的 view 进行处理的；有的是不用传递，直接用 first responder 来处理的。这里先介绍使用响应链传递的过程，之后再说不通过响应链传递的一些事件。&lt;/p&gt;
&lt;p&gt;事件传递大致可以分为三个阶段：Hit-Testing（寻找合适的 view）、Recognize Gesture（响应应手势）、Response Chain（touch 事件传递）。通过手去触摸屏幕所产生的事件，都是通过这三步去传递的，例如上文所说的&lt;strong&gt;触摸事件&lt;/strong&gt;和&lt;strong&gt;按压事件&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-Hit-Testing&quot;&gt;&lt;a href=&quot;#1-Hit-Testing&quot; class=&quot;headerlink&quot; title=&quot;1. Hit-Testing&quot;&gt;&lt;/a&gt;1. Hit-Testing&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;这一过程主要来确定由哪个视图来首先处理 UITouch 事件&lt;/strong&gt;。当你点击一个 view，事件传到 UIWindow 这一步之后，会去遍历 view 层级，直至找到那个合适的 view 来处理这个事件，这一过程也叫做 &lt;code&gt;Hit-Testing&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;遍历方式&quot;&gt;&lt;a href=&quot;#遍历方式&quot; class=&quot;headerlink&quot; title=&quot;遍历方式&quot;&gt;&lt;/a&gt;遍历方式&lt;/h5&gt;&lt;p&gt;既然遍历，就会有一定的顺序。系统会根据添加 view 的前后顺序，确定 view 在 subviews 数组中的顺序。然后根据这个顺序将视图层级转化为图层树，针对这个树，使用&lt;strong&gt;倒着进行前序深度遍历&lt;/strong&gt;的算法，进行遍历。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用 storyboard 添加视图，添加顺序等同于使用 addSubview() 的方式添加视图。即先拖入的属于 subviews 数组中第 0 个元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如下面一个图层，我点击了红色箭头标注的地方：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/view层级图.png&quot; alt=&quot;view层级图&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个图层，转化为图层树如下，同时我也将遍历顺序标记出来了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/View 层级树状图.png&quot; alt=&quot;view层级树状图&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上面图层树中，View A,B,C 平级，以 A,B,C 先后顺序加入。所以当我点击一个 point 的时候，会从 View C 开始遍历；判断点不在 View C 上，转向 View B；判断点在 View B 上，转向右子树 View b2;判断点不在 View b2 上，转向 View b1; 点在 View b1 上，且其没有子视图，那么 View b1 为最合适的点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候你点击一次，会发现 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 被调用了多次，我也不清楚为什么，但是这并不影响事件传递。可能你的手指点击时有轻微移动产生了多个事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;hitTest-withEvent-方法实现原理&quot;&gt;&lt;a href=&quot;#hitTest-withEvent-方法实现原理&quot; class=&quot;headerlink&quot; title=&quot;[hitTest:withEvent:] 方法实现原理&quot;&gt;&lt;/a&gt;[hitTest:withEvent:] 方法实现原理&lt;/h5&gt;&lt;p&gt;UIWindow 拿到事件之后，会先将事件传递给图层树中距离最靠近 UIWindow 那一层最后一个 view，然后调用其 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt;。注意这里是**先将视图传递给 view，再调用其 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 方法。并遵循这样的原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果点不在这个视图内，则去遍历其他视图。&lt;/li&gt;
&lt;li&gt;如果点击在这个视图内，但是其还有自视图，那么将事件传递给自视图，并且调用自视图的 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果点击在这个视图内，并且这个视图没有子视图，那么 return self，即它就是那个最合适的视图。&lt;/li&gt;
&lt;li&gt;如果点击在这个视图内，并且这个视图没有子视图，但是不想作为处理事件的 view，可以 return nil，事件由父视图处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有几种方式，设置了之后&lt;strong&gt;视图和其自视图&lt;/strong&gt;不会再接收 touch 事件。分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视图被隐藏：self.hidden = YES.&lt;/li&gt;
&lt;li&gt;视图不允许响应交互事件：self.userInteractionEnabled = NO.&lt;/li&gt;
&lt;li&gt;视图的 alpha 在 0~0.01 之间。几乎透明。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，我们可以得出 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 方法实现大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)hitTest:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;)point withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 是否响应 touch 事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isUserInteractionEnabled || &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isHidden || &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.alpha &amp;lt;= &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 点是否在 view 内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; pointInside:point withEvent:event]) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subview &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.subviews reverseObjectEnumerator]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; convertedPoint = [subview convertPoint:point fromView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// point 进行坐标转化，递归调用，寻找自视图，直到返回 nil 或者 self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *hitTestView = [subview hitTest:convertedPoint withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hitTestView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hitTestView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;重写-hitTest-withEvent&quot;&gt;&lt;a href=&quot;#重写-hitTest-withEvent&quot; class=&quot;headerlink&quot; title=&quot;重写 [hitTest:withEvent:]&quot;&gt;&lt;/a&gt;重写 [hitTest:withEvent:]&lt;/h5&gt;&lt;h6 id=&quot;当你想中断传递时&quot;&gt;&lt;a href=&quot;#当你想中断传递时&quot; class=&quot;headerlink&quot; title=&quot;当你想中断传递时&quot;&gt;&lt;/a&gt;当你想中断传递时&lt;/h6&gt;&lt;p&gt;当时想在当前 view 处理事件，不想在对 subview 进行遍历，可以直接重写 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 方法并 return self 即可。不过一般没有这样做的，这样会影响事件传递，产生一些 bug。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为遍历顺序在层级树中是从上向下，但是反应到视图上面，是从里向外传，所以这种情况也可以理解为 “透传”，即你点击了 View b2，但是最终响应的是 View B。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;当你想增加视图的-touch-区域&quot;&gt;&lt;a href=&quot;#当你想增加视图的-touch-区域&quot; class=&quot;headerlink&quot; title=&quot;当你想增加视图的 touch 区域&quot;&gt;&lt;/a&gt;当你想增加视图的 touch 区域&lt;/h6&gt;&lt;p&gt;在实际开发中，有些 button 面积很小，不容易点击上。这时候你想扩大 touch 响应区域。可以通过重写 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 方法实现。例如下图中的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/扩大touch区域.png&quot; alt=&quot;扩大touch区域&quot;&gt;&lt;/p&gt;
&lt;p&gt;实现代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)hitTest:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;)point withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isUserInteractionEnabled || &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isHidden || &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.alpha &amp;lt;= &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; inset = &lt;span class=&quot;number&quot;&gt;45.0&lt;/span&gt;f - &lt;span class=&quot;number&quot;&gt;78.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; touchRect = &lt;span class=&quot;built_in&quot;&gt;CGRectInset&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds, inset, inset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;CGRectContainsPoint&lt;/span&gt;(touchRect, point)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subview &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.subviews reverseObjectEnumerator]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; convertedPoint = [subview convertPoint:point fromView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *hitTestView = [subview hitTest:convertedPoint withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hitTestView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hitTestView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，你也可以通过&lt;strong&gt;重写父视图的 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 方法实现&lt;/strong&gt;。很多 App 都有这样的需求，例如自定义 UITabbar 时，中间的那个按钮一般比较大，超出了 UITabbar 高度，有时需要重写 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 来处理响应范围。&lt;/p&gt;
&lt;h6 id=&quot;当你想指定某个-view-响应事件&quot;&gt;&lt;a href=&quot;#当你想指定某个-view-响应事件&quot; class=&quot;headerlink&quot; title=&quot;当你想指定某个 view 响应事件&quot;&gt;&lt;/a&gt;当你想指定某个 view 响应事件&lt;/h6&gt;&lt;p&gt;有时候在一个父视图中有多个子视图 A,B,C，无论点击 B 还是 C，你都想让 A 响应。例如 App Store 中的预览 App 页面就属于这种类型：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/iOS-event-response/AppStore.PNG&quot; width=&quot;375&quot; height=&quot;670&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;当你点击两侧边缘的时候，你想让中间的 UIScrollView 去响应，这时候可以通过重写 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 方法实现。&lt;/p&gt;
&lt;p&gt;转化为模型如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/ScorllView.png&quot; alt=&quot;ScrollView&quot;&gt;&lt;/p&gt;
&lt;p&gt;当我点击边缘视图 B 和 C 时，我希望能够响应到 UIScrollView 上面，即可以正常滚动，这时候可以重写&lt;strong&gt;父视图&lt;/strong&gt; 的 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt;，指定响应 View。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)hitTest:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;)point withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *hitTestView = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; hitTest:point withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hitTestView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hitTestView = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scrollView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hitTestView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上即 Hit-Testing 过程相关知识，如果这一过程最终都没有找到合适的 View，那么本次事件将被丢弃。当你想改变遍历路径时，你可以考虑重写 &lt;code&gt;[hitTest:withEvent:]&lt;/code&gt; 以达到你想要的结果。&lt;/p&gt;
&lt;h4 id=&quot;2-Gesture-Recognizer&quot;&gt;&lt;a href=&quot;#2-Gesture-Recognizer&quot; class=&quot;headerlink&quot; title=&quot;2. Gesture Recognizer&quot;&gt;&lt;/a&gt;2. Gesture Recognizer&lt;/h4&gt;&lt;p&gt;Gesture Recognizer（手势识别器）是系统封装的一些类，用来识别一系列的常见手势，例如点击、长按等。在上一步中确定了合适的 View 之后，&lt;strong&gt;UIWindow 会首先将 touches 事件先传递给 Gesture Recognizer，再传递给视图&lt;/strong&gt;，这一点你可以通过自定义一个手势，并将手势添加到 View 上来验证。你会发现会先调用自定义手势中的一系列 touches 方法，再调用视图自己的一系列 touches 方法。&lt;/p&gt;
&lt;p&gt;Gesture Recognizer 有一套自己的 touches 方法和状态转换机制。一个手势的响应到结束，流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/Gesture_Recognizer状态转换.png&quot; alt=&quot;Gesture_Recognizer状态转换&quot;&gt;&lt;/p&gt;
&lt;p&gt;系统为 Gesture Recognizer 提供了如下几种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UIGestureRecognizerStatePossible : 未确定状态。&lt;/li&gt;
&lt;li&gt;UIGestureRecognizerStateBegan : 接收到 touches，手势开始。&lt;/li&gt;
&lt;li&gt;UIGestureRecognizerStateChanged : 接收到 touches，手势改变。&lt;/li&gt;
&lt;li&gt;UIGestureRecognizerStateEnded : 手势识别结束，在下个 run loop 前调用对应的 action 方法。&lt;/li&gt;
&lt;li&gt;UIGestureRecognizerStateCancelled : 手势取消，恢复到 possible 状态。&lt;/li&gt;
&lt;li&gt;UIGestureRecognizerStateFailed : 手势识别失败，恢复到 possible 状态。&lt;/li&gt;
&lt;li&gt;UIGestureRecognizerStateRecognized : 等同于 UIGestureRecognizerStateEnded。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当接收到一个系统定义的手势，首先会调用 recognizer 的 &lt;code&gt;[touchesBegan:withEvent:]&lt;/code&gt; 方法，这时候 recognizer 的状态是未确定的；然后调用 &lt;code&gt;[touchesMoved:withEvent:]&lt;/code&gt; 方法，依然没有识别成功；接下来要么调用 &lt;code&gt;[touchesEnded:withEvent:]&lt;/code&gt; 方法，手势识别成功，调用对应的 action；要么调用 &lt;code&gt;[touchesCancelled:withEvent:]&lt;/code&gt; 方法，手势识别失败。&lt;/p&gt;
&lt;p&gt;官方也给出了一张比较明晰的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs-assets.developer.apple.com/published/7c21d852b9/08b952fe-6f46-41eb-8b8a-4830c1d48842.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;大致过程如此，但是细节上还有些不同。关于状态转换过程，官方给了几篇不错的文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/implementing_a_custom_gesture_recognizer/about_the_gesture_recognizer_state_machine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About the Gesture Recognizer State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/implementing_a_custom_gesture_recognizer/implementing_a_discrete_gesture_recognizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Implementing a Discrete Gesture Recognizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/touches_presses_and_gestures/implementing_a_custom_gesture_recognizer/implementing_a_continuous_gesture_recognizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Implementing a Continuous Gesture Recognizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-Response-Chain&quot;&gt;&lt;a href=&quot;#3-Response-Chain&quot; class=&quot;headerlink&quot; title=&quot;3. Response Chain&quot;&gt;&lt;/a&gt;3. Response Chain&lt;/h4&gt;&lt;p&gt;上面也涉及到了，对于 touch 事件，系统提供了四个方法来处理：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesBegan:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesMoved:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesEnded:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesCancelled:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	iOS 9.1 增加的 API，当无法获取真实的 touches 时，UIKit 会提供一个预估值，并设置到 UITouch 对应的 estimatedProperties 中监测更新。当收到新的属性更新时，会通过调用此方法来传递这些更新值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	eg: 当使用 Apple Pencil 靠近屏幕边缘时，传感器无法感应到准确的值，此时会获取一个预估值赋给 estimatedProperties 属性。不断去更新数据，直到获取到准确的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesEstimatedPropertiesUpdated:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;_1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的前四个方法，是由系统自动调用的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，当发生一个事件时，view 只接收到一个 &lt;code&gt;UITouch&lt;/code&gt; 对象。当你使用多个手指&lt;strong&gt;同时&lt;/strong&gt;触摸是，会接收多个 &lt;code&gt;UITouch&lt;/code&gt; 对象，每个手指对应一个。多个手指分开触摸，会调用多次 touches 系列方法，每个 touches 里面有一个 &lt;code&gt;UITouch&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;如果你想处理一些额外的事件，可以重写以上四个方法，处理你想要处理的事件。之后不要忘记调用 &lt;code&gt;[super touchexxxx]&lt;/code&gt; 方法，否则事件处理就中断于此 view 了，不会传递上去了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;UITouch&lt;/code&gt; 对象保存了事件的相关信息：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; timestamp; &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 事件产生或变化时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UITouchPhase&lt;/span&gt; phase;       &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 所处阶段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; tapCount;      &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 短时间内点击屏幕次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 点击类型，直接点击、间接点击还是笔触*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UITouchType&lt;/span&gt;         type &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 使用硬件设备点击时，以点为圆心的 touch 半径，以此确定 touch 范围大小 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; majorRadius &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 半径公差 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; majorRadiusTolerance &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(nullable,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIWindow&lt;/span&gt; *window; &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 事件所属 window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(nullable,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view;     &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 事件所属 view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 所包含的手势识别器 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(nullable,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *&amp;gt; *gestureRecognizers &lt;span class=&quot;built_in&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;_2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;touch 事件处理的传递过程与 Hit-Testing 过程正好相反。Hit-Tesing 过程是从上向下（从父视图到子视图）遍历；touch 事件处理传递是从下向上（从子视图到父视图）传递。这也就是传说中的 &lt;strong&gt;Response Chain&lt;/strong&gt;。最有机会处理事件的对象就是通过 Hit-Testing 找到的视图或者第一响应者，如果两者都能处理，则传递给下一个响应者，之后依次传递。官方给出了一个传递过程图，我就懒得画了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs-assets.developer.apple.com/published/7c21d852b9/f17df5bc-d80b-4e17-81cf-4277b1e0f6e4.png&quot; alt=&quot;Responder chains in an app&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你不重写这几个 touches 方法，系统会通过响应链找到视图响应。如果你想做自己的事件处理操作，可以重写这几个方法。就是说，你不重写，事件处理正常传递；你重写了，处理完之后不要忘记调用 super 方法，使处理过程继续传递。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4-UIResponder&quot;&gt;&lt;a href=&quot;#4-UIResponder&quot; class=&quot;headerlink&quot; title=&quot;4.UIResponder&quot;&gt;&lt;/a&gt;4.UIResponder&lt;/h4&gt;&lt;p&gt;App 可以接收并处理很多事件，这过程中使用的是 &lt;code&gt;UIResponder&lt;/code&gt; 对象来接收和处理的。&lt;code&gt;UIResponder&lt;/code&gt; 类为那些需要响应比处理事件的对象定义了一组接口，使用这些接口可以处理各种花式事件。在 &lt;code&gt;UIKit&lt;/code&gt; 中，&lt;code&gt;UIView&lt;/code&gt;、&lt;code&gt;UIViewController&lt;/code&gt; 和 &lt;code&gt;UIApplication&lt;/code&gt; 这些类都是继承自 &lt;code&gt;UIResponder&lt;/code&gt; 类。下面根据提供的这些接口，讲解一下这个类相关的东西。&lt;/p&gt;
&lt;h5 id=&quot;确定第一响应者&quot;&gt;&lt;a href=&quot;#确定第一响应者&quot; class=&quot;headerlink&quot; title=&quot;确定第一响应者&quot;&gt;&lt;/a&gt;确定第一响应者&lt;/h5&gt;&lt;p&gt;对于每个事件发生之后，系统会去找能给处理这个事件的第一响应者。根据不同的事件类型，第一响应者也不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;触摸事件：被触摸的那个 view。&lt;/li&gt;
&lt;li&gt;按压事件：被聚焦按压的那个对象。&lt;/li&gt;
&lt;li&gt;摇晃事件：用户或者 &lt;code&gt;UIKit&lt;/code&gt; 指定的那个对象。&lt;/li&gt;
&lt;li&gt;远程事件：用户或者 &lt;code&gt;UIKit&lt;/code&gt; 指定的那个对象。&lt;/li&gt;
&lt;li&gt;菜单编辑事件：用户或者 &lt;code&gt;UIKit&lt;/code&gt; 指定的那个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;与加速计、陀螺仪、磁力仪相关的运动事件，是不遵循响应链机制传递的。Core Motion 会将事件直接传递给你所指定的第一响应者。更多信息可以查看 &lt;a href=&quot;https://developer.apple.com/documentation/#//apple_ref/doc/uid/TP40007898-CH10-SW27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Motion Framework&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;UIResponder&lt;/code&gt; 提供了几个方法（属性）来管理响应链 ：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#if UIKIT_DEFINE_AS_PROPERTIES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property(nonatomic, readonly, nullable) UIResponder *nextResponder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (nullable UIResponder*)nextResponder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if UIKIT_DEFINE_AS_PROPERTIES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property(nonatomic, readonly) BOOL canBecomeFirstResponder;    // default is NO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)canBecomeFirstResponder;    // default is NO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)becomeFirstResponder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if UIKIT_DEFINE_AS_PROPERTIES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property(nonatomic, readonly) BOOL canResignFirstResponder;    // default is YES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)canResignFirstResponder;    // default is YES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)resignFirstResponder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if UIKIT_DEFINE_AS_PROPERTIES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property(nonatomic, readonly) BOOL isFirstResponder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)isFirstResponder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-[nextResponder]&lt;/code&gt; 方法负责事件传递，默认返回 nil。子类必须实现此方法。例如 &lt;code&gt;UIView&lt;/code&gt; 返回的是管理他的 &lt;code&gt;UIViewController&lt;/code&gt; 对象或者其父视图；&lt;code&gt;UIViewController&lt;/code&gt; 返回的是他的视图的父视图；&lt;code&gt;UIWindow&lt;/code&gt; 返回的是 App 对象；&lt;code&gt;UIApplication&lt;/code&gt; 返回的是 nil。这些在构建视图层次结构的时候就形成了。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;-[isFirstResponder]&lt;/code&gt; 来判断响应对象是否为第一响应者。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;-[canBecomeFirstResponder]&lt;/code&gt; 方法判断是否可以成为第一响应者。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;-[becomeFirstResponder]&lt;/code&gt; 方法将响应对象设置为第一响应者。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应的 &lt;code&gt;Resignxxxx&lt;/code&gt; 系列方法使用场景类似。&lt;/p&gt;
&lt;h5 id=&quot;处理各种事件的方法&quot;&gt;&lt;a href=&quot;#处理各种事件的方法&quot; class=&quot;headerlink&quot; title=&quot;处理各种事件的方法&quot;&gt;&lt;/a&gt;处理各种事件的方法&lt;/h5&gt;&lt;p&gt;&lt;code&gt;UIResponder&lt;/code&gt; 定义了 touches 系列方法用来处理手势触摸事件；定义了 press 系列方法处理按压事件；定义了 motion 系列方法处理运动事件；定义了 remote 系列方法处理远程事件。可以说大部分事件都是通过这个类来处理的。这里就不详细说了。&lt;/p&gt;
&lt;h5 id=&quot;输入视图相关&quot;&gt;&lt;a href=&quot;#输入视图相关&quot; class=&quot;headerlink&quot; title=&quot;输入视图相关&quot;&gt;&lt;/a&gt;输入视图相关&lt;/h5&gt;&lt;p&gt;当我们使用 &lt;code&gt;UITextView&lt;/code&gt; 或者 &lt;code&gt;UITextField&lt;/code&gt; 时，点击视图会让其成为 fist responder，然后弹出一个视图（系统键盘 or 自定义键盘）让用户进行文本输入。在 &lt;code&gt;UIResponder + UIResponderInputViewAdditions&lt;/code&gt; 这个分类中，定义了 &lt;code&gt;inputView&lt;/code&gt; 和 &lt;code&gt;inputAccessoryView&lt;/code&gt; 两个输入视图，样式分别如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/inputView.png&quot; alt=&quot;inputView&quot;&gt;&lt;/p&gt;
&lt;p&gt;设置了 &lt;code&gt;UITextView&lt;/code&gt; 的 &lt;code&gt;inputView&lt;/code&gt; 属性之后，将不再弹出键盘，弹出的是自定义的 view；设置了 &lt;code&gt;inputAccessoryView&lt;/code&gt; 属性之后，将会在键盘上面显示一个自定义图，这个属性默认为 nil。&lt;/p&gt;
&lt;p&gt;还有一些其他属性，与输入视图相关，这里不再详细说。&lt;/p&gt;
&lt;h5 id=&quot;复制粘贴相关&quot;&gt;&lt;a href=&quot;#复制粘贴相关&quot; class=&quot;headerlink&quot; title=&quot;复制粘贴相关&quot;&gt;&lt;/a&gt;复制粘贴相关&lt;/h5&gt;&lt;p&gt;在文本中选中一些文字后，会弹出一个编辑菜单，我们可以通过这些菜单进行复制、粘贴等操作。如下图是微信读书的自定义菜单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/复制粘贴菜单.png&quot; alt=&quot;复制黏贴菜单&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIResponder&lt;/code&gt; 这个类中定义了 &lt;code&gt;UIResponderStandardEditActions&lt;/code&gt; protocol，来处理复制粘贴相关事件。你可以通过重写 &lt;code&gt;UIResponder&lt;/code&gt; 提供的 &lt;code&gt;-[canPerformAction:withSender]&lt;/code&gt; 方法，判断 action 是否是你想要的，如果是的话，你便可以为所欲为：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)canPerformAction:(SEL)action withSender:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (action == &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;:)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 为你所欲为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们还可以重写 &lt;code&gt;UIResponder&lt;/code&gt; 提供的 &lt;code&gt;-[targetForAction:withSender:]&lt;/code&gt; 方法来处理某个 action 的接收者。和上面类似：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)targetForAction:(SEL)action withSender:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (action == &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(cut:)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 为你所欲为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; targetForAction:action withSender:sender];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;响应键盘快捷键&quot;&gt;&lt;a href=&quot;#响应键盘快捷键&quot; class=&quot;headerlink&quot; title=&quot;响应键盘快捷键&quot;&gt;&lt;/a&gt;响应键盘快捷键&lt;/h5&gt;&lt;p&gt;iOS 7 新增加了 &lt;code&gt;UIResponder + UIResponderKeyCommands&lt;/code&gt; 分类，添加了一个 &lt;code&gt;keyCommands&lt;/code&gt; 属性，同时还定义了 &lt;code&gt;UIKeyCommands&lt;/code&gt; 类和一系列方法。使用这些方法，我们可以处理一些键盘快捷键。没用过，不多说，了解即可。&lt;/p&gt;
&lt;h5 id=&quot;支持-User-Activities&quot;&gt;&lt;a href=&quot;#支持-User-Activities&quot; class=&quot;headerlink&quot; title=&quot;支持 User Activities&quot;&gt;&lt;/a&gt;支持 User Activities&lt;/h5&gt;&lt;p&gt;iOS 8 Apple 提供了 Handoff 功能，通过这个功能，用户可以在多个 Apple 设备中共同处理一件事。例如我们使用 Mac 的 Safari 浏览一些东西，因为某些事情离开，这时候我们可以使用移动设备（iPad）上的的 Safari 继续浏览。&lt;/p&gt;
&lt;p&gt;Handoff 的基本思想是用户在一个应用里所做的任何操作都可以看作是一个 Activity，一个 Activity 可以和一个特定 iCloud 用户的多台设备关联起来。设备和设备之间使用 Activity 传递信息，达到共享操作。&lt;/p&gt;
&lt;p&gt;为了支持这个功能，iOS 8 后新增加了 &lt;code&gt;UIResponder + ActivityContinuation&lt;/code&gt; 分类，提供了一些方法来处理这些事件。对于继承自 &lt;code&gt;UIResponder&lt;/code&gt; 的对象，已经为我们提供了一个 &lt;code&gt;userActivity&lt;/code&gt; 属性，多个响应者可以共享这个 &lt;code&gt;NSUserActivity&lt;/code&gt; 类型的属性。另外我们可以使用 &lt;code&gt;-[updateUserActivityState:]&lt;/code&gt; 方法来更新这个属性；使用 &lt;code&gt;-[restoreUserActivityState:]&lt;/code&gt; 方法重置这个属性的状态。&lt;/p&gt;
&lt;p&gt;更秀的操作，请看 &lt;a href=&quot;http://www.cocoachina.com/ios/20150115/10926.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 8 Handoff 开发指南&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如你所见，&lt;code&gt;UIResponder&lt;/code&gt; 类提供了处理大部分事件的接口，熟练了这些接口的使用，你便可以为所欲为。&lt;/p&gt;
&lt;h4 id=&quot;5-不遵循-Responder-Chain-的事件&quot;&gt;&lt;a href=&quot;#5-不遵循-Responder-Chain-的事件&quot; class=&quot;headerlink&quot; title=&quot;5.不遵循 Responder Chain 的事件&quot;&gt;&lt;/a&gt;5.不遵循 Responder Chain 的事件&lt;/h4&gt;&lt;p&gt;上面也说了，与加速计、陀螺仪、磁力仪相关的运动事件，是不遵循响应链机制传递的。而是直接传递给用户指定的 frist responder。所以要将运动事件传递给一个对象，需要遵循：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象的 &lt;code&gt;-[canBecomeFirstResponder]&lt;/code&gt; 方法必须返回 YES。&lt;/li&gt;
&lt;li&gt;在 view controller 控制器中，在合适的地方调用对象的 &lt;code&gt;-[becomeFirstResponder]&lt;/code&gt; 和 &lt;code&gt;-[resignFirstResponder]&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个处理摇一摇事件的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自定义视图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomShakeView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Overrid Method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)canBecomeFirstResponder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)motionBegan:(&lt;span class=&quot;built_in&quot;&gt;UIEventSubtype&lt;/span&gt;)motion withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (motion == &lt;span class=&quot;built_in&quot;&gt;UIEventSubtypeMotionShake&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; width = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.frame.size.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; height = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.frame.size.height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *label = [[&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, width, height)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        label.text = &lt;span class=&quot;string&quot;&gt;@&quot;phone was shaked&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        label.textAlignment = &lt;span class=&quot;built_in&quot;&gt;NSTextAlignmentCenter&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addSubview:label];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)motionEnded:(&lt;span class=&quot;built_in&quot;&gt;UIEventSubtype&lt;/span&gt;)motion withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)motionCancelled:(&lt;span class=&quot;built_in&quot;&gt;UIEventSubtype&lt;/span&gt;)motion withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 视图控制器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) CustomShakeView *shakeView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.shakeView = [[CustomShakeView alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;, viewWidth, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.shakeView.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; grayColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:_shakeView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewWillAppear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.shakeView becomeFirstResponder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillDisappear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewWillDisappear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.shakeView resignFirstResponder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;远程控制事件与此类似，不在多说。&lt;/p&gt;
&lt;h3 id=&quot;各种事件的使用&quot;&gt;&lt;a href=&quot;#各种事件的使用&quot; class=&quot;headerlink&quot; title=&quot;各种事件的使用&quot;&gt;&lt;/a&gt;各种事件的使用&lt;/h3&gt;&lt;p&gt;这一章节主要是一些事件的使用 demo，基本 API 的调用，已经熟练使用的同学可以略过了。&lt;/p&gt;
&lt;h4 id=&quot;1-手势类使用&quot;&gt;&lt;a href=&quot;#1-手势类使用&quot; class=&quot;headerlink&quot; title=&quot;1.手势类使用&quot;&gt;&lt;/a&gt;1.手势类使用&lt;/h4&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个系统手势或者自定义手势，添加到一个 view 上即可。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *customView = [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; *gesture = [[&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(tapAcation:)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	[customView addGestureRecognizer:gesture];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)tapAcation:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 为所欲为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-touches-系列方法使用&quot;&gt;&lt;a href=&quot;#2-touches-系列方法使用&quot; class=&quot;headerlink&quot; title=&quot;2.touches 系列方法使用&quot;&gt;&lt;/a&gt;2.touches 系列方法使用&lt;/h4&gt;&lt;p&gt;这里是一个可以被拖动的 imageView 的例子。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DragView&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIImageView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DragView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesMoved:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取前后两个点，计算偏移量，然后做平移转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *touch = [touches anyObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; currentPoint = [touch locationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; previousPoint = [touch previousLocationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; offsetX = currentPoint.x - previousPoint.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; offsetY = currentPoint.y - previousPoint.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.transform = &lt;span class=&quot;built_in&quot;&gt;CGAffineTransformTranslate&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.transform, offsetX, offsetY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DragView *dragView = [[DragView alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dragView.userInteractionEnabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dragView.image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageNamed:&lt;span class=&quot;string&quot;&gt;@&quot;picture.jpg&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:dragView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-摇一摇事件（运动事件）&quot;&gt;&lt;a href=&quot;#3-摇一摇事件（运动事件）&quot; class=&quot;headerlink&quot; title=&quot;3.摇一摇事件（运动事件）&quot;&gt;&lt;/a&gt;3.摇一摇事件（运动事件）&lt;/h4&gt;&lt;p&gt;请参见上一章的最后一小节。&lt;/p&gt;
&lt;h4 id=&quot;4-远程控制事件&quot;&gt;&lt;a href=&quot;#4-远程控制事件&quot; class=&quot;headerlink&quot; title=&quot;4.远程控制事件&quot;&gt;&lt;/a&gt;4.远程控制事件&lt;/h4&gt;&lt;p&gt;一个可以通过耳机控制音乐播放的 view controller，主要做的几件事情我已经用注释标出。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PlayVideoViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;  isPlaying;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;AVAudioPlayer&lt;/span&gt; *avAudioPlayer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PlayVideoViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Override Method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; whiteColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 接收线控事件，并设置 VC 为第一响应者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication] beginReceivingRemoteControlEvents];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; becomeFirstResponder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 读取一个音频文件到 player 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *filePath = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] pathForResource:&lt;span class=&quot;string&quot;&gt;@&quot;周杰伦-我的地盘&quot;&lt;/span&gt; ofType:&lt;span class=&quot;string&quot;&gt;@&quot;mp3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url = [&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; fileURLWithPath:filePath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.avAudioPlayer = [[&lt;span class=&quot;built_in&quot;&gt;AVAudioPlayer&lt;/span&gt; alloc] initWithContentsOfURL:url error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillDisappear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 取消接收线控事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication] endReceivingRemoteControlEvents];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; resignFirstResponder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 重写方法，返回 YES */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)canBecomeFirstResponder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 实现这个方法，处理各种事件 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)remoteControlReceivedWithEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (event.subtype) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIEventSubtypeRemoteControlTogglePlayPause&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 同时控制播放和暂停&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!_isPlaying) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [_avAudioPlayer play];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _isPlaying = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [_avAudioPlayer pause];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _isPlaying = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIEventSubtypeRemoteControlPlay&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 播放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIEventSubtypeRemoteControlPause&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 暂停&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIEventSubtypeRemoteControlStop&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 停止&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIEventSubtypeRemoteControlNextTrack&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 下一曲&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIEventSubtypeRemoteControlPreviousTrack&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 上一曲&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;初次建立这个工程，发现无论如何都不响应 &lt;code&gt;[remoteControlReceivedWithEvent:]&lt;/code&gt; 方法，这时候你想工程中加入一段音频，并想办法使用代码播放一下这段音频（点击 button，调用 AVAudioPlayer 的 play) 方法，然后再重新编译应该就好了。属于玄学领域，我也不清楚为什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;5-3D-Touch-事件&quot;&gt;&lt;a href=&quot;#5-3D-Touch-事件&quot; class=&quot;headerlink&quot; title=&quot;5.3D Touch 事件&quot;&gt;&lt;/a&gt;5.3D Touch 事件&lt;/h4&gt;&lt;h5 id=&quot;Home-Screen-Quick-Actions&quot;&gt;&lt;a href=&quot;#Home-Screen-Quick-Actions&quot; class=&quot;headerlink&quot; title=&quot;Home Screen Quick Actions&quot;&gt;&lt;/a&gt;Home Screen Quick Actions&lt;/h5&gt;&lt;p&gt;使用这个功能，点击 icon 可以快速预览某些功能，并以此为入口点击进入。有两种方式来配置这个功能，一是直接使用 pilst 文件进行静态配置；另外一种是使用代码来动态配置。&lt;/p&gt;
&lt;h6 id=&quot;（1）使用-plist-文件配置&quot;&gt;&lt;a href=&quot;#（1）使用-plist-文件配置&quot; class=&quot;headerlink&quot; title=&quot;（1）使用 plist 文件配置&quot;&gt;&lt;/a&gt;（1）使用 plist 文件配置&lt;/h6&gt;&lt;p&gt;所有事件的数组叫做 UIApplicationShortcutItems，每个事件叫做 UIApplicationShortcutItem，每个 UIApplicationShortcutItem 中包含的信息如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统默认最多只能添加 4 个 item（不算“分享”这个 item），即使你添加了很多，最多也只显示四个。如果你想添加更多，可以效仿一下支付宝的做法，即在预览 view 中添加对应功能，这里就不贴图了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;UIApplicationShortcutItemType&lt;/td&gt;
&lt;td&gt;事件的标识&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UIApplicationShortcutItemTitle&lt;/td&gt;
&lt;td&gt;事件标题&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UIApplicationShortcutItemSubtitle&lt;/td&gt;
&lt;td&gt;事件子标题&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UIApplicationShortcutItemIconType&lt;/td&gt;
&lt;td&gt;系统定义的 icon 类型&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UIApplicationShortcutItemIconFile&lt;/td&gt;
&lt;td&gt;icon 图片，以单一颜色，35*35 大小展示，如果设置了这个属性，UIApplicationShortcutItemIconType 属性将不起作用&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UIApplicationShortcutItemUserInfo&lt;/td&gt;
&lt;td&gt;传递信息的 dictionary&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;你可以通过使用 plist 文件配置这些东西，例如下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/plist 配置 3D Touch.png&quot; alt=&quot;plist 配置 3D touch&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;2-使用代码动态配置&quot;&gt;&lt;a href=&quot;#2-使用代码动态配置&quot; class=&quot;headerlink&quot; title=&quot;(2) 使用代码动态配置&quot;&gt;&lt;/a&gt;(2) 使用代码动态配置&lt;/h6&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 创建 item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIApplicationShortcutIcon&lt;/span&gt; *cameraIcon = [&lt;span class=&quot;built_in&quot;&gt;UIApplicationShortcutIcon&lt;/span&gt; iconWithTemplateImageName:&lt;span class=&quot;string&quot;&gt;@&quot;camera&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIApplicationShortcutIcon&lt;/span&gt; *mosaicIcon = [&lt;span class=&quot;built_in&quot;&gt;UIApplicationShortcutIcon&lt;/span&gt; iconWithTemplateImageName:&lt;span class=&quot;string&quot;&gt;@&quot;mosaic&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIMutableApplicationShortcutItem&lt;/span&gt; *cameraItem = [[&lt;span class=&quot;built_in&quot;&gt;UIMutableApplicationShortcutItem&lt;/span&gt; alloc] initWithType:&lt;span class=&quot;string&quot;&gt;@&quot;event://camera&quot;&lt;/span&gt; localizedTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Camera&quot;&lt;/span&gt; localizedSubtitle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; icon:cameraIcon userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIMutableApplicationShortcutItem&lt;/span&gt; *mosaicItem = [[&lt;span class=&quot;built_in&quot;&gt;UIMutableApplicationShortcutItem&lt;/span&gt; alloc] initWithType:&lt;span class=&quot;string&quot;&gt;@&quot;event://mosaic&quot;&lt;/span&gt; localizedTitle:&lt;span class=&quot;string&quot;&gt;@&quot;Mosaic&quot;&lt;/span&gt; localizedSubtitle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; icon:mosaicIcon userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 放到应用中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication].shortcutItems = @[cameraItem,mosaicItem];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用上述任何一种方式添加了 item 之后，效果大概是这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/3d_touch.PNG&quot; alt=&quot;3dtouch&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;3-处理对应的事件&quot;&gt;&lt;a href=&quot;#3-处理对应的事件&quot; class=&quot;headerlink&quot; title=&quot;(3) 处理对应的事件&quot;&gt;&lt;/a&gt;(3) 处理对应的事件&lt;/h6&gt;&lt;p&gt;上述两种方式是配置事件入口，这里是响应对应事件。在 &lt;code&gt;AppDelegate&lt;/code&gt; 中系统提供了一个代理方法：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application performActionForShortcutItem:(&lt;span class=&quot;built_in&quot;&gt;UIApplicationShortcutItem&lt;/span&gt; *)shortcutItem completionHandler:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;))completionHandler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (shortcutItem) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([shortcutItem.type isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;event.responser.test://camera&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 跳转到照相页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([shortcutItem.type isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;event.responser.test://mosaic&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 跳转到马赛克页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (completionHandler) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        completionHandler(&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Peek-and-Pop&quot;&gt;&lt;a href=&quot;#Peek-and-Pop&quot; class=&quot;headerlink&quot; title=&quot;Peek and Pop&quot;&gt;&lt;/a&gt;Peek and Pop&lt;/h5&gt;&lt;p&gt;只需要两步，第一步是在当前的 View Controller 中实现 &lt;code&gt;UIViewControllerPreviewingDelegate&lt;/code&gt; delegate；第二部是在预览 view controller 实现 &lt;code&gt;previewActionItems&lt;/code&gt; delegate。具体代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 当前 View Controller */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TableViewController&lt;/span&gt; () &amp;lt;&lt;span class=&quot;title&quot;&gt;UIViewControllerPreviewingDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *dataArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TableViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dataArray = @[&lt;span class=&quot;string&quot;&gt;@&quot;依然范特西&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;十一月的肖邦&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;七里香&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;叶惠美&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;@&quot;八度空间&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Table view data source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)numberOfSectionsInTableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView numberOfRowsInSection:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)section &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView cellForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = [tableView dequeueReusableCellWithIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;CellIdentifier&quot;&lt;/span&gt; forIndexPath:indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell.textLabel.text = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dataArray[indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - UIViewControllerPreviewingDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** peek 操作，预览模式 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)previewingContext:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerPreviewing&lt;/span&gt;&amp;gt;)previewingContext viewControllerForLocation:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;)location &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;comment&quot;&gt;// 这里没有使用 indexPath，实际项目中，需要根据 indexPath 选择对应的 VC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *indexPath = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView indexPathForCell:(&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)[previewingContext sourceView]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PreViewController *preViewController = [[&lt;span class=&quot;built_in&quot;&gt;UIStoryboard&lt;/span&gt; storyboardWithName:&lt;span class=&quot;string&quot;&gt;@&quot;Main&quot;&lt;/span&gt; bundle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                            instantiateViewControllerWithIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;PreViewController&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    preViewController.preferredContentSize = &lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;400.0&lt;/span&gt;f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; rect = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;375.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    previewingContext.sourceRect = rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; preViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** pop 操作，继续按压 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)previewingContext:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerPreviewing&lt;/span&gt;&amp;gt;)previewingContext commitViewController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)viewControllerToCommit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PreViewController *preViewController = [[&lt;span class=&quot;built_in&quot;&gt;UIStoryboard&lt;/span&gt; storyboardWithName:&lt;span class=&quot;string&quot;&gt;@&quot;Main&quot;&lt;/span&gt; bundle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                            instantiateViewControllerWithIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;PreViewController&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.navigationController pushViewController:preViewController animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 预览 view controller */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIPreviewActionItem&lt;/span&gt;&amp;gt;&amp;gt; *)previewActionItems &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIPreviewAction&lt;/span&gt; *shareAction = [&lt;span class=&quot;built_in&quot;&gt;UIPreviewAction&lt;/span&gt; actionWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;分享&quot;&lt;/span&gt; style:&lt;span class=&quot;built_in&quot;&gt;UIPreviewActionStyleDefault&lt;/span&gt; handler:^(&lt;span class=&quot;built_in&quot;&gt;UIPreviewAction&lt;/span&gt; * _Nonnull action, &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; * _Nonnull previewViewController) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 分享&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIPreviewAction&lt;/span&gt; *markAction = [&lt;span class=&quot;built_in&quot;&gt;UIPreviewAction&lt;/span&gt; actionWithTitle:&lt;span class=&quot;string&quot;&gt;@&quot;标记&quot;&lt;/span&gt; style:&lt;span class=&quot;built_in&quot;&gt;UIPreviewActionStyleDefault&lt;/span&gt; handler:^(&lt;span class=&quot;built_in&quot;&gt;UIPreviewAction&lt;/span&gt; * _Nonnull action, &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; * _Nonnull previewViewController) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 标记&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; @[shareAction, markAction];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现之后效果大概是这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/iOS-event-response/peek_and_pop.PNG&quot; alt=&quot;peek_and_pop&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;Force-Properties&quot;&gt;&lt;a href=&quot;#Force-Properties&quot; class=&quot;headerlink&quot; title=&quot;Force Properties&quot;&gt;&lt;/a&gt;Force Properties&lt;/h5&gt;&lt;p&gt;3D Touch 所提供的最后一个功能，就是可以感应按压力度，转化到实际应用中，就是下面这张图：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://devimages-cdn.apple.com/ios/3d-touch/images/pressure-sensitivity_2x.jpg&quot; width=&quot;375&quot; height=&quot;670&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;根据按压程度不同，颜色有深有浅。我们可以通过 &lt;code&gt;UITouch&lt;/code&gt; 对象获取到这个值，使用这个值做一些其他操作：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesMoved:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *arrayTouch = [touches allObjects];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *touch = (&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *)[arrayTouch lastObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; force = touch.force;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;压力值为 %f&quot;&lt;/span&gt;,force);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;6-自定义手势&quot;&gt;&lt;a href=&quot;#6-自定义手势&quot; class=&quot;headerlink&quot; title=&quot;6.自定义手势&quot;&gt;&lt;/a&gt;6.自定义手势&lt;/h4&gt;&lt;p&gt;有些时候，系统提供的手势已经不能满足我们的需求了，这时候我们可以根据需要，自定义一个手势。自定义手势的一个思路就是：继承 &lt;code&gt;UIGestureRecognizer&lt;/code&gt; 类，然后重写那几个 touches 方法，在里面处理手势识别器的状态，即从 began -&amp;gt; end 的状态。&lt;/p&gt;
&lt;p&gt;下面是效仿大神，写的一个“点击对角线两个点”才能响应的手势：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_OPTIONS&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;, TouchArea) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    other = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    topLeft = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    topRight = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bottomLeft = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bottomRight = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bingoOne = topLeft | bottomRight,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bingoTwo = topRight | bottomLeft,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    none = other,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TapDiagonalGesture&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) TouchArea alreadyTouched;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *trackingTouches;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; *, &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *&amp;gt; *allTouchedArea;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TapDiagonalGesture&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithTarget:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)target action:(SEL)action &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; initWithTarget:target action:action];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _trackingTouches = [&lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; set];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _allTouchedArea = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; dictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesBegan:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; touchesBegan:touches withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *touch &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; touches) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TouchArea touchArea = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; toucheAreaForPosition:[touch locationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view] inView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (touchArea == other) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.state = &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateFailed&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.trackingTouches addObject:touch];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; *value = [&lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; valueWithNonretainedObject:touch];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.allTouchedArea[value] = @(touchArea);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesMoved:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; touchesMoved:touches withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *touch &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; touches) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![_trackingTouches containsObject:touch]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; *value = [&lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; valueWithNonretainedObject:touch];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TouchArea touchArea = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.allTouchedArea[value].integerValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TouchArea currentArea = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; toucheAreaForPosition:[touch locationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view] inView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentArea == other || touchArea != currentArea) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.state = &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateFailed&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesEnded:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; touchesEnded:touches withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *touch &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; touches) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![_trackingTouches containsObject:touch]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; *value = [&lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; valueWithNonretainedObject:touch];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TouchArea touchArea = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.allTouchedArea[value].integerValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TouchArea currentArea = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; toucheAreaForPosition:[touch locationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view] inView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (currentArea == other || touchArea != currentArea) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.state = &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateFailed&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.trackingTouches removeObject:touch];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.allTouchedArea[value] = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.alreadyTouched |= currentArea;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.alreadyTouched == bingoOne ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.alreadyTouched == bingoTwo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.state = &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateRecognized&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesCancelled:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; touchesCancelled:touches withEvent:event];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *touch &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; touches) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![_trackingTouches containsObject:touch]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.state = &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateCancelled&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)reset &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; reset];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.trackingTouches removeAllObjects];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.allTouchedArea removeAllObjects];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.alreadyTouched = none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)shouldBeRequiredToFailByGestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)otherGestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Private Method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (TouchArea)toucheAreaForPosition:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;)point inView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; origin = view.bounds.origin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGSize&lt;/span&gt; size = view.frame.size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; horizontoalArea = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; areaForValue:point.x rangeBegin:origin.x rangeLength:size.width];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; verticalArea = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; areaForValue:point.y rangeBegin:origin.y rangeLength:size.height];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (horizontoalArea == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || verticalArea == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; other;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; shifts = (horizontoalArea &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + (verticalArea &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; shifts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)areaForValue:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         rangeBegin:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)rangeBegin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rangeLength:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)rangeLength &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; threadShold = MAX(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, rangeLength / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rangeLength &amp;lt; threadShold * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value &amp;lt;= rangeBegin + threadShold) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value &amp;gt;= rangeBegin + rangeLength - threadShold) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在一个 view 上面添加这个手势之后，同时点击这个 view 对角线两个点（左上 &amp;amp; 右下；左下 &amp;amp; 右上），便会响应对应的 action。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;上面讲述了大部分事件以及其原理，了解了之后，对我们的开发很有帮助。当然，iOS 11 新增了 Drag and Drop 功能，这个功能大多在 Mac 或者 iPad 上面用，在 iPhone 上也可以使用，但使用的功能有限，这里就不多说了。&lt;/p&gt;
&lt;p&gt;针对上面的内容，有问题可以提出，我会尽快修改。&lt;/p&gt;
&lt;h4 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/touches_presses_and_gestures?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Touches, Presses, and Gestures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhongwuzw.github.io/2016/09/12/iOS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E4%B9%8BHit-Testing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS事件处理之Hit-Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://southpeak.github.io/2015/03/07/cocoa-uikit-uiresponder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIKit: UIResponder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 iPhone 过程中，会产生很多交互事件，例如点击、长按、摇晃、3D Touch 等。&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>按下 ⌘ + R 后发生的事情</title>
    <link href="http://yoursite.com/2018/03/10/%E5%BD%93%E4%BD%A0%E6%8C%89%E4%B8%8B%20%E2%8C%98%20+%20R%20%E5%90%8E%E5%8F%91%E7%94%9F%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>http://yoursite.com/2018/03/10/当你按下 ⌘ + R 后发生的事情/</id>
    <published>2018-03-10T14:03:50.000Z</published>
    <updated>2018-05-13T13:23:37.660Z</updated>
    
    <content type="html">&lt;p&gt;作为一名 coder，每天的工作不是解 bug，就是写 bug。有些东西，了解了并不一定有利于写 bug，但是有利于解 bug。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;对于一个工程，当你按下 &lt;code&gt;⌘ + R&lt;/code&gt; 到主界面显示出来，你可曾想过这一过程发生了哪些事情？这些原理性的东西，对我们 coding 并没有直接帮助，了解与否都可以 coding。但是一个 coder 的工作不只是 coding，还有 debug。了解这些东西，对我们排查一些问题很有帮助。&lt;/p&gt;
&lt;p&gt;按照阶段划分，这一过程大致可以划为三个阶段：&lt;strong&gt;编译阶段&lt;/strong&gt;、&lt;strong&gt;APP 启动阶段&lt;/strong&gt;、&lt;strong&gt;图层渲染阶段&lt;/strong&gt;。下面针对这三个过程进行详细描述。&lt;/p&gt;
&lt;h3 id=&quot;编译阶段&quot;&gt;&lt;a href=&quot;#编译阶段&quot; class=&quot;headerlink&quot; title=&quot;编译阶段&quot;&gt;&lt;/a&gt;编译阶段&lt;/h3&gt;&lt;p&gt;学过编译原理的同学都应该知道，编译主要分为四个过程：预处理、编译、汇编、链接。下面大致也是按照这个路子来。iOS 编译过程，使用的 clang 做前端，LLVM 作为后端进行完成的。使用 clang 处理前几个阶段，LLVM 处理后面几个阶段。&lt;/p&gt;
&lt;h4 id=&quot;1-预处理&quot;&gt;&lt;a href=&quot;#1-预处理&quot; class=&quot;headerlink&quot; title=&quot;1.预处理&quot;&gt;&lt;/a&gt;1.预处理&lt;/h4&gt;&lt;p&gt;又称为预编译，主要做一些文本替换工作。处理 &lt;code&gt;#&lt;/code&gt; 开头的指令，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宏定义的展开 （#define）&lt;/li&gt;
&lt;li&gt;头文件展开 （#include，#import）&lt;/li&gt;
&lt;li&gt;处理条件编译指令 （#if,#else,#endif)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如我们在代码中定义了如下宏：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define APP_VERSION &lt;span class=&quot;string&quot;&gt;&quot;V1.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	char *version &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; APP_VERSION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&lt;span class=&quot;string&quot;&gt;&quot;app version is %s&quot;&lt;/span&gt;,version);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 &lt;code&gt;clang -E main.m&lt;/code&gt; 进行宏展开的预处理结果如下:&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *version &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;V1.0.0&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;version is %s&quot;&lt;/span&gt;,version);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;宏的使用有很多坑，尽量用其他方式代替。&lt;/p&gt;
&lt;h4 id=&quot;2-词法分析&quot;&gt;&lt;a href=&quot;#2-词法分析&quot; class=&quot;headerlink&quot; title=&quot;2.词法分析&quot;&gt;&lt;/a&gt;2.词法分析&lt;/h4&gt;&lt;p&gt;完成预处理后，词法分析器（也叫扫描器）会对 .m 中的源代码进行从左到右扫描，按照语言的词法规则识别各类单词、关键字，并生成对应的单词的属性字。例如下面一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define APP_VERSION &lt;span class=&quot;string&quot;&gt;&quot;V1.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *version &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; APP_VERSION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;version is %s&quot;&lt;/span&gt;,version);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经过预处理阶段，然后使用 clang 命令 &lt;code&gt;clang -Xclang -dump-tokens main.m&lt;/code&gt; 进行扫描分析，导出结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int &lt;span class=&quot;string&quot;&gt;&#39;int&#39;&lt;/span&gt;	 [StartOfLine]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;identifier &lt;span class=&quot;string&quot;&gt;&#39;main&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l_paren &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int &lt;span class=&quot;string&quot;&gt;&#39;int&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;identifier &lt;span class=&quot;string&quot;&gt;&#39;argc&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comma &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char &lt;span class=&quot;string&quot;&gt;&#39;char&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;star &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;identifier &lt;span class=&quot;string&quot;&gt;&#39;argv&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l_square &lt;span class=&quot;string&quot;&gt;&#39;[&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r_square &lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r_paren &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l_brace &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char &lt;span class=&quot;string&quot;&gt;&#39;char&#39;&lt;/span&gt;	 [StartOfLine] [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;star &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;identifier &lt;span class=&quot;string&quot;&gt;&#39;version&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;equal &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string_literal &lt;span class=&quot;string&quot;&gt;&#39;&quot;V1.0.0&quot;&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; &amp;lt;Spelling&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;main.m:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semi &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;identifier &lt;span class=&quot;string&quot;&gt;&#39;printf&#39;&lt;/span&gt;	 [StartOfLine] [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l_paren &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string_literal &lt;span class=&quot;string&quot;&gt;&#39;&quot;version is %s&quot;&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comma &lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;identifier &lt;span class=&quot;string&quot;&gt;&#39;version&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r_paren &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semi &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return &lt;span class=&quot;string&quot;&gt;&#39;return&#39;&lt;/span&gt;	 [StartOfLine] [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;numeric_constant &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;	 [LeadingSpace]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semi &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r_brace &lt;span class=&quot;string&quot;&gt;&#39;&amp;#125;&#39;&lt;/span&gt;	 [StartOfLine]	Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eof &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;		Loc&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&amp;lt;main.m:&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面可以看出每个单词或者字符，都标记出了具体列数和行数，这样如果在编译过程中遇到什么问题，clang 可以快速定位错误在代码中的位置。&lt;/p&gt;
&lt;h4 id=&quot;3-语法分析&quot;&gt;&lt;a href=&quot;#3-语法分析&quot; class=&quot;headerlink&quot; title=&quot;3.语法分析&quot;&gt;&lt;/a&gt;3.语法分析&lt;/h4&gt;&lt;p&gt;接下来是进行语法分析。通过这一阶段，会将上一阶段的导出的结果解析成一棵抽象语法树（&lt;a href=&quot;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;abstract syntax tree – AST&lt;/a&gt;)。假设我们的源代码如下，并且已经经过了预处理：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define APP_VERSION &lt;span class=&quot;string&quot;&gt;&quot;V1.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *version &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; APP_VERSION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;version is %s&quot;&lt;/span&gt;,version);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 clang 命令 &lt;code&gt;clang -Xclang -ast-dump -fsyntax-only mian.m&lt;/code&gt; 处理过后，输入的语法树如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FunctionDecl 0x7ffe55884228 &amp;lt;main.m:14:1, line:21:1&amp;gt; line:14:5 main &#39;int (int, char **)&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  |-ParmVarDecl 0x7ffe55884028 &amp;lt;col:10, col:14&amp;gt; col:14 argc &#39;int&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  |-ParmVarDecl 0x7ffe55884110 &amp;lt;col:20, col:32&amp;gt; col:27 argv &#39;char **&#39;:&#39;char **&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `-CompoundStmt 0x7ffe55884568 &amp;lt;col:35, line:21:1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-DeclStmt 0x7ffe55884390 &amp;lt;line:18:5, col:32&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | `-VarDecl 0x7ffe558842e8 &amp;lt;col:5, line:12:21&amp;gt; line:18:11 used version &#39;char *&#39; cinit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |   `-ImplicitCastExpr 0x7ffe55884378 &amp;lt;line:12:21&amp;gt; &#39;char *&#39; &amp;lt;ArrayToPointerDecay&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |     `-StringLiteral 0x7ffe55884348 &amp;lt;col:21&amp;gt; &#39;char [7]&#39; lvalue &quot;V1.0.0&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-CallExpr 0x7ffe558844b0 &amp;lt;line:19:5, col:35&amp;gt; &#39;int&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | |-ImplicitCastExpr 0x7ffe55884498 &amp;lt;col:5&amp;gt; &#39;int (*)(const char *, ...)&#39; &amp;lt;FunctionToPointerDecay&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | | `-DeclRefExpr 0x7ffe558843a8 &amp;lt;col:5&amp;gt; &#39;int (const char *, ...)&#39; Function 0x7ffe55088570 &#39;printf&#39; &#39;int (const char *, ...)&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | |-ImplicitCastExpr 0x7ffe55884500 &amp;lt;col:12&amp;gt; &#39;const char *&#39; &amp;lt;BitCast&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | | `-ImplicitCastExpr 0x7ffe558844e8 &amp;lt;col:12&amp;gt; &#39;char *&#39; &amp;lt;ArrayToPointerDecay&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | |   `-StringLiteral 0x7ffe55884408 &amp;lt;col:12&amp;gt; &#39;char [14]&#39; lvalue &quot;version is %s&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    | `-ImplicitCastExpr 0x7ffe55884518 &amp;lt;col:28&amp;gt; &#39;char *&#39; &amp;lt;LValueToRValue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |   `-DeclRefExpr 0x7ffe55884440 &amp;lt;col:28&amp;gt; &#39;char *&#39; lvalue Var 0x7ffe558842e8 &#39;version&#39; &#39;char *&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `-ReturnStmt 0x7ffe55884550 &amp;lt;line:20:5, col:12&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      `-IntegerLiteral 0x7ffe55884530 &amp;lt;col:12&amp;gt; &#39;int&#39; 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;抽象语法树中每一个节点也标记出了在源码中的具体位置，便于问题定位。抽象语法树的相关知识有很多，这里就不详细解释了。&lt;/p&gt;
&lt;h4 id=&quot;4-静态分析&quot;&gt;&lt;a href=&quot;#4-静态分析&quot; class=&quot;headerlink&quot; title=&quot;4.静态分析&quot;&gt;&lt;/a&gt;4.静态分析&lt;/h4&gt;&lt;p&gt;把源码转化为抽象语法树之后，编译器就可以对这个树进行分析处理。静态分析会对代码进行错误检查，如出现方法被调用但是未定义、定义但是未使用的变量等，以此提高代码质量。当然，还可以通过使用 Xcode 自带的静态分析工具（Product -&amp;gt; Analyze）或者一些第三方的静态分析工具（例如 Facebook 的 &lt;a href=&quot;https://infer.liaohuqiu.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;infer&lt;/a&gt;进行深度分析。&lt;/p&gt;
&lt;p&gt;有时候编译器自带的静态分析，并不能满足我们的日常开发需求。因此我们可以通过使用脚本定制一套分析方案，放到集成环境中。每次提交代码时，会触发脚本进行静态分析，如果出现错误边报出警告，并且提交代码失败。依次太高开发质量。&lt;/p&gt;
&lt;p&gt;如果有兴趣，可以看一下 &lt;a href=&quot;https://github.com/llvm-mirror/clang/tree/master/lib/StaticAnalyzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clang 静态分析源码&lt;/a&gt;，看其中对哪些语法做了静态分析。&lt;/p&gt;
&lt;h4 id=&quot;5-生成代码和优化&quot;&gt;&lt;a href=&quot;#5-生成代码和优化&quot; class=&quot;headerlink&quot; title=&quot;5.生成代码和优化&quot;&gt;&lt;/a&gt;5.生成代码和优化&lt;/h4&gt;&lt;p&gt;使用 clang 完成预处理和分析之后，接着会生成 LLVM 代码。还是之前那段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define APP_VERSION &lt;span class=&quot;string&quot;&gt;&quot;V1.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *version &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; APP_VERSION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;version is %s&quot;&lt;/span&gt;,version);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以用 clang 命令 &lt;code&gt;clang -O3 -S -emit-llvm main.m  -o main.ll&lt;/code&gt; 进行转化，然后打开之后看到内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;; ModuleID &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;main.m&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source_filename &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;main.m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target datalayout &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;e-m:o-i64:64-f80:128-n8:16:32:64-S128&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target triple &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x86_64-apple-macosx10.13.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@.str &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; private unnamed_addr constant [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; x i8] c&lt;span class=&quot;string&quot;&gt;&quot;V1.0.0\00&quot;&lt;/span&gt;, align &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@.str.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; private unnamed_addr constant [&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; x i8] c&lt;span class=&quot;string&quot;&gt;&quot;version is %s\00&quot;&lt;/span&gt;, align &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; Function Attrs: nounwind ssp uwtable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// main 方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define i32 @main(i32, i8** nocapture readnone) local_unnamed_addr #&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;%3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ret i32 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; Function Attrs: nounwind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;attributes #&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &amp;#123; nounwind ssp uwtable &lt;span class=&quot;string&quot;&gt;&quot;correctly-rounded-divide-sqrt-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;disable-tail-calls&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;less-precise-fpmad&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-frame-pointer-elim&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-frame-pointer-elim-non-leaf&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-infs-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-jump-tables&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-nans-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-signed-zeros-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-trapping-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;stack-protector-buffer-size&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;8&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;target-cpu&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;penryn&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;target-features&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;unsafe-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;use-soft-float&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;attributes #&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &amp;#123; nounwind &lt;span class=&quot;string&quot;&gt;&quot;correctly-rounded-divide-sqrt-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;disable-tail-calls&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;less-precise-fpmad&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-frame-pointer-elim&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-frame-pointer-elim-non-leaf&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-infs-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-nans-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-signed-zeros-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;no-trapping-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;stack-protector-buffer-size&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;8&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;target-cpu&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;penryn&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;target-features&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;unsafe-fp-math&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;use-soft-float&quot;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!llvm.&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;.flags &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;!&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, !&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, !&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, !&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, !&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, !&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!llvm.ident &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;!&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;i32 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, !&lt;span class=&quot;string&quot;&gt;&quot;Objective-C Version&quot;&lt;/span&gt;, i32 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;i32 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, !&lt;span class=&quot;string&quot;&gt;&quot;Objective-C Image Info Version&quot;&lt;/span&gt;, i32 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;i32 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, !&lt;span class=&quot;string&quot;&gt;&quot;Objective-C Image Info Section&quot;&lt;/span&gt;, !&lt;span class=&quot;string&quot;&gt;&quot;__DATA, __objc_imageinfo, regular, no_dead_strip&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;i32 &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, !&lt;span class=&quot;string&quot;&gt;&quot;Objective-C Garbage Collection&quot;&lt;/span&gt;, i32 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;i32 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, !&lt;span class=&quot;string&quot;&gt;&quot;Objective-C Class Properties&quot;&lt;/span&gt;, i32 &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;i32 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, !&lt;span class=&quot;string&quot;&gt;&quot;PIC Level&quot;&lt;/span&gt;, i32 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; !&amp;#123;!&lt;span class=&quot;string&quot;&gt;&quot;Apple LLVM version 9.0.0 (clang-900.0.39.2)&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以简单看一下 main 方法，看不懂无所谓，我也看不懂。只是了解这个过程就可以了。&lt;/p&gt;
&lt;p&gt;接下来 LLVM 会对代码进行编译优化，例如针对全局变量优化、循环优化、尾递归优化等，这些我了解的不是太多，所以不能乱说。想要了解的同学，可以看一下这篇文章：&lt;a href=&quot;http://blog.csdn.net/dashuniuniu/article/details/50385528&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《LLVM 全时优化》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后就是输出汇编代码。&lt;/p&gt;
&lt;h4 id=&quot;6-汇编&quot;&gt;&lt;a href=&quot;#6-汇编&quot; class=&quot;headerlink&quot; title=&quot;6.汇编&quot;&gt;&lt;/a&gt;6.汇编&lt;/h4&gt;&lt;p&gt;在这一阶段，汇编器将可读的汇编代码转化为机器代码。最终产物就是 &lt;strong&gt;以 .o 结尾的目标文件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;针对下部分代码：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#define APP_VERSION &lt;span class=&quot;string&quot;&gt;&quot;V1.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char *version &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; APP_VERSION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printf(&lt;span class=&quot;string&quot;&gt;&quot;version is %s&quot;&lt;/span&gt;,version);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以使用 clang 命令 &lt;code&gt;clang -c main.m&lt;/code&gt; 生成目标文件 mian.o。我就不写打开后的内容了，都是二进制，也看不懂。&lt;/p&gt;
&lt;h4 id=&quot;7-链接&quot;&gt;&lt;a href=&quot;#7-链接&quot; class=&quot;headerlink&quot; title=&quot;7.链接&quot;&gt;&lt;/a&gt;7.链接&lt;/h4&gt;&lt;p&gt;这一阶段是将上个阶段生成的&lt;strong&gt;目标文件&lt;/strong&gt;和引用的&lt;strong&gt;静态库&lt;/strong&gt;链接起来，最终生成可执行文件。&lt;/p&gt;
&lt;p&gt;我们可以用 clang 命令 &lt;code&gt;clang main.m&lt;/code&gt; 生成可执行文件 a.out (不指定名字默认命名为 a.out)。然后使用 &lt;code&gt;file a.out&lt;/code&gt; 命令查看其类型：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a.out: Mach-O &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;-bit executable x86_64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出可执行文件类型为 &lt;code&gt;Mach-O&lt;/code&gt; 类型，在 MAC OS 和 iOS 平台的可执行文件都是这种类型。因为我使用的是模拟器，所以处理器指令集为 &lt;code&gt;x86_64&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;至此编译阶段完成。&lt;/p&gt;
&lt;h4 id=&quot;8-Xcode-中一次完整的-build&quot;&gt;&lt;a href=&quot;#8-Xcode-中一次完整的-build&quot; class=&quot;headerlink&quot; title=&quot;8.Xcode 中一次完整的 build&quot;&gt;&lt;/a&gt;8.Xcode 中一次完整的 build&lt;/h4&gt;&lt;p&gt;最后我们先来看一下 Xcode 中的 build 日志，完整的看一遍这个过程。打开 Xcode 的 Log Navigator,选中 Build 这一项我们可以看到这次 build 的日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/build_log.png&quot; alt=&quot;build_log&quot;&gt;&lt;/p&gt;
&lt;p&gt;日志是按照 target 进行分段的。当前工程中，通过 Pod 引入了 &lt;code&gt;YYCache&lt;/code&gt;、&lt;code&gt;YYImage&lt;/code&gt;、&lt;code&gt;AFNetworking&lt;/code&gt; 三个库，除此之外还有一个 &lt;code&gt;Pods-Test&lt;/code&gt; 和项目本身的 target。每个 target 之间的日志格式都是一样的，因此我们只针对一个 target 进行分析。这里只针对项目本身 target，也就是 &lt;code&gt;Test&lt;/code&gt; 进行分析。也就是下面这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/test_build_log.png&quot; alt=&quot;test_build_log&quot;&gt;&lt;/p&gt;
&lt;p&gt;看着很乱套，整理完之后，屡一下大概是这个流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译信息写入辅助文件，创建编译后的文件架构 （test.app)。&lt;/li&gt;
&lt;li&gt;处理打包信息。&lt;/li&gt;
&lt;li&gt;执行 CocoaPods 编译前脚本。例如这里的 &lt;code&gt;Check Pods Manifest.lock&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;编译各种 .m 文件（.h 文件不参与编译）。&lt;/li&gt;
&lt;li&gt;链接所需要的 framework。&lt;/li&gt;
&lt;li&gt;编译 ImageAssets。&lt;/li&gt;
&lt;li&gt;编译 Storyboard 等相关文件。&lt;/li&gt;
&lt;li&gt;处理 info.plist 文件。&lt;/li&gt;
&lt;li&gt;链接 Storyboards。&lt;/li&gt;
&lt;li&gt;执行 CocoaPods 相关脚本，可以在 Build Phases 中查看这些脚本。&lt;/li&gt;
&lt;li&gt;创建 .app 文件。&lt;/li&gt;
&lt;li&gt;对 .app 文件进行签名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里我们针对第 4 步详细说一下。我们选取其中一个文件 &lt;code&gt;ViewController.m&lt;/code&gt; 的日志进行分析：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/viewcontroller_build_log.png&quot; alt=&quot;viewcontroller_build_log&quot;&gt;&lt;/p&gt;
&lt;p&gt;将 log 信息整理一下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. CompileC /.../Test.build/Objects-normal/x86_64/ViewController.o Test/ViewController.m normal x86_64 objective-c com.apple.compilers.llvm.clang.1_0.compiler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. cd /Users/zhoubo/Test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. export LANG=en_US.US-ASCII&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   export PATH=&amp;quot;/Applications/Xcode.app/Contents/Developer/../sbin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. clang -x objective-c &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -arch x86_64 -fmessage-length=0...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -fobjc-arc...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -Wno-missing-field-initializers...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -DDEBUG=1...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -isysroot .../iPhoneSimulator11.2.sdk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -I ONE PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -F ONE PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -c /../ViewController.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 -o /../ViewController.o&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应解释如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 log 表述任务起点。&lt;/li&gt;
&lt;li&gt;进入对应工作目录。&lt;/li&gt;
&lt;li&gt;对 LANG 和 PATH 环境变量执行设置。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;clang 命令开始:&lt;/p&gt;
 &lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-x : 所使用语言，此处为 Objective-C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-arch x86_64 : 处理器指令集为 x86_64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-fobjc-arc ： 一系列以 -f 开头，指定此文件使用 ARC 环境。你可以通过 Build Phases 设置对每个文件是否支持 ARC。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-Wno-missing-field-initializers : 一系列以 -w 开头指令，编译警告选项，可以通过这个指令定制编译选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-DDEBUG&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : 一些以 -D 开头的，指的是预编译宏。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-isysroot .../iPhoneSimulator11.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.sdk : 编译时采用的 iOS SDK 版本。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-I : 把编译信息写入文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-F : 链接过程中所需要的 framework&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-c : 编译文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-o : 编译中间产物&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;9-关于-dSYM-文件&quot;&gt;&lt;a href=&quot;#9-关于-dSYM-文件&quot; class=&quot;headerlink&quot; title=&quot;9.关于 dSYM 文件&quot;&gt;&lt;/a&gt;9.关于 dSYM 文件&lt;/h4&gt;&lt;p&gt;每次我们编译过后，都会生成一个 dSYM 文件。这个文件中，存储了 16 进制的函数地址映射表。在 APP 执行的二进制文件中，是通过地址来调用方法的。当发生了 crash，可以通过 dSYM 文件进行地址映射，找到具体的函数调用栈。&lt;/p&gt;
&lt;h3 id=&quot;App-启动阶段&quot;&gt;&lt;a href=&quot;#App-启动阶段&quot; class=&quot;headerlink&quot; title=&quot;App 启动阶段&quot;&gt;&lt;/a&gt;App 启动阶段&lt;/h3&gt;&lt;p&gt;上个阶段，最终产物为&lt;strong&gt;可执行文件&lt;/strong&gt;，文件格式为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Mach-o&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mach-o&lt;/a&gt;。这一阶段，就以这个文件开始，详细描述一下 APP 启动过程。&lt;/p&gt;
&lt;h4 id=&quot;1-过程概览&quot;&gt;&lt;a href=&quot;#1-过程概览&quot; class=&quot;headerlink&quot; title=&quot;1.过程概览&quot;&gt;&lt;/a&gt;1.过程概览&lt;/h4&gt;&lt;p&gt;这一过程分为多个阶段，简单梳理一下，可以使大脑有一个清晰的脑回路，不至于越看越懵逼。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统准备阶段。&lt;/li&gt;
&lt;li&gt;将 dyld 加载到 App 进程中 (Dyld)。&lt;/li&gt;
&lt;li&gt;加载 App 所需要的动态库 (Load Dylibs)。&lt;/li&gt;
&lt;li&gt;Rebase &amp;amp; Bind。&lt;/li&gt;
&lt;li&gt;Objc setup。&lt;/li&gt;
&lt;li&gt;Initializers。&lt;/li&gt;
&lt;li&gt;mian()。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方的一张流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/加载过程.png&quot; alt=&quot;加载过程&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-概念解释&quot;&gt;&lt;a href=&quot;#2-概念解释&quot; class=&quot;headerlink&quot; title=&quot;2.概念解释&quot;&gt;&lt;/a&gt;2.概念解释&lt;/h4&gt;&lt;p&gt;在讲述整个过程之前，先解释两个概念：&lt;strong&gt;Mach-O 文件&lt;/strong&gt; 和 &lt;strong&gt;dyld&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&quot;Mach-O&quot;&gt;&lt;a href=&quot;#Mach-O&quot; class=&quot;headerlink&quot; title=&quot;.Mach-O&quot;&gt;&lt;/a&gt;.Mach-O&lt;/h5&gt;&lt;p&gt;Mach-O 是一种文件格式，主要用于 iOS、MacOS、WatchOS 等 Apple 操作系统。这种文件格式可用于一下几种文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以行文件 （Mach-O Executable）&lt;/li&gt;
&lt;li&gt;Dylib 动态库&lt;/li&gt;
&lt;li&gt;Bundle 无法被连接的动态库，只能通过 dlopen() 加载&lt;/li&gt;
&lt;li&gt;Image，这里指的是 Executable，Dylib 或者 Bundle 的一种，下文中会提到。&lt;/li&gt;
&lt;li&gt;Framework 动态库和对应的头文件和资源文件的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mach-O 文件的格式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/mach-o.jpg&quot; alt=&quot;Mach-O文件格式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header，包含文件的 CPU 架构，例如 x86，arm7，arm64 等。&lt;/li&gt;
&lt;li&gt;Load commands，包含文件的组织架构和在虚拟内存布局方式。&lt;/li&gt;
&lt;li&gt;Data，包含 Load commands 中需要的各个 segment，每个 segment 中又包含多个 section。当运行一个可执行文件时，虚拟内存 (virtual memory) 系统将 segment 映射到进程的地址空间上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上个阶段中我们知道如何产生可执行文件（a.out），这里我们可以用 size 工具来查看这个可执行文件的 segment 内容，执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcrun size -x -l -m a.out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以得到如下结果：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Segment __PAGEZERO: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100000000 (vmaddr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x0 fileoff &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Segment __TEXT: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x1000 (vmaddr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100000000 fileoff &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __text: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x43 (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100000f30 offset &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __stubs: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x6 (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100000f74 offset &lt;span class=&quot;number&quot;&gt;3956&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __stub_helper: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x1a (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100000f7c offset &lt;span class=&quot;number&quot;&gt;3964&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __cstring: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x15 (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100000f96 offset &lt;span class=&quot;number&quot;&gt;3990&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __unwind_info: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x48 (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100000fac offset &lt;span class=&quot;number&quot;&gt;4012&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	total &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xc0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Segment __DATA: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x1000 (vmaddr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100001000 fileoff &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __nl_symbol_ptr: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x10 (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100001000 offset &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __la_symbol_ptr: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x8 (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100001010 offset &lt;span class=&quot;number&quot;&gt;4112&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Section __objc_imageinfo: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x8 (addr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100001018 offset &lt;span class=&quot;number&quot;&gt;4120&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	total &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Segment __LINKEDIT: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x1000 (vmaddr &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100002000 fileoff &lt;span class=&quot;number&quot;&gt;8192&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x100003000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;长话短说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Segment __PAGEZERO&lt;/code&gt;。大小为 4GB，规定进程地址空间的前 4GB 被映射为不可读不可写不可执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Segment __TEXT&lt;/code&gt;。包含可执行的代码，以只读和可执行方式映射。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Segment __DATA&lt;/code&gt;。包含了将会被更改的数据，以可读写和不可执行方式映射。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Segment __LINKEDIT&lt;/code&gt;。包含了方法和变量的元数据，代码签名等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;dyld&quot;&gt;&lt;a href=&quot;#dyld&quot; class=&quot;headerlink&quot; title=&quot;dyld&quot;&gt;&lt;/a&gt;dyld&lt;/h5&gt;&lt;p&gt;动态加载器（dynamic loader）。它是开源的，如果有兴趣，你可以阅读它的&lt;a href=&quot;https://opensource.apple.com/source/dyld/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt;。dyld1 已经过时，不用去理解。目前大多用的是 dyld2。在 WWDC2017 上 Apple 新推出了 dyld3，目前只在 iOS 系统 App 上使用，后面应该会普及。这一阶段最后会详细介绍一下 dyld3，这里就不描述了。&lt;/p&gt;
&lt;p&gt;下面开始正式讲解启动过程。&lt;/p&gt;
&lt;h4 id=&quot;3-系统准备阶段&quot;&gt;&lt;a href=&quot;#3-系统准备阶段&quot; class=&quot;headerlink&quot; title=&quot;3.系统准备阶段&quot;&gt;&lt;/a&gt;3.系统准备阶段&lt;/h4&gt;&lt;p&gt;点击 APP 之后，到加载 dyld 动态加载器这一过程中，系统做了很多事情，大体分为如下图几个阶段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/dyld 之前准备工作.png&quot; alt=&quot;dyld 加载之前准备工作&quot;&gt;&lt;/p&gt;
&lt;p&gt;大部分同学没有深入研究过这部分内容，我也没有深入研究过。所以我尽量复杂问题简单化，以最简单的方式将这些过程讲述明白。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击 APP 之后，系统会创建一个进程。然后使用 &lt;code&gt;load_init_program&lt;/code&gt; 函数加载系统初始化的进程。然后再方法内调用 &lt;code&gt;load_init_program_at_path&lt;/code&gt;。通过 &lt;code&gt;load_init_program_at_path&lt;/code&gt; 方法调用 &lt;code&gt;__mac_execve&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__mac_execve&lt;/code&gt; 函数会启动新的进程和 task，调用 &lt;code&gt;exec_activate_image&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec_activate_image&lt;/code&gt; 函数会按照二进制的格式分发映射内存的函数。&lt;code&gt;Mach-O&lt;/code&gt; 文件会由 &lt;code&gt;exec_mach_imgact&lt;/code&gt; 处理。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;exec_mach_imgact&lt;/code&gt; 函数中，会检测 &lt;code&gt;Mach-O&lt;/code&gt; header，解析其架构等信息，文件是否合法等；先拷贝 &lt;code&gt;Mach-O&lt;/code&gt; 文件到内存中；然后拷贝 &lt;code&gt;Mach-O&lt;/code&gt; 文件到内存中；之后是 dyld 相关处理工作；最后释放资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load_machfile&lt;/code&gt; 函数负责 &lt;code&gt;Mach-O&lt;/code&gt; 文件加载相关工作。为当前 task 分配可执行内存；加载 &lt;code&gt;Mach-O&lt;/code&gt; 中 load command 部分的命令；进制数据段执行，防止溢出漏洞攻击，设置 ASLR 等；最后为 &lt;code&gt;exec_mach_imgact&lt;/code&gt; 回传结果。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_machfile&lt;/code&gt; 根据 &lt;code&gt;load_command&lt;/code&gt; 的信息选择不同函数加载数据。其中使用的是 &lt;code&gt;switch-case&lt;/code&gt; 语句，处理的类型有 &lt;code&gt;LC_LOAD_DYLINKER&lt;/code&gt;、&lt;code&gt;LC_ENCRYPTION_INFO_64&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;上一步处理中，有一个 case 为 &lt;code&gt;LC_LOAD_DYLINKER&lt;/code&gt;。进入这个 case 三次，并存在 &lt;code&gt;dylinker_command&lt;/code&gt; 命令，之后会&lt;strong&gt;执行 &lt;code&gt;load_dylinker()&lt;/code&gt; 加载 dyld&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-将-dyld-加载到-App-进程中&quot;&gt;&lt;a href=&quot;#4-将-dyld-加载到-App-进程中&quot; class=&quot;headerlink&quot; title=&quot;4.将 dyld 加载到 App 进程中&quot;&gt;&lt;/a&gt;4.将 dyld 加载到 App 进程中&lt;/h4&gt;&lt;p&gt;在 dyld 的源码中，有一个 &lt;a href=&quot;https://opensource.apple.com/source/dyld/dyld-132.13/src/dyldStartup.s.auto.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dyldStartup.s&lt;/a&gt; 文件。这个文件针对不同的 CPU 架构，定义了不同的启动方法，大同小异。这里会执行到 &lt;code&gt;__dyld_start&lt;/code&gt; 方法，然后调用 &lt;code&gt;dyldbootstrap::start()&lt;/code&gt; 方法，最终调用到 &lt;a href=&quot;https://opensource.apple.com/source/dyld/dyld-132.13/src/dyld.cpp.auto.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dyld.cppp&lt;/a&gt; 中的 &lt;code&gt;dyld::_main()&lt;/code&gt; 方法。部分代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__dyld_start:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushq	$&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;		&lt;span class=&quot;meta&quot;&gt;# push a zero for debugger end of frames marker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movq	%rsp,%rbp	&lt;span class=&quot;meta&quot;&gt;# pointer to base of kernel frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	andq    $&lt;span class=&quot;number&quot;&gt;-16&lt;/span&gt;,%rsp       &lt;span class=&quot;meta&quot;&gt;# force SSE alignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;# call dyldbootstrap::start(app_mh, argc, argv, slide)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movq	&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;(%rbp),%rdi	&lt;span class=&quot;meta&quot;&gt;# param1 = mh into %rdi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;(%rbp),%esi	&lt;span class=&quot;meta&quot;&gt;# param2 = argc into %esi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leaq	&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;(%rbp),%rdx	&lt;span class=&quot;meta&quot;&gt;# param3 = &amp;amp;argv[0] into %rdx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movq	__dyld_start_static(%rip), %r8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leaq	__dyld_start(%rip), %rcx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subq	 %r8, %rcx	&lt;span class=&quot;meta&quot;&gt;# param4 = slide into %rcx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call	__ZN13dyldbootstrap5startEPK12macho_headeriPPKcl	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;meta&quot;&gt;# clean up stack and jump to result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movq	%rbp,%rsp	&lt;span class=&quot;meta&quot;&gt;# restore the unaligned stack pointer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addq	$&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,%rsp	&lt;span class=&quot;meta&quot;&gt;# remove the mh argument, and debugger end frame marker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movq	$&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,%rbp		&lt;span class=&quot;meta&quot;&gt;# restore ebp back to zero&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jmp	*%rax		&lt;span class=&quot;meta&quot;&gt;# jump to the entry point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;_main()&lt;/code&gt; 方法包含了 App 的启动流程，最终返回应用程序 &lt;code&gt;main&lt;/code&gt; 方法的地址，这里省略代码，只标注流程：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_main(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; macho_header* mainExecutableMH, &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; mainExecutableSlide, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* argv[], &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* envp[], &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* apple[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 上下文建立，初始化必要参数，解析环境变量等&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	......	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// instantiate ImageLoader for main executable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sMainExecutable-&amp;gt;setNeverUnload();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gLinkContext.mainExecutable = sMainExecutable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gLinkContext.processIsRestricted = sProcessIsRestricted;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// load shared cache&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		checkSharedRegionDisable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; DYLD_SHARED_CACHE_SUPPORT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mapSharedCache();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// load any inserted libraries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;	( sEnv.DYLD_INSERT_LIBRARIES != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;; ++lib) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				loadInsertedDylib(*lib);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// link main executable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gLinkContext.linkingMainExecutable = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		link(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, ImageLoader::RPathChain(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gLinkContext.linkingMainExecutable = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( sMainExecutable-&amp;gt;forceFlat() ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			gLinkContext.bindFlat = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			gLinkContext.prebindUsage = ImageLoader::kUseNoPrebinding;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// get main address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = (&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)sMainExecutable-&amp;gt;getMain();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;5-加载-App-所需要的动态库&quot;&gt;&lt;a href=&quot;#5-加载-App-所需要的动态库&quot; class=&quot;headerlink&quot; title=&quot;5.加载 App 所需要的动态库&quot;&gt;&lt;/a&gt;5.加载 App 所需要的动态库&lt;/h4&gt;&lt;p&gt;上文提到过，image 实际是 &lt;code&gt;Mach-O&lt;/code&gt; 文件的一种，包括 Executable，Dylib 或者 Bundle。在上节的 &lt;code&gt;dyld::_main()&lt;/code&gt; 函数中可以看出，dyld 会通过调用 &lt;code&gt;instantiateFromLoadedImage&lt;/code&gt; 选择&lt;code&gt;imageLoader&lt;/code&gt; 加载对应可执行文件。&lt;/p&gt;
&lt;p&gt;然后通过 &lt;code&gt;mapSharedCache()&lt;/code&gt; 函数将 &lt;code&gt;/System/Library/Caches/com.apple.dyld/dyld_shared_cache_arm64&lt;/code&gt; 共享的动态库加载到内存，&lt;strong&gt;这也是不同的 App 实现动态库共享机制，不同的 App 的虚拟内存中共享动态库会通过系统的 vm_map 来映射同一块物理内存，从而实现共享动态库。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之后会调用 &lt;code&gt;loadInsertedDylib()&lt;/code&gt; 函数加载环境变量 &lt;code&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; 中的动态库。&lt;code&gt;loadInsertedDylib&lt;/code&gt; 动态库并未做太多工作，主要工作都是调用 &lt;code&gt;load&lt;/code&gt; 函数来处理，&lt;code&gt;dlopen&lt;/code&gt; 也会调用 &lt;code&gt;load&lt;/code&gt; 函数来进行动态库加载。&lt;/p&gt;
&lt;p&gt;再后面调用 &lt;code&gt;link()&lt;/code&gt; 函数递归链接程序所依赖的库。一般一个 App 所依赖的动态库在 100-400 个左右。使用命令 &lt;code&gt;otool -L Test&lt;/code&gt; 可以查看 Test 工程所需要的动态库如下：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/lib/libsqlite3.dylib (compatibility version &lt;span class=&quot;number&quot;&gt;9.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;274.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/lib/libz.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.dylib (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/Accelerate.framework/Accelerate (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation (compatibility version &lt;span class=&quot;number&quot;&gt;150.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;1450.14&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics (compatibility version &lt;span class=&quot;number&quot;&gt;64.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;1129.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/ImageIO.framework/ImageIO (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;822.19&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/QuartzCore.framework/QuartzCore (compatibility version &lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;1.11&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/Security.framework/Security (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;58286.32&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;963.30&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/UIKit.framework/UIKit (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;3698.33&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version &lt;span class=&quot;number&quot;&gt;300.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;1450.14&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/lib/libobjc.A.dylib (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;228.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/usr/lib/libSystem.dylib (compatibility version &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, current version &lt;span class=&quot;number&quot;&gt;1252.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;对于 CocoaPods 中的第三方库，一般是以静态库的方式加载，所以使用 &lt;code&gt;otool -L [文件名]&lt;/code&gt; 并不会看到 Pod 中的库。但是如果 Podfile 中加入了 &lt;code&gt;use_frameworks!&lt;/code&gt;，即以动态库方式加载，才会看到，也就是上面所示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，获取到应用程序 main 函数地址，返回。&lt;/p&gt;
&lt;h4 id=&quot;6-Rebase-amp-Bind&quot;&gt;&lt;a href=&quot;#6-Rebase-amp-Bind&quot; class=&quot;headerlink&quot; title=&quot;6.Rebase &amp;amp; Bind&quot;&gt;&lt;/a&gt;6.Rebase &amp;amp; Bind&lt;/h4&gt;&lt;p&gt;这两个过程，并不是在上面 &lt;code&gt;_main()&lt;/code&gt; 方法返回之后进行的，而是在上一节中 “link main executable” 这一步进行的。&lt;/p&gt;
&lt;p&gt;Apple 为了保证应用安全，应用了两种技术：ASLR (Address space layout randomization) 和 Code sign。&lt;/p&gt;
&lt;p&gt;ASLR 是指 “地址空间布局随机化”。App 启动的时候，程序会被映射到一个逻辑地址空间。如果这个地址固定，很容易根据地址+偏移量计算出函数地址，被攻击。 ASLR 使得这个地址是随机的，防止攻击者直接定位攻击代码位置。&lt;/p&gt;
&lt;p&gt;Code sign 是指代码签名。Apple 使用两层非对称加密，以保证 App 的安全安装。在进行 Code sign 时，是针对每个 page 进行加密，这样在 dyld 加载时，可以针对每个 page 进行独立验证。&lt;/p&gt;
&lt;p&gt;因为使用 ASLR 导致的地址随机，需要加上偏移量才是真正方法地址。调用的一个方法，这个方法的地址可能属于 Mach-O 文件内部，也可能属于其他 Mach-O 文件。&lt;/p&gt;
&lt;p&gt;Rebase 是修复内部符号地址，即修复的是指向当前 Mach-O 文件内部的资源指针，修复过程只是加一个偏移量就可以。&lt;/p&gt;
&lt;p&gt;Bind 是修复外部符号地址，即修复的是指向外部 Mach-O 文件指针。这一过程需要查询符号表，指向其他  Mach-O 文件，比较耗费时间。&lt;/p&gt;
&lt;p&gt;官方给出的一张图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/rebase_bind.png&quot; alt=&quot;rebase_bind&quot;&gt;&lt;/p&gt;
&lt;p&gt;简言之就是，前面步骤加载动态库时地址指偏了，这里进行 fix-up，否则调不到。&lt;/p&gt;
&lt;p&gt;至此，Mach-O 的加载就完事儿了，下面就是 iOS 系统的事情了。&lt;/p&gt;
&lt;h4 id=&quot;7-Objc-Setup&quot;&gt;&lt;a href=&quot;#7-Objc-Setup&quot; class=&quot;headerlink&quot; title=&quot;7.Objc Setup&quot;&gt;&lt;/a&gt;7.Objc Setup&lt;/h4&gt;&lt;p&gt;Objc 是一门动态语言，这一步主要来加载 Runtime 相关的东西。主要做一下几件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把相关的类注册到全局 table 中。&lt;/li&gt;
&lt;li&gt;将 Category 和 Protocol 中的方法注册到对应的类中。&lt;/li&gt;
&lt;li&gt;确保 Selector 的唯一性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一步主要处理自定义的一些类和方法。大部分系统类的 Runtime 初始化已经在 Rebase 和 Bind 中完成了。&lt;/p&gt;
&lt;h4 id=&quot;8-Initializers&quot;&gt;&lt;a href=&quot;#8-Initializers&quot; class=&quot;headerlink&quot; title=&quot;8.Initializers&quot;&gt;&lt;/a&gt;8.Initializers&lt;/h4&gt;&lt;p&gt;这一步进行一些类的初始化。这是一个递归过程，先将依赖的动态库初始化，再对自己自定义的类初始化。主要做的事情有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 Objc 类中的 &lt;code&gt;+[load]&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;调用 C/C++ 标记为 &lt;code&gt;__attribute__(constructor)&lt;/code&gt; 的方法。&lt;/li&gt;
&lt;li&gt;非基本类型的 C++ 静态全局比变量的创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Swift 用已经干掉了 &lt;code&gt;+load&lt;/code&gt; 方法，官方建议使用 &lt;code&gt;initialize&lt;/code&gt; 方法，减少 App 启动时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;9-Main&quot;&gt;&lt;a href=&quot;#9-Main&quot; class=&quot;headerlink&quot; title=&quot;9.Main&quot;&gt;&lt;/a&gt;9.Main&lt;/h4&gt;&lt;p&gt;千辛万苦，我们终于来到了 &lt;code&gt;main()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;基于 C 的程序一般都以 &lt;code&gt;main()&lt;/code&gt; 方法为入口，iOS 系统会为你自动创建 &lt;code&gt;main()&lt;/code&gt; 方法。代码很简单：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, char * argv[])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用的 &lt;code&gt;UIApplicationMain&lt;/code&gt; 方法声明如下：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UIKIT_EXTERN int UIApplicationMain(int argc, char * _Nonnull * _Null_unspecified argv, NSString * _Nullable principalClassName, NSString * _Nullable delegateClassName);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;argc、argv 直接传递给 UIApplicationMain 进行相关处理。&lt;/li&gt;
&lt;li&gt;principalClassName 指定应用程序的类名。这个类必须为 &lt;code&gt;UIApplication&lt;/code&gt; 类型或者其子类。如果为 nil，则使用 &lt;code&gt;UIApplication&lt;/code&gt; 类。&lt;/li&gt;
&lt;li&gt;delegateClassName，指定应用程序代理类。这个类必须遵循 &lt;code&gt;UIApplicationDelegate&lt;/code&gt; 协议。&lt;/li&gt;
&lt;li&gt;UIApplicationMain 会根据 principalClassName 创建 &lt;code&gt;UIApplication&lt;/code&gt; 对象，并根据 delegateClassName 创建 delegate 对象，将这个对象赋值给 &lt;code&gt;UIApplication&lt;/code&gt; 对象的 delegate 属性。&lt;/li&gt;
&lt;li&gt;然后将 App 放入 Main Run Loop 环境中来响应和处理用户交互事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 &lt;code&gt;AppDelegate&lt;/code&gt; 中的一些方法：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;implementation&lt;/span&gt; AppDelegate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 通知进程已启动，但是还未完成显示。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 启动完成，程序准备开始运行。页面显示前最后一次操作机会。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationWillResignActive:(UIApplication *)application &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // App 失去焦点，进入非活动状态。主要实例有：来电话，某些系统弹窗，双击 home 键，下拉显示系统通知栏，上拉显示系统控制中心等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationDidEnterBackground:(UIApplication *)application &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // App 进入后台。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationWillEnterForeground:(UIApplication *)application &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // App 进入前台。冷启动不会收到这个通知。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationDidBecomeActive:(UIApplication *)application &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // App 获得焦点，处于活动状态。冷热启动都会收到这个通知。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationWillTerminate:(UIApplication *)application &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 应用将要退出时，可以在这个方法中保存数据和一些退出前清理工作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 收到内存警告，释放一些内存。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;10-One-more-thing&quot;&gt;&lt;a href=&quot;#10-One-more-thing&quot; class=&quot;headerlink&quot; title=&quot;10.One more thing&quot;&gt;&lt;/a&gt;10.One more thing&lt;/h4&gt;&lt;p&gt;上文说有详细讲一下 dyld3，放到这里了。dyld3 是 WWDC 2017 介绍的新的动态加载器。与 dyld2 对比如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/dyld_2_3.png&quot; alt=&quot;dyld_2_3&quot;&gt;&lt;/p&gt;
&lt;p&gt;两者的区别，通俗一点说就是：dyld2 所有的过程都是在启动时进行的，每次启动都会讲所有过程走一遍；dyld3 分成了两部分，虚线上面的部分在 App 下载安装和版本更新时执行并将结果写入缓存，虚线下面的部分在每次 App 启动执行。&lt;/p&gt;
&lt;p&gt;这样减少了 dyld 加载步骤，也就加快了 APP 启动时间。不过目前 dyld3 只在 Apple 系统 App 才会使用，开发者不能使用。后面应该会普及。&lt;/p&gt;
&lt;p&gt;根据上面的分析过程，我们可以大体总结出，如果要针对 App 做启动优化，可以从哪些方面入手：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少动态库的引入。如果是公司内部自定义组件，可以将某些同类的组件合并为一个。&lt;/li&gt;
&lt;li&gt;为了减少 Rebase &amp;amp; Bind 时间，减少 &lt;code&gt;__DATA&lt;/code&gt; 中的指针数量。&lt;/li&gt;
&lt;li&gt;为了减少 Runtime 注册时间，减少 Category，减少无用的 Class 和 Selector。&lt;/li&gt;
&lt;li&gt;尽量不要在 &lt;code&gt;+[load]&lt;/code&gt; 方法中写东西，减少 &lt;code&gt;__atribute__((constructor))&lt;/code&gt;，减少非基本类型 C++ 静态常量创建。&lt;/li&gt;
&lt;li&gt;将一些第三方库在使用的时候再初始化，lazy load，不要都放在 AppDelegate 中。&lt;/li&gt;
&lt;li&gt;使用 Swift。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;图层渲染阶段&quot;&gt;&lt;a href=&quot;#图层渲染阶段&quot; class=&quot;headerlink&quot; title=&quot;图层渲染阶段&quot;&gt;&lt;/a&gt;图层渲染阶段&lt;/h3&gt;&lt;p&gt;做了一堆准备工作，可算是到了渲染展示界面了。&lt;/p&gt;
&lt;p&gt;图层的布局过程（这里指自动布局），主要分为三步：&lt;strong&gt;设置约束、更新布局、渲染视图&lt;/strong&gt;。这里会结合 view controller 的生命周期来讲解。&lt;/p&gt;
&lt;h4 id=&quot;1-视图布局过程&quot;&gt;&lt;a href=&quot;#1-视图布局过程&quot; class=&quot;headerlink&quot; title=&quot;1.视图布局过程&quot;&gt;&lt;/a&gt;1.视图布局过程&lt;/h4&gt;&lt;h5 id=&quot;Update-Cycle&quot;&gt;&lt;a href=&quot;#Update-Cycle&quot; class=&quot;headerlink&quot; title=&quot;Update Cycle&quot;&gt;&lt;/a&gt;Update Cycle&lt;/h5&gt;&lt;p&gt;在程序启动时，会将 App 放到 Main Run Loop 中来响应和处理用户交互事件。关于 RunLoop，简单说来就是一个循环，只要 App 未被杀死，这个循环就一直存在。每一次循环可以认为是一个迭代周期，这个周期中会相应和处理用户交互事件。&lt;strong&gt;当完成了各种事件处理之后控制流回到 Main Run Loop 那个时间点，开始更新视图&lt;/strong&gt;，更新完进入下一个循环。整个过程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/update_cycle.png&quot; alt=&quot;update_cycle&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 update cycle 这个阶段，系统会根据计算出来的新的 frame 对视图进行重绘。这个过程很快，所以用户感觉不到延迟卡顿。因为视图的更新是按照周期来的，所以有时候修改了约束、添加了视图或者修改了 frame 并不会立即重绘视图。接下来就详细介绍这一过程。&lt;/p&gt;
&lt;h5 id=&quot;约束&quot;&gt;&lt;a href=&quot;#约束&quot; class=&quot;headerlink&quot; title=&quot;约束&quot;&gt;&lt;/a&gt;约束&lt;/h5&gt;&lt;p&gt;一个视图的 frame 包含了视图的位置和大小，通过这个 frame（和当前坐标系） 可以确定视图的具体位置。约束的本质就是设置一系列的关系，计算布局时会将这些关系转化为一系列线性方程式，通过线性方程式求解得出 x,y,width,height，从而确定视图位置。这一阶段是从下向上（from subview to super view)，为下一步布局准备消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;updateConstraints()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个方法用来在自动布局中动态改变视图约束。一般情况下，这个方法&lt;strong&gt;只应该被重载，不应该手动调用&lt;/strong&gt;。在开发过程中，一些静态约束，可以在视图初始化方法或者 &lt;code&gt;viewDidLoad()&lt;/code&gt; 方法中设置；对于一些动态约束，例如 &lt;code&gt;UILabel&lt;/code&gt; 有时需要随着文案字数改变大小，需要动态修改约束，这时候可以重载此方法，将动态修改约束代码写在次方法里。&lt;/p&gt;
&lt;p&gt;还有一些操作会将视图标记，在下一个 update cycle 中自动触发这个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;激活/禁用约束。&lt;/li&gt;
&lt;li&gt;改变约束的大小或者优先级。&lt;/li&gt;
&lt;li&gt;改变视图层级。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;setNeedsUpdateConstraints()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你希望视图在下一个 update cycle 中一定要调用 &lt;code&gt;updateConstraints()&lt;/code&gt; 方法，你可以调用此方法，这样就给视图打上一个标记，&lt;strong&gt;如果有必要&lt;/strong&gt;在下一个 update cycle 便会调用 &lt;code&gt;updateConstraints()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里说“如果有必要“，是因为如果系统检测视图没有任何变化，即使标记了，也不会调用此方法，避免耗费性能。所以标记了，只是告诉系统到时候 check 一下，是否要更新约束。下面一些方法同理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;updateConstraintsIfNeeded()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你不想等到 run loop 末尾，进入 update cycle 的时候，再去检查标记并更新约束。你想立刻检查被打上标记的视图，更新约束，可以调用此方法。同样的，调用此方法只会检查那些被标记的视图，&lt;strong&gt;如果有必要&lt;/strong&gt;，才会调用 &lt;code&gt;updateConstraints()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;invalidateIntrinsicContentSize()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有些视图(例如 UILabel)有 &lt;code&gt;intrinsicContentSize&lt;/code&gt; 属性，这是根据视图内容得到的固有大小。你也可以通过重载来自定义这个大小，重载之后，你需要调用 &lt;code&gt;invalidateIntrinsicContentSize()&lt;/code&gt; 方法来标记 &lt;code&gt;intrinsicContentSize&lt;/code&gt; 已经过期，需要再下一个 update cycle 中重新计算。&lt;/p&gt;
&lt;h5 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h5&gt;&lt;p&gt;根据约束计算出视图大小和位置，下一步就是布局。这一部分是从上向下（from super view to subview)，使用上一步计算出来的大小和位置去设置视图的 center 和 bounds。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;layoutSubviews()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个方法会对&lt;strong&gt;视图&lt;/strong&gt;和其&lt;strong&gt;子视图&lt;/strong&gt;进行重新定位和大小调整。这个方法很昂贵，因为它会处理当前视图和其自视图的布局情况，还会调用自视图的 &lt;code&gt;layoutSubviews()&lt;/code&gt;，层层调用。同样，这个方法&lt;strong&gt;只应该被重载，不应该手动调用&lt;/strong&gt;。当你需要更新视图 frame 时，可以重载这个方法。&lt;/p&gt;
&lt;p&gt;一些操作可能会触发这个方法，间接触发比手动调用资源消耗要小得多。有以下几种情况会触发此方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改视图大小。&lt;/li&gt;
&lt;li&gt;添加视图 （addSubview)。&lt;/li&gt;
&lt;li&gt;UIScrollView 滚动。&lt;/li&gt;
&lt;li&gt;设备旋转。&lt;/li&gt;
&lt;li&gt;更新视图约束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些情况有的会告诉系统视图 frame 需要重新计算，从而调用 &lt;code&gt;layoutSubviews()&lt;/code&gt;，也有的会直接触发 &lt;code&gt;layoutSubviews()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setNeedsLayout()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此方法会将视图标记，告诉系统视图的布局需要重新计算。然后再下一个 update cycle 中，系统就会调用视图的 &lt;code&gt;layoutSubviews()&lt;/code&gt; 方法。同样的，&lt;strong&gt;如果有必要，系统才会去调用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;layoutIfNeeded()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setNeedsLayout&lt;/code&gt; 是标记视图，在下个 update cycle 中可能会调用 &lt;code&gt;layoutSubviews()&lt;/code&gt; 方法。而 &lt;code&gt;layoutIfNeeded()&lt;/code&gt; 是告诉系统立即调用 &lt;code&gt;layoutSubviews()&lt;/code&gt; 方法。当然，调用了 &lt;code&gt;layoutIfNeeded()&lt;/code&gt; 方法只会，系统会 check 视图是否有必要刷新，&lt;strong&gt;如果有必要&lt;/strong&gt;，系统才会调用 &lt;code&gt;layoutSubviews()&lt;/code&gt; 方法。如果你再同一个 run loop 中调用了两次 &lt;code&gt;layoutIfNeeded()&lt;/code&gt;，两次之间没有视图更新，那么第二次则不会触发 &lt;code&gt;layoutSubviews()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在做约束动画时，这个方法很有用。在动画之前，调用此方法以确保其他视图已经更新。然后在 animation block 中设置新的约束后，调用此方法来动画到新的状态。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self.view layoutIfNeeded];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [UIView animateWithDuration:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self changeConstraints];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.view layoutIfNeeded];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;渲染&quot;&gt;&lt;a href=&quot;#渲染&quot; class=&quot;headerlink&quot; title=&quot;渲染&quot;&gt;&lt;/a&gt;渲染&lt;/h5&gt;&lt;p&gt;视图的显示包含了颜色、文本、图片和 Core Graphics 绘制等。与约束、布局两个步骤类似，这里也有一些方法用来刷新渲染。这一过程是从上向下（from super view to subview)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;draw(_:)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UIView 的 &lt;code&gt;draw&lt;/code&gt; 方法（OC 中的 drawRect）用来绘制视图显示的内容，只作用于当前视图，不会影响子视图。依然，这个方法应该通过其他方法触发，而不应该手动调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setNeedsDisplay()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个方法类似于布局中的 &lt;code&gt;setNeedsLayout()&lt;/code&gt;。调用此方法会将视图标记，然后在下一个 update cycle 系统遍历被标记的视图，调用其  &lt;code&gt;draw()&lt;/code&gt; 方法进行重绘。大部分 UI 组件如果有更新，都会进行标记，在下个 update cycle 进行重绘。一般不需要显式调用此方法。&lt;/p&gt;
&lt;p&gt;这一步骤没有类似于 &lt;code&gt;layoutIfNeeded()&lt;/code&gt; 这样的方法来立即刷新。通常等到下一个 update cycle 再刷新也没影响。&lt;/p&gt;
&lt;h5 id=&quot;三者联系&quot;&gt;&lt;a href=&quot;#三者联系&quot; class=&quot;headerlink&quot; title=&quot;三者联系&quot;&gt;&lt;/a&gt;三者联系&lt;/h5&gt;&lt;p&gt;布局过程并不是单向的，而是一个 &lt;strong&gt;约束-布局&lt;/strong&gt; 的迭代过程。布局过程有可能会影响约束，从而触发 &lt;code&gt;updateConstraints()&lt;/code&gt;。只要确定好布局，判断是否需要重绘，然后展示。这一轮完毕后进入下一个 runloop。它们的大体流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/compile-iOS/布局过程.png&quot; alt=&quot;布局过程&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面说的这三个过程的方法，有些类似，记起来比较乱，可以通过下面的表格对比记忆：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法作用&lt;/th&gt;
&lt;th&gt;约束&lt;/th&gt;
&lt;th&gt;布局&lt;/th&gt;
&lt;th&gt;渲染&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;刷新方法，可以重载，不可直接调用&lt;/td&gt;
&lt;td&gt;updateConstraints&lt;/td&gt;
&lt;td&gt;layoutSubviews&lt;/td&gt;
&lt;td&gt;draw&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;标记刷新方法，使视图在下一个 update cycle 调用刷新方法&lt;/td&gt;
&lt;td&gt;setNeedsUpdateConstraints &lt;br&gt; invalidateIntrinsicContentSize&lt;/td&gt;
&lt;td&gt;setNeedsLayout&lt;/td&gt;
&lt;td&gt;setNeedsDisplay&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updateConstraintsIfNeeded&lt;/td&gt;
&lt;td&gt;layoutIfNeeded&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;触发刷新方法的操作&lt;/td&gt;
&lt;td&gt;激活/禁用约束 &lt;br&gt; 改变约束的大小或者优先级 &lt;br&gt; 改变视图层级&lt;/td&gt;
&lt;td&gt;修改视图大小 &lt;br&gt; 添加视图 （addSubview) &lt;br&gt; UIScrollView 滚动 &lt;br&gt; 设备旋转 &lt;br&gt; 更新视图约束&lt;/td&gt;
&lt;td&gt;修改视图 bounds&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;2-View-Controller-生命周期&quot;&gt;&lt;a href=&quot;#2-View-Controller-生命周期&quot; class=&quot;headerlink&quot; title=&quot;2.View Controller 生命周期&quot;&gt;&lt;/a&gt;2.View Controller 生命周期&lt;/h4&gt;&lt;p&gt;校招找工作时，经常被问到 VC 的生命周期。最近面试其他人，也经常问这个问题。无论是校招时候的我，还是我面试的其他人，哪怕是工作三五年的，都回答不好这个问题。&lt;/p&gt;
&lt;p&gt;这是一个基础问题，没有太多技术难度，应该掌握。&lt;/p&gt;
&lt;h5 id=&quot;单个-View-Controller-生命周期&quot;&gt;&lt;a href=&quot;#单个-View-Controller-生命周期&quot; class=&quot;headerlink&quot; title=&quot;单个 View Controller 生命周期&quot;&gt;&lt;/a&gt;单个 View Controller 生命周期&lt;/h5&gt;&lt;p&gt;以方法调用顺序描述单个 View Controller 生命周期，依次为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;load&lt;/strong&gt;&lt;br&gt;  类加载时调用，在 main 函数之前。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;initialize&lt;/strong&gt;&lt;br&gt;  类第一次初始化时调用，在main 函数之后。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;类初始化相关方法&lt;/strong&gt;&lt;br&gt;  &lt;code&gt;[initWithCoder:]&lt;/code&gt; 在使用 storeboard 调用。&lt;code&gt;[initWithNibName: bundle:]&lt;/code&gt; 在使用自定义 nib 文件时调用。还有其他 init 方法则是普通初始化类时调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;loadView&lt;/strong&gt;&lt;br&gt;  开始加载视图，在这之前都没有视图。除非手动调用，否则在 View Controller 生命周期只会调用一次。在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;viewDidLoad&lt;/strong&gt;&lt;br&gt;  View Controller 生命周期中只会调用一次。类中成员变量、子视图等一些数据的初始化都放在这个方法里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;viewWillAppear&lt;/strong&gt;&lt;br&gt;  视图将要展示前调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;viewWillLayoutSubviews&lt;/strong&gt;&lt;br&gt;  将要对子视图进行布局。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;viewDidLayoutSubviews&lt;/strong&gt;&lt;br&gt;  已完成子视图布局，第一时间拿到 view 的具体 frame。一些依赖布局或者大小的代码都应该放在这个方法。放在之前的方法中，视图还没有布局，frame 都是 0；放在后面的方法中，可能因为一些改动，布局或者位置变量发生改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;viewDidAppear&lt;/strong&gt;&lt;br&gt;  视图显示完成调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;viewWillDisappear&lt;/strong&gt;&lt;br&gt;  视图即将消失时调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;viewDidDisappear&lt;/strong&gt;&lt;br&gt;  视图已经消失时调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dealloc&lt;/strong&gt;&lt;br&gt;  View Controller 被释放时调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;两个-View-Controller-进行转场时各自方法调用时机&quot;&gt;&lt;a href=&quot;#两个-View-Controller-进行转场时各自方法调用时机&quot; class=&quot;headerlink&quot; title=&quot;两个 View Controller 进行转场时各自方法调用时机&quot;&gt;&lt;/a&gt;两个 View Controller 进行转场时各自方法调用时机&lt;/h5&gt;&lt;p&gt;不同的转场方式，两个 VC 之间方法调用顺序不同。常见的有以下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  push 操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New viewDidLoad&lt;/li&gt;
&lt;li&gt;Current viewWillDisappear&lt;/li&gt;
&lt;li&gt;New viewWillAppear&lt;/li&gt;
&lt;li&gt;New viewWillLayoutSubviews&lt;/li&gt;
&lt;li&gt;New viewDidLayoutSubviews&lt;/li&gt;
&lt;li&gt;Current viewDidDisappear&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New viewDidAppear&lt;/p&gt;
&lt;p&gt;Pop 操作（上一步的 New 在这里变为 Current，下同）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Current viewWillDisappear&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;New viewWillAppear&lt;/li&gt;
&lt;li&gt;Current viewDidDisappear&lt;/li&gt;
&lt;li&gt;New viewDidappear&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Page Curling (UIPageViewControllerTransitionStylePageCurl)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  Normal 正常翻页操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New viewDidLoad&lt;/li&gt;
&lt;li&gt;Current viewWillDisappear&lt;/li&gt;
&lt;li&gt;New viewWillAppear&lt;/li&gt;
&lt;li&gt;New viewWillLayoutSubviews&lt;/li&gt;
&lt;li&gt;New viewDidLayoutSubviews&lt;/li&gt;
&lt;li&gt;Current viewDidDisappear&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New viewDidAppear&lt;/p&gt;
&lt;p&gt;Canceled 翻到一半取消&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New viewWillAppear&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;New viewWillAppear&lt;/li&gt;
&lt;li&gt;Current viewWillDisappear&lt;/li&gt;
&lt;li&gt;New viewWillLayoutSubviews&lt;/li&gt;
&lt;li&gt;New viewDidLayoutSubviews&lt;/li&gt;
&lt;li&gt;New viewWillDisappear&lt;/li&gt;
&lt;li&gt;Current viewWillAppear&lt;/li&gt;
&lt;li&gt;New viewDidDisappear&lt;/li&gt;
&lt;li&gt;Current viewDidAppear&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Page Scrolling (UIPageViewControllerTransitionStyleScroll)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  Normal 正常滑动翻页操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New viewDidLoad&lt;/li&gt;
&lt;li&gt;New viewWillAppear&lt;/li&gt;
&lt;li&gt;Current viewWillDisappear&lt;/li&gt;
&lt;li&gt;New viewWillLayoutSubviews&lt;/li&gt;
&lt;li&gt;New viewDidLayoutSubviews&lt;/li&gt;
&lt;li&gt;New viewDidAppear&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Current viewDidDisappear&lt;/p&gt;
&lt;p&gt;Canceled 滑到一半取消&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New viewWillAppear&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Current viewWillDisappear&lt;/li&gt;
&lt;li&gt;Current viewWillAppear&lt;/li&gt;
&lt;li&gt;Current viewDidAppear&lt;/li&gt;
&lt;li&gt;New viewWillDisappear&lt;/li&gt;
&lt;li&gt;New viewDidDisappear&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看出，不同的专场方式，两个 View Cotroller 之间的生命周期方法调用顺序是不一样的。很混乱是吧，不用强记，只需要知道这个 case，在开发是注意就好了。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;以上基本就是一个工程从编译到启动的所有过程。深入理解这一过程，可以帮助我们更好的开发。因为文章比较长，中间难免有一些纰漏。如果发现请指出，我会尽快修改。&lt;/p&gt;
&lt;h4 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.objc.io/issues/6-build-tools/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc-Issues-Build-Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/Hello_Hwc/article/details/78317863&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解iOS App的启动过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/I60p2M-IHDmeUanDUkFdVw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XNU、dyld源码分析Mach-O和动态库的加载过程(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/fdDPyjRkVf9AdWiikBagHg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XNU、dyld 源码分析，Mach-O 和动态库的加载过程 (下)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tech.gc.com/demystifying-ios-layout/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demystifying iOS Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wangling.me/2014/02/the-inconsistent-order-of-view-transition-events.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Inconsistent Order of View Transition Events&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名 coder，每天的工作不是解 bug，就是写 bug。有些东西，了解了并不一定有利于写 bug，但是有利于解 bug。&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>我所理解的 Block</title>
    <link href="http://yoursite.com/2018/02/28/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84Block/"/>
    <id>http://yoursite.com/2018/02/28/我所理解的Block/</id>
    <published>2018-02-28T12:10:27.000Z</published>
    <updated>2018-05-13T13:16:33.166Z</updated>
    
    <content type="html">&lt;p&gt;关于 block 的文章，网上已经有很多了。我这里只是将这个知识点再梳理一下，做一下记录。毕竟年纪大了，容易忘事。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;抛砖引玉&quot;&gt;&lt;a href=&quot;#抛砖引玉&quot; class=&quot;headerlink&quot; title=&quot;抛砖引玉&quot;&gt;&lt;/a&gt;抛砖引玉&lt;/h4&gt;&lt;p&gt;围绕 block 所产生的问题，太多太多。这里我将这些问题罗列出来，如果你对某些问题感到懵逼，可以在下文中找到答案。找不到，私信我。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要用 block？毕竟它的语法难记，还容易产生内存泄漏。&lt;/li&gt;
&lt;li&gt;block 的各种书写格式，你是否了解？&lt;/li&gt;
&lt;li&gt;按内存区这一维度划分，block 可以分为哪几种类型，如何定义的？&lt;/li&gt;
&lt;li&gt;block 是 Objective-C 对象吗？&lt;/li&gt;
&lt;li&gt;block 内部实现原理是怎样的？&lt;/li&gt;
&lt;li&gt;怎样写会造成循环引用，又是如何避免循环引用？&lt;/li&gt;
&lt;li&gt;如果以上问题你都了解，可以不用往下看了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;为什么使用-Block&quot;&gt;&lt;a href=&quot;#为什么使用-Block&quot; class=&quot;headerlink&quot; title=&quot;为什么使用 Block&quot;&gt;&lt;/a&gt;为什么使用 Block&lt;/h4&gt;&lt;p&gt;block 的唯一好处就是：&lt;strong&gt;使代码变得更简洁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们可以向一个方法以参数的形式传递一个 block，作为方法的 callback 函数。类似于向方法传递一个函数指针。这样就不必再声明一个新的方法，并调用，在一定程度上简化了代码。下面有一个例子：&lt;/p&gt;
&lt;p&gt;使用 notification 时，常规方式是注册一个 selector 并实现对应的方法，像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(keyboardWillShow:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name:&lt;span class=&quot;built_in&quot;&gt;UIKeyboardWillShowNotification&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)keyboardWillShow:(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *)notification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Notification-handling code goes here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果使用 block，可以写成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserverForName:&lt;span class=&quot;built_in&quot;&gt;UIKeyboardWillShowNotification&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; queue:[&lt;span class=&quot;built_in&quot;&gt;NSOperationQueue&lt;/span&gt; mainQueue] usingBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *notif) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;comment&quot;&gt;// Notification-handling code goes here. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外一个简化代码的特性就是，block 可以捕获外部变量。这样就不必再以参数的形式传递，简化的方法的定义和调用。&lt;/p&gt;
&lt;h4 id=&quot;Block-长什么样&quot;&gt;&lt;a href=&quot;#Block-长什么样&quot; class=&quot;headerlink&quot; title=&quot;Block 长什么样&quot;&gt;&lt;/a&gt;Block 长什么样&lt;/h4&gt;&lt;p&gt;在最初接触 block 时，我经常写不对，它的语法太另类。&lt;a href=&quot;http://fuckingblocksyntax.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fucking block syntax&lt;/a&gt; 提供了各种 block 的写法，我这里就直接照搬过来了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;returnType (^blockName)(parameterTypes) = ^returnType(parameters) &amp;#123;...&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;作为属性（property）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;, nullability) returnType (^blockName)(parameterTypes);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;定义方法时，作为方法参数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;调用方法时，作为参数传递&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[someObject someMethodThatTakesABlock:^returnType (parameters) &amp;#123;...&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;作为类型别名 （typedef），增加代码可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; returnType (^TypeName)(parameterTypes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeName blockName = ^returnType(parameters) &amp;#123;...&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Block-内部原理是怎样的&quot;&gt;&lt;a href=&quot;#Block-内部原理是怎样的&quot; class=&quot;headerlink&quot; title=&quot;Block 内部原理是怎样的&quot;&gt;&lt;/a&gt;Block 内部原理是怎样的&lt;/h4&gt;&lt;p&gt;在编译时，编译器会将 block 语法转化成 C 的源代码，再将这部分 C 的源代码编译为编译器处理的代码。我们可以使用 clange (LLVM 编译器) 来完成 “将 block 语法转化为 C++ 源代码 (本质还是 C)” 这一阶段。具体命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clang -rewrite-objc 源代码文件名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;1-一个简单-Block-的结构&quot;&gt;&lt;a href=&quot;#1-一个简单-Block-的结构&quot; class=&quot;headerlink&quot; title=&quot;1.一个简单 Block 的结构&quot;&gt;&lt;/a&gt;1.一个简单 Block 的结构&lt;/h5&gt;&lt;p&gt;下面我们转化一段 OC 代码来分析 block。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;clang -rewrite-objc main.m&lt;/code&gt; 转化如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock) (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ^&amp;#123;printf(&lt;span class=&quot;string&quot;&gt;&quot;test block&quot;&lt;/span&gt;);&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myBlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转化接入后是下面这个样子（主要代码）。因为语法和命名的关系，代码看着很乱，但是逻辑很清晰。为了方便理解，我加了部分注释。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// block 结构体。可以理解为 &#39;block&#39; 这种类型的基本结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __block_impl &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Reserved;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *FuncPtr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 整个 block 的结构，命名有点歧义，理解即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __block_impl impl;	 &lt;span class=&quot;comment&quot;&gt;// __block_impl 类型的成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0* Desc; &lt;span class=&quot;comment&quot;&gt;// Desc 指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 构造函数主要是为两个成员变量赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __main_block_impl_0(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *fp, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0 *desc, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.isa = &amp;amp;_NSConcreteStackBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.Flags = flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.FuncPtr = fp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Desc = desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// block 的代码块，实际执行部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __main_block_func_0(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0 *__cself) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;test block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 版本升级所需的区域和 block 大小。不懂也没关系&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; reserved;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; Block_size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; __main_block_desc_0_DATA = &amp;#123; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0)&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// main 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;comment&quot;&gt;// 定义 block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*myBlock) (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*)())&amp;amp;__main_block_impl_0((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)__main_block_func_0, &amp;amp;__main_block_desc_0_DATA));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 执行 block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*)(__block_impl *))((__block_impl *)myBlock)-&amp;gt;FuncPtr)((__block_impl *)myBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码中，定义了三个结构体：block 基本结构 &lt;code&gt;__block_impl&lt;/code&gt;、Desc 指针 &lt;code&gt;__main_block_desc_0&lt;/code&gt;、整个 block 的结构 &lt;code&gt;__main_block_impl_0&lt;/code&gt;。其中 &lt;code&gt;__main_block_impl_0&lt;/code&gt; 包含两个成员变量，分别为 &lt;code&gt;__block_impl&lt;/code&gt; 结构体实例和 &lt;code&gt;__main_block_desc_0&lt;/code&gt; 指针。&lt;/p&gt;
&lt;p&gt;上述还定义了两个方法：block 实际执行方法 &lt;code&gt;__main_block_func_0&lt;/code&gt; 和 &lt;code&gt;main()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__main_block_func_0&lt;/code&gt; 方法为输出对应的字符串（”test block”）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 方法主要分为两步：&lt;/p&gt;
&lt;p&gt;定义 block。将 block 实际执行方法，也就是 &lt;code&gt;__main_block_func_0&lt;/code&gt; 的函数指针和 &lt;code&gt;__main_block_desc_0_DATA&lt;/code&gt; 的地址传入 &lt;code&gt;__main_block_desc_0&lt;/code&gt; 的构造方法，构造成一个完整的 block。根据定义可以看出 &lt;code&gt;__main_block_desc_0&lt;/code&gt; 初始化时所有的大小为 &lt;code&gt;__main_block_impl_0&lt;/code&gt; 结构体大小。&lt;/p&gt;
&lt;p&gt;执行 block。实际可以简化为 &lt;code&gt;*myBlock-&amp;gt;impl.FuncPtr&lt;/code&gt;，就是调用对应的方法。&lt;/p&gt;
&lt;p&gt;了解了这个基本结构，后面的都是在这基础上追加部分代码，很容易理解。&lt;/p&gt;
&lt;h5 id=&quot;2-Block-结构与-isa-指针&quot;&gt;&lt;a href=&quot;#2-Block-结构与-isa-指针&quot; class=&quot;headerlink&quot; title=&quot;2.Block 结构与 isa 指针&quot;&gt;&lt;/a&gt;2.Block 结构与 isa 指针&lt;/h5&gt;&lt;p&gt;在上述代码中，我们可以看出 block 结构体，也就是 &lt;code&gt;__block_impl&lt;/code&gt; 中有一个 &lt;code&gt;isa&lt;/code&gt; 指针。我们先来看看这个 &lt;code&gt;isa&lt;/code&gt; 指针。&lt;/p&gt;
&lt;p&gt;“id” 这一变量类型用于存储 OC 对象。在 &lt;code&gt;runtime.h&lt;/code&gt; 中，它的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_objct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Class isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; *&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Class&lt;/code&gt; 类型属于一个结构体指针类型，定义为：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_class *Class&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;objc_class&lt;/code&gt; 结构体定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_class &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Class isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;综上可知，OC 中每个类的结构体就是基于 &lt;code&gt;objc_class&lt;/code&gt; 结构体。&lt;/p&gt;
&lt;p&gt;在上面可以看到这样一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;impl.isa = &amp;amp;_&lt;span class=&quot;built_in&quot;&gt;NSConcreteStackBlock&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;isa&lt;/code&gt; 被赋值为 &lt;code&gt;_NSConcreteStackBlock&lt;/code&gt; 类型的指针。那么 &lt;code&gt;_NSConcreteStackBlock&lt;/code&gt; 又是什么？通过 debug 界面我们可以看到如下情况 ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/block/block debug 结构.png&quot; alt=&quot;block debug 结构&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;block 一供有三种类型，分别为 &lt;code&gt;__NSGlobalBlock__&lt;/code&gt;、&lt;code&gt;__NSStackBlock__&lt;/code&gt;、&lt;code&gt;__NSMallocBlock__&lt;/code&gt;，这三种类型后面会详细解释。这里转化的代码和 debug 界面显示的类型不一样，但是基本类型以信仰，都是 &lt;code&gt;Class&lt;/code&gt; 类型，不必纠结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看出 &lt;code&gt;_NSConcreteStackBlock&lt;/code&gt; 实际是 &lt;code&gt;Class&lt;/code&gt; 类型。那么，&lt;strong&gt;block 本质就是 Objective-c 对象&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&quot;3-捕获自动变量&quot;&gt;&lt;a href=&quot;#3-捕获自动变量&quot; class=&quot;headerlink&quot; title=&quot;3.捕获自动变量&quot;&gt;&lt;/a&gt;3.捕获自动变量&lt;/h5&gt;&lt;p&gt;我们将源代码改为如下情况：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock) (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ^&amp;#123;printf(&lt;span class=&quot;string&quot;&gt;&quot;value is %i&quot;&lt;/span&gt;, val);&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myBlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 clang 进行转化。我们只看转化后的关键部分。即整个 block 结构：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __block_impl impl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0* Desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __main_block_impl_0(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *fp, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0 *desc, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; _val, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) : val(_val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.isa = &amp;amp;_&lt;span class=&quot;built_in&quot;&gt;NSConcreteStackBlock&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.Flags = flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.FuncPtr = fp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Desc = desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __main_block_func_0(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0 *__cself) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = __cself-&amp;gt;val; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	printf(&lt;span class=&quot;string&quot;&gt;&quot;value is %i&quot;&lt;/span&gt;, val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到局部变量 &lt;code&gt;val&lt;/code&gt; 被自动追加到了 &lt;code&gt;__main_block_impl_0&lt;/code&gt; 结构体中，并在构造函数中添加了参数。通过构造函数初始化 block 时，会将外部变量捕获进来。&lt;strong&gt;这里捕获的是引用，所以在 block 内部改变局部变量的值之后，并不会传出去&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&quot;4-关于-block&quot;&gt;&lt;a href=&quot;#4-关于-block&quot; class=&quot;headerlink&quot; title=&quot;4.关于 __block&quot;&gt;&lt;/a&gt;4.关于 __block&lt;/h5&gt;&lt;p&gt;正常情况下，block 捕获的变量是不可以修改的。但是有两种方式可以让其修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;静态变量、静态全局变量、全局变量&lt;/strong&gt;。因为前两个生成在静态数据区，最后一个生成在堆区。它们都不会随着 block 栈的消失而被释放。出了 block 作用域依然有效。但是平时使用这种变量诸多不变。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;__block&lt;/code&gt; 关键字修饰。它类似于 &lt;code&gt;static&lt;/code&gt;、&lt;code&gt;auto&lt;/code&gt; 和 &lt;code&gt;register&lt;/code&gt; 这些关键字，主要来指定变量存储在哪个区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么使用 &lt;code&gt;__block&lt;/code&gt; 关键字修饰之后就可以修改。我们使用 clang 转化如下一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 __block &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock) (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ^&amp;#123;val = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myBlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转换后如下，可以看出加了一句 &lt;code&gt;__block&lt;/code&gt; 多了很多代码，依然是代码很乱，但是逻辑很清晰，我们只看主要部分 ：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __Block_byref_val_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *__isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__Block_byref_val_0 *__forwarding;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __block_impl impl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0* Desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __Block_byref_val_0 *val; &lt;span class=&quot;comment&quot;&gt;// by ref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __main_block_impl_0(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *fp, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0 *desc, __Block_byref_val_0 *_val, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) : val(_val-&amp;gt;__forwarding) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.isa = &amp;amp;_&lt;span class=&quot;built_in&quot;&gt;NSConcreteStackBlock&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.Flags = flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    impl.FuncPtr = fp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Desc = desc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __main_block_func_0(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0 *__cself) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	__Block_byref_val_0 *val = __cself-&amp;gt;val; &lt;span class=&quot;comment&quot;&gt;// bound by ref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(val-&amp;gt;__forwarding-&amp;gt;val) = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __main_block_copy_0(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0*dst, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0*src) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_Block_object_assign((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)&amp;amp;dst-&amp;gt;val, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)src-&amp;gt;val, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*BLOCK_FIELD_IS_BYREF*/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __main_block_dispose_0(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0*src) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_Block_object_dispose((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)src-&amp;gt;val, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*BLOCK_FIELD_IS_BYREF*/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_desc_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  size_t reserved;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  size_t Block_size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0*, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0*);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*dispose)(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0*);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; __main_block_desc_0_DATA = &amp;#123; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __attribute__((__blocks__(&lt;span class=&quot;keyword&quot;&gt;byref&lt;/span&gt;))) __Block_byref_val_0 val = &amp;#123;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,(__Block_byref_val_0 *)&amp;amp;val, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(__Block_byref_val_0), &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*myBlock) (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*)())&amp;amp;__main_block_impl_0((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)__main_block_func_0, &amp;amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;amp;val, &lt;span class=&quot;number&quot;&gt;570425344&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*)(__block_impl *))((__block_impl *)myBlock)-&amp;gt;FuncPtr)((__block_impl *)myBlock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看出局部变量转化为一个结构体：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __Block_byref_val_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *__isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__Block_byref_val_0 *__forwarding;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;__main_block_impl_0&lt;/code&gt; 中追加了一个 &lt;code&gt;__Block_byref_val_0&lt;/code&gt; 结构体指针，后续的初始化和修改 val 的值也是&lt;strong&gt;通过指针来操作&lt;/strong&gt;。所以修改后的值就可以传出去了。&lt;/p&gt;
&lt;h5 id=&quot;5-block-的存储类型&quot;&gt;&lt;a href=&quot;#5-block-的存储类型&quot; class=&quot;headerlink&quot; title=&quot;5.block 的存储类型&quot;&gt;&lt;/a&gt;5.block 的存储类型&lt;/h5&gt;&lt;p&gt;前面有提到过，block 按照存储类型划分，可以分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_NSConcreteGlobalBlock&lt;/li&gt;
&lt;li&gt;_NSConcreteStackBlock&lt;/li&gt;
&lt;li&gt;_NSConcreteMallocBlock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们在内存中的存储结构如下图所示，对号入座：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/block/block 存储结构.png&quot; alt=&quot;block 存储结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们分别来解释一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_NSConcreteGlobalBlock，也叫全局 block。&lt;/strong&gt;有两种生成方式：&lt;br&gt;一种是在全局的地方生成，不存在捕获局部变量的情况。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^globalBlock)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ^&amp;#123;printf(&lt;span class=&quot;string&quot;&gt;&quot;this is global block&quot;&lt;/span&gt;);&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globalBlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一种是，block 中不截获局部变量。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (^TestBlock) (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TestBlock block = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num) &amp;#123;printf(&lt;span class=&quot;string&quot;&gt;&quot;num is %d&quot;&lt;/span&gt;,num);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;_NSConcreteStackBlock，也叫栈 block。&lt;/strong&gt;除了上述的初始化方式，通过其他方式初始化为的 block 都是栈 block。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_NSConcreteMallocBlock，也叫堆 block。&lt;/strong&gt;&lt;br&gt;堆 block 不是由代码初始化来的，而是由栈 block 调用 copy 方法时从栈内存拷贝到堆内存而得来的。&lt;/p&gt;
&lt;p&gt;至于什么时候会发生 copy 操作，可以总结为一下几点 （ARC 环境）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cocoa 框架的方法且方法名中含有 usingBlock。&lt;/li&gt;
&lt;li&gt;GCD 中的方法。&lt;/li&gt;
&lt;li&gt;block 赋值给强引用对象时。&lt;/li&gt;
&lt;li&gt;作为返回值时。&lt;/li&gt;
&lt;li&gt;显示调用 copy 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些例子：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; (^TestBlock)(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^paramBlock)(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// block1 is global block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^block1)(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *) = ^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;this is global block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// block2 is malloc block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^block2)(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *) = ^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;this is malloc block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// block3 is stack block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^block3)(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *) = ^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;this is stack block&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// block4 is malloc block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TestBlock block4 = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; testWithBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;noting&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// block5 is global block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TestBlock block5 = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; getGlobalBlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (TestBlock)testWithBlock:(paramBlock)block &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;capture block is %@&quot;&lt;/span&gt;,block); &lt;span class=&quot;comment&quot;&gt;// malloc block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ^&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = val * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;noting&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (TestBlock)getGlobalBlock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ^&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;nothing&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;6-block-变量结构中的-forwarding&quot;&gt;&lt;a href=&quot;#6-block-变量结构中的-forwarding&quot; class=&quot;headerlink&quot; title=&quot;6. block 变量结构中的 forwarding&quot;&gt;&lt;/a&gt;6. &lt;strong&gt;block 变量结构中的 &lt;/strong&gt;forwarding&lt;/h5&gt;&lt;p&gt;在前面的代码中，我们发现 &lt;code&gt;__block&lt;/code&gt; 代码中有一个 &lt;code&gt;__forwarding&lt;/code&gt;，如下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __Block_byref_val_0 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *__isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__Block_byref_val_0 *__forwarding;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;长话短说。当一个栈 block 捕获了一个在栈上生成的 &lt;code&gt;__block&lt;/code&gt; 变量，那么随着 block 从栈上 copy 到堆上，这个 &lt;code&gt;__block&lt;/code&gt; 变量也从栈上 copy 到堆上。因为有一个 &lt;code&gt;__forwarding&lt;/code&gt; 指针，使得无论从从栈上还是堆上，访问的都是一个变量。如果没有明白看下面的图和代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/block/block 拷贝.png&quot; alt=&quot;block 拷贝&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^block)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = [^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count) &amp;#123; val++;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;val++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;block();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;val is %d&quot;&lt;/span&gt;,val); &lt;span class=&quot;comment&quot;&gt;// val is 12;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论是操作栈上的 val 变量还是堆上的 val 变量，最终修改的是同一个值。&lt;/p&gt;
&lt;h5 id=&quot;7-block-与循环引用&quot;&gt;&lt;a href=&quot;#7-block-与循环引用&quot; class=&quot;headerlink&quot; title=&quot;7.block 与循环引用&quot;&gt;&lt;/a&gt;7.block 与循环引用&lt;/h5&gt;&lt;p&gt;发生循环引用说明出现了互相持有的现象，例如下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/block/循环引用.png&quot; alt=&quot;循环引用&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中 self 持有 blk 属性，blk 持有 block，block 持有 self，这就形成了一个环。现如今的 Xcode 已经很智能，这种简单的循环引用，会出现警告。&lt;/p&gt;
&lt;p&gt;为避免循环引用，可以使用 &lt;code&gt;__weak&lt;/code&gt; 关键字。例如下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) weakSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.blk = ^&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [weakSelf log];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了避免在 block 内使用 self 期间，self 被释放。可以在 block 内部对 self 进行强引用。因为这个强引用生成在 block 栈内，会随着 block 的作用域消失而消失。不会产生循环引用。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) weakSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.blk = ^&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = weakSelf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; log];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;如何使用-Block&quot;&gt;&lt;a href=&quot;#如何使用-Block&quot; class=&quot;headerlink&quot; title=&quot;如何使用 Block&quot;&gt;&lt;/a&gt;如何使用 Block&lt;/h4&gt;&lt;p&gt; 前面讲了很多原理，过程中也讲了很多使用。这里只总结几点，使用 block 一定要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block 的命名方式，牢记。&lt;/li&gt;
&lt;li&gt;对于要再 block 内修改的变量，加 &lt;code&gt;__block&lt;/code&gt; 修饰符。对于 OC 中的一些对象，例如 NSMutableArray，如果只修改数组内的元素，不需要加 &lt;code&gt;__block&lt;/code&gt;；如果要修改数组的指针，需要加 &lt;code&gt;__block&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用自定义 block 时，注意循环引用的问题。尤其是各种间接关系产生的循环引用。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于捕获到 block 中的弱引用，如果怕使用期间被释放，需要再 block 内部再次强引用一下。&lt;/p&gt;
&lt;p&gt;综上，block 总结完毕，祝好运。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h4&gt;&lt;p&gt;1.&lt;a href=&quot;https://developer.apple.com/library/content/featuredarticles/Short_Practical_Guide_Blocks/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Short Practical Guide to Blocks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://fuckingblocksyntax.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Do I Declare A Block in Objective-C?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;https://book.douban.com/subject/24720270/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C高级编程&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于 block 的文章，网上已经有很多了。我这里只是将这个知识点再梳理一下，做一下记录。毕竟年纪大了，容易忘事。&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>我所理解的 CocoaPods</title>
    <link href="http://yoursite.com/2018/02/16/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84CocoaPods/"/>
    <id>http://yoursite.com/2018/02/16/我所理解的CocoaPods/</id>
    <published>2018-02-16T09:09:23.000Z</published>
    <updated>2018-05-13T13:12:26.951Z</updated>
    
    <content type="html">&lt;p&gt;很久之前读了一遍 &lt;a href=&quot;https://guides.cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cocoa Pods 官方文档&lt;/a&gt;，对 Cocoa Pods 有了一个简单的了解。时隔多日，全忘了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;所以再回顾一下，顺便写一篇总结。文章分为&lt;strong&gt;原理&lt;/strong&gt;和&lt;strong&gt;使用&lt;/strong&gt;两部分，比较长，可以根据自己的需求选择性阅读。&lt;/p&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;CocoaPods 是开发 OS X 和 iOS 应用程序的一个第三方库的依赖管理工具，使用这个工具可以简化对组件依、更新的过程。新添加一些第三方组件可以直接修改 podfile 然后进行 &lt;code&gt;pod install&lt;/code&gt;；更新已有第三方组件，可以修改 podfile 然后进行 &lt;code&gt;pod update&lt;/code&gt;；自己开发的组件也可以上传到 CocoaPods 或者私有仓库，供其他人使用。&lt;/p&gt;
&lt;p&gt;CocoaPods 是用 ruby 写的，由若干个 gems 组成。也就是说，iOS project 使用 CocoaPods 来进行组件管理，CocoaPods 本身也是一个 project，它使用 gem 进行组件管理。&lt;/p&gt;
&lt;p&gt;开始写这篇文章的时候，我想先写使用，再写原理。因为我担心很多人感觉原理晦涩难懂，就放弃看后面了。但构思的时候发现，明白了原理之后，对一些命令的使用会有更深刻的了解。所以还是决定将原理放在前面讲。&lt;/p&gt;
&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h3&gt;&lt;h4 id=&quot;1-CocoaPods-结构&quot;&gt;&lt;a href=&quot;#1-CocoaPods-结构&quot; class=&quot;headerlink&quot; title=&quot;1.CocoaPods 结构&quot;&gt;&lt;/a&gt;1.CocoaPods 结构&lt;/h4&gt;&lt;p&gt;CocoaPods 是用 Ruby 写的，并由若干个 Ruby 包 (gems) 构成的，源码托管在 &lt;a href=&quot;https://github.com/CocoaPods&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上。其中主要的几个组件为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/CocoaPods/Specs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods/Specs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;这个是一个保存第三方组件 podspec 文件的仓库。第三方组件开发完成之后，会传一份 podspec 文件传到 CocoaPods，这个 Specs 包含了每个第三方组件所有版本的 podspec 文件。当使用某个第三方组件时，如果这些组件支持 CocoaPods，会在 Podfile 中指定 source，例如下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/CocoaPods/Specs.git&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当执行 &lt;code&gt;pod install&lt;/code&gt; 或 &lt;code&gt;pod update&lt;/code&gt; 等一些命令时，便会从这个仓库找到组件指定版本的 podspec 文件，然后根据这个 podspec 配置信息去获取组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods/CocoaPods&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;这是是一个面向用户的组件，每当执行一个 pod 命令时，这个组件都将被激活。该组件包括了所有使用 CocoaPods 涉及到的功能，并且还能通过调用所有其它的 gems 来执行任务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/CocoaPods/Core&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods/Core&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;这个 gem 组件提供支持与 CocoaPods 相关文件的处理，例如 &lt;a href=&quot;https://guides.cocoapods.org/syntax/podspec.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Specification&lt;/a&gt;、&lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Podfile&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/CocoaPods/Specs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Source&lt;/a&gt;。当执行 &lt;code&gt;pod install&lt;/code&gt; 等一些命令时。Core 组件会解析第三方组件开发者上传的 podspec 文件和使用者的 podfile,以此确定需要为 project 引入哪些文件。除此之外，当执行与这些文件一些相关的命令时，也由这部分组件处理，例如使用 &lt;code&gt;pod spec lint&lt;/code&gt; 来检测 podspec 文件的有效性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods/Xcodeproj&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;使用这个 gem 组件，你可以用 ruby 来创建并修改 Xcode projects。在 CocoaPods 中它负责所有工程文件的整合。如果你想要写一个脚本来方便的修改工程文件，那么可以单独下载这个 gem 并使用。更多信息可以查看工程的 &lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;readme&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-几个相关文件&quot;&gt;&lt;a href=&quot;#2-几个相关文件&quot; class=&quot;headerlink&quot; title=&quot;2.几个相关文件&quot;&gt;&lt;/a&gt;2.几个相关文件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Specification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个文件用来描述第三方组件某个版本的信息。主要包含了组件拉取地址、应该拉取那些文件和项目配置信息。除此之外，还包含一些组件信息，例如组件的名字、版本等。后面章节会详细讲解字段含义和文件书写规范。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Podfile&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;这个文件用来指定工程中依赖了那些组件。主要包含了依赖的组件名、组件版本、组件地址等。后面章节会详细讲解字段含义和文件书写规范。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Podfile.lock&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在第一次执行 &lt;code&gt;pod install&lt;/code&gt; 时，执行完毕后会生成一个 podfile.lock 文件。这个文件主要标注了项目当前依赖的具体版本。看下面这个文件信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Cocoa-Pods/PodfileLock.png&quot; alt=&quot;PodfileLock.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 有个问题需要牢记：&lt;strong&gt;CocoaPods 强烈建议将 Podfile.lock 文件加入版本管理，这样其他人同步了你的 podfile.lock 文件之后，执行 &lt;code&gt;pod install&lt;/code&gt; 时会将按照里面指定给的版本加载，避免多人协作时发生冲突&lt;/strong&gt;。后面的 pod install vs pod update 会详细讲解 podfile.lock 变更时机。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manifest.lock&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Manifest.lock 是由 Podfile.lock 生成的一个副本，每次生成或者更新 Podfile.lock，都会更下 Pods 文件夹下面的 Manifest.lock 文件。如果你遇见过这样的错误 沙盒文件与 Podfile.lock 文件不同步 (The sandbox is not in sync with the Podfile.lock)，这是因为 Manifest.lock 文件和 Podfile.lock 文件不一致所引起。&lt;/p&gt;
&lt;h4 id=&quot;3-相互关系&quot;&gt;&lt;a href=&quot;#3-相互关系&quot; class=&quot;headerlink&quot; title=&quot;3.相互关系&quot;&gt;&lt;/a&gt;3.相互关系&lt;/h4&gt;&lt;p&gt; &lt;img src=&quot;/uploads/Cocoa-Pods/三者关系.png&quot; alt=&quot;三者关系&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图为组件开发者、CocoaPods、组件使用者三者的关系。&lt;/p&gt;
&lt;p&gt;组件开发者开发完组件之后，会将组件上传到仓库 (Github or other)。然后创建一个 podspec 文件，文件中包含了使用组件时需要加载哪些文件以及从哪里加载。然后会将这个文件上传到 CocoaPods（也可以上传至私人构建的 spec 管理仓库）。&lt;/p&gt;
&lt;p&gt;组件使用者想要使用某个组件，会在 Podfile 中指定组件的名字、版本、加载源以及更加详细的信息（例如想要加载某个 commit）。然后执行相关 Pod 命令。&lt;/p&gt;
&lt;p&gt;CocoaPods 执行 Pod 命令，然后解析对应的 podspec 文件，确定需要加载的文件信息并将文件加载到项目工程里。并创建 Podfile.lock、Manifest.lock、Pods.xcodeproj 等文件。&lt;/p&gt;
&lt;h4 id=&quot;4-一次详细的加载过程&quot;&gt;&lt;a href=&quot;#4-一次详细的加载过程&quot; class=&quot;headerlink&quot; title=&quot;4.一次详细的加载过程&quot;&gt;&lt;/a&gt;4.一次详细的加载过程&lt;/h4&gt;&lt;p&gt;前面提到 CocoaPods 是开源的，所以我们可以把源码下载下来进行研究。&lt;code&gt;pod install&lt;/code&gt; 这个命令定义在 &lt;a href=&quot;https://github.com/CocoaPods/Core&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods/Core&lt;/a&gt; 这 gem 中。&lt;/p&gt;
&lt;h5 id=&quot;执行-pod-install-命令&quot;&gt;&lt;a href=&quot;#执行-pod-install-命令&quot; class=&quot;headerlink&quot; title=&quot;执行 pod install 命令&quot;&gt;&lt;/a&gt;执行 pod install 命令&lt;/h5&gt;&lt;p&gt;所有命令都是通过 &lt;code&gt;Command&lt;/code&gt; 类管理的，执行 &lt;code&gt;pod install&lt;/code&gt; 时代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/command/install.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Command&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Install&lt;/span&gt; &amp;lt; Command&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        verify_podfile_exists!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        installer = installer_for_config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        installer.repo_update = repo_update?(&lt;span class=&quot;symbol&quot;&gt;:default&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        installer.update = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        installer.install!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行时会先生成一个 &lt;code&gt;installer&lt;/code&gt; 实例。然后设置 &lt;code&gt;repo_update&lt;/code&gt; 属性和 &lt;code&gt;update&lt;/code&gt; 属性，最后执行 &lt;code&gt;install&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h5 id=&quot;Podfile-解析&quot;&gt;&lt;a href=&quot;#Podfile-解析&quot; class=&quot;headerlink&quot; title=&quot;Podfile 解析&quot;&gt;&lt;/a&gt;Podfile 解析&lt;/h5&gt;&lt;p&gt;执行 &lt;code&gt;pod install&lt;/code&gt; 命令具体细节前，首先要解析 Podfile。这一过程在初始化 &lt;code&gt;installer&lt;/code&gt; 实例时就已经开始：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;installer_for_config&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Installer.new(config.sandbox, config.podfile, config.lockfile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;pod-install-方法定义&quot;&gt;&lt;a href=&quot;#pod-install-方法定义&quot; class=&quot;headerlink&quot; title=&quot;pod install 方法定义&quot;&gt;&lt;/a&gt;pod install 方法定义&lt;/h5&gt;&lt;p&gt;pod install 方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;install!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prepare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  resolve_dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  download_dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validate_targets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  generate_pods_project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; installation_options.integrate_targets?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    integrate_user_project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UI.section &lt;span class=&quot;string&quot;&gt;&#39;Skipping User Project Integration&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  perform_post_install_actions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从方法定义中，可以看出 &lt;code&gt;pod install&lt;/code&gt; 的执行分为如下几部：&lt;strong&gt;准备阶段、解决依赖冲突、下载依赖文件、校验 target、整合 project 文件、输出执行结果&lt;/strong&gt;。下面将按照这个步骤逐步分析。&lt;/p&gt;
&lt;h5 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h5&gt;&lt;p&gt;准备阶段代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepare&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Raise if pwd is inside Pods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; Dir.pwd.start_with?(sandbox.root.to_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = &lt;span class=&quot;string&quot;&gt;&#39;Command should be run from a directory outside Pods directory.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n\n\tCurrent directory is &lt;span class=&quot;subst&quot;&gt;#&amp;#123;UI.path(Pathname.pwd)&amp;#125;&lt;/span&gt;\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise Informative, message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  UI.message &lt;span class=&quot;string&quot;&gt;&#39;Preparing&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deintegrate_if_different_major_version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sandbox.prepare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ensure_plugins_are_installed!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_plugins_pre_install_hooks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先会检测目录结构，是否为可执行 pod 命令的目录，如果不是直接输出信息。如果可执行，则做一些准备工作。如果你的 Podfile 中写了一些 hooks，也会在这里执行。&lt;/p&gt;
&lt;h5 id=&quot;解决依赖冲突&quot;&gt;&lt;a href=&quot;#解决依赖冲突&quot; class=&quot;headerlink&quot; title=&quot;解决依赖冲突&quot;&gt;&lt;/a&gt;解决依赖冲突&lt;/h5&gt;&lt;p&gt;这一阶段的方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolve_dependencies&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; plugin_sources = run_source_provider_hooks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; analyzer = create_analyzer(plugin_sources)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; UI.section &lt;span class=&quot;string&quot;&gt;&#39;Updating local specs repositories&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   analyzer.update_repositories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; repo_update?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; UI.section &lt;span class=&quot;string&quot;&gt;&#39;Analyzing dependencies&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   analyze(analyzer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   validate_build_configurations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   clean_sandbox&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; analyzer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据方法定义，我们可以看出这一阶段处理的事情：启动 hooks 并创建一个 &lt;code&gt;analyzer&lt;/code&gt;，然后使用这个 &lt;code&gt;analyzer&lt;/code&gt; 更新本地 specs 库、处理版本依赖。&lt;/p&gt;
&lt;p&gt;首先是创建 &lt;code&gt;analyzer&lt;/code&gt;，创建过程中将 &lt;code&gt;Podfile&lt;/code&gt; 和 &lt;code&gt;lockfile&lt;/code&gt; 等一些文件信息全部传入，并在这个类中将这些文件解析。创建 &lt;code&gt;analyzer&lt;/code&gt; 代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;create_analyzer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(plugin_sources = &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Analyzer.new(sandbox, podfile, lockfile, plugin_sources).tap &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |analyzer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    analyzer.installation_options = installation_options&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    analyzer.has_dependencies = has_dependencies?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后是更新本地 specs 库。从代码中可以看出有一个 &lt;code&gt;repo_update?&lt;/code&gt; 判断，也就是说这个标志位真的时候，才会更新本地 specs 库。也就是我们常用的一条命令：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod repo udpate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后是处理依赖关系。其中 &lt;code&gt;Podfile&lt;/code&gt;、&lt;code&gt;lockfile&lt;/code&gt; 也是使用 &lt;code&gt;Analyzer&lt;/code&gt; 这个类中解析。下面是解析方法的定义 ：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer/analyzer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;analyze&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(allow_fetches = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    validate_podfile!	&lt;span class=&quot;comment&quot;&gt;# step1: 解析并校验 podfile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    validate_lockfile_version! &lt;span class=&quot;comment&quot;&gt;# step2: 解析并校验 lockfile 中的库的版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @result = AnalysisResult.new &lt;span class=&quot;comment&quot;&gt;# step3: 新建 result 实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @result.specifications  = generate_specifications(resolver_specs_by_target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @result.targets         = generate_targets(resolver_specs_by_target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @result.sandbox_state   = generate_sandbox_state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @result.specs_by_target = resolver_specs_by_target.each_with_object(&amp;#123;&amp;#125;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |rspecs_by_target, hash|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      hash[rspecs_by_target[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = rspecs_by_target[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].map(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:spec&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @result.specs_by_source = Hash[resolver_specs_by_target.values.flatten(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).group_by(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:source&lt;/span&gt;).map &amp;#123; |source, specs| [source, specs.map(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:spec&lt;/span&gt;).uniq] &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sources.each &amp;#123; |s| @result.specs_by_source[s] ||= [] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终会将解析结果保存在一个 &lt;code&gt;@result&lt;/code&gt; 实例中，进行后面步骤时，会使用这个解析结果。&lt;code&gt;AnalysisResult&lt;/code&gt; 类定义如下，注释我就不翻译了，看原味的英文更有助于理解具体意思：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer/analyzer/analysis_result.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pod&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Installer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Analyzer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnalysisResult&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [SpecsState] the states of the Podfile specs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:podfile_state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [Hash&amp;#123;TargetDefinition =&amp;gt; Array&amp;lt;Specification&amp;gt;&amp;#125;] the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         specifications grouped by target.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:specs_by_target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [Hash&amp;#123;Source =&amp;gt; Array&amp;lt;Specification&amp;gt;&amp;#125;] the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         specifications grouped by spec repo source.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:specs_by_source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [Array&amp;lt;Specification&amp;gt;] the specifications of the resolved&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         version of Pods that should be installed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:specifications&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [SpecsState] the states of the &amp;#123;Sandbox&amp;#125; respect the resolved&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         specifications.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:sandbox_state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [Array&amp;lt;AggregateTarget&amp;gt;] The aggregate targets created for each&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         &amp;#123;TargetDefinition&amp;#125; from the &amp;#123;Podfile&amp;#125;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:targets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [Hash&amp;#123;TargetDefinition =&amp;gt; Array&amp;lt;TargetInspectionResult&amp;gt;&amp;#125;] the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         results of inspecting the user targets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:target_inspections&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [Hash&amp;#123;String=&amp;gt;Symbol&amp;#125;] A hash representing all the user build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         configurations across all integration targets. Each key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         corresponds to the name of a configuration and its value to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#         its type (`:debug` or `:release`).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;all_user_build_configurations&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          targets.reduce(&amp;#123;&amp;#125;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |result, target|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result.merge(target.user_build_configurations)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 &lt;code&gt;Podfile&lt;/code&gt; 的解析过程，有兴趣的可以查看一下 &lt;code&gt;PodfileValidator&lt;/code&gt; 类，在目录 &lt;code&gt;CocoaPods/lib/cocoapods/installer/analyzer/podfile_validator.rb&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;下载依赖文件&quot;&gt;&lt;a href=&quot;#下载依赖文件&quot; class=&quot;headerlink&quot; title=&quot;下载依赖文件&quot;&gt;&lt;/a&gt;下载依赖文件&lt;/h5&gt;&lt;p&gt;下载依赖文件方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;download_dependencies&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  UI.section &lt;span class=&quot;string&quot;&gt;&#39;Downloading dependencies&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    create_file_accessors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    install_pod_sources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_podfile_pre_install_hooks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clean_pod_sources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法中调用了几个其他方法。作用分别为：创建文件存储器，以便向沙盒里面写入数据；下载数据；启动 hooks；进行清理操作。具体每个方法的定义，可以查看文件源码。这里主要说一下 &lt;code&gt;install_pod_sources&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;install_pod_sources&lt;/code&gt; 方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Downloads, installs the documentation and cleans the sources of the Pods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# which need to be installed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; [void]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;install_pod_sources&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @installed_specs = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pods_to_install = sandbox_state.added | sandbox_state.changed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title_options = &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:verbose_prefix&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;-&amp;gt; &#39;&lt;/span&gt;.green &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  root_specs.sort_by(&amp;amp;&lt;span class=&quot;symbol&quot;&gt;:name&lt;/span&gt;).each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |spec|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pods_to_install.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;?(spec.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sandbox_state.changed.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;?(spec.name) &amp;amp;&amp;amp; sandbox.manifest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        previous = sandbox.manifest.version(spec.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        title = &lt;span class=&quot;string&quot;&gt;&quot;Installing &lt;span class=&quot;subst&quot;&gt;#&amp;#123;spec.name&amp;#125;&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;#&amp;#123;spec.version&amp;#125;&lt;/span&gt; (was &lt;span class=&quot;subst&quot;&gt;#&amp;#123;previous&amp;#125;&lt;/span&gt;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        title = &lt;span class=&quot;string&quot;&gt;&quot;Installing &lt;span class=&quot;subst&quot;&gt;#&amp;#123;spec&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UI.titled_section(title.green, title_options) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        install_source_of_pod(spec.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      UI.titled_section(&lt;span class=&quot;string&quot;&gt;&quot;Using &lt;span class=&quot;subst&quot;&gt;#&amp;#123;spec&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;, title_options) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        create_pod_installer(spec.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先确定需要 install 的组件。这里主要针对新加的组件和变更的组件进行 install，至于这些信息是通过 &lt;code&gt;sandbox_state&lt;/code&gt; 获取的。然而 &lt;code&gt;sandbox_state&lt;/code&gt; 方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sandbox_state&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  analysis_result.sandbox_state&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 &lt;code&gt;analysis_result&lt;/code&gt; 就是我们上一步中解析出的结果，在这里用到了。&lt;/p&gt;
&lt;p&gt;第二步创建 title 配置信息，后面针对变更的组件，会用这个配置标记。相信每一位开发者进行 pod install 操作的时候，都会注意到变更的组件自动标记为绿色。&lt;/p&gt;
&lt;p&gt;最后一步是下载对应文件。这里分了三种情况：如果组件已经下载且版本号没有发生变化，则直接提示 “Using xxx”，如下图中的 “YYCache” 组件；如果组件已经下载，但是版本号发生了变化，则更新组件并提示 “Installing xxx 版本号 (之前版本号)”，如下图中的 “AFNetworking” 组件；如果组件第一次下载，则进行下载，并提示 “Installing xxx”，如下图中的 “YYImage”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Cocoa-Pods/podInstall.png&quot; alt=&quot;podInstall.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;校验-target&quot;&gt;&lt;a href=&quot;#校验-target&quot; class=&quot;headerlink&quot; title=&quot;校验 target&quot;&gt;&lt;/a&gt;校验 target&lt;/h5&gt;&lt;p&gt;校验 target 代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;validate_targets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validator = &lt;span class=&quot;symbol&quot;&gt;Xcode:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:TargetValidator&lt;/span&gt;.new(aggregate_targets, pod_targets)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validator.validate!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer/xcode/target_validator.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;validate!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  verify_no_duplicate_framework_and_library_names&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  verify_no_static_framework_transitive_dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  verify_no_pods_used_with_multiple_swift_versions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  verify_framework_usage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法中，创建了一个 &lt;code&gt;TargetValidator&lt;/code&gt; 实例，并调用 &lt;code&gt;validate()&lt;/code&gt; 方法进行校验。这方方法主要分为以下几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检测是否有多重引用 framework 或者 library 的情况。因为一个组件可能分成多个 subspec，如果不清楚 subspec 中的依赖关系。使用时可能会出现多重引用的情况。举个例子，下面是 “&lt;a href=&quot;https://github.com/netease-im/NIM_iOS_UIKit/blob/master/NIMKit.podspec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易云信&lt;/a&gt;“ 的 podspec 文件，以及其中依赖的两个组件的 podspec 文件:&lt;/p&gt;
  &lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# NIMKit.podspec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Pod:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Spec&lt;/span&gt;.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.subspec &lt;span class=&quot;string&quot;&gt;&#39;Full&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |cs|	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cs.source_files = &lt;span class=&quot;string&quot;&gt;&#39;NIMKit/NIMKit/**/*.&amp;#123;h,m&amp;#125;&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cs.dependency &lt;span class=&quot;string&quot;&gt;&#39;NIMKit/Core&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cs.dependency &lt;span class=&quot;string&quot;&gt;&#39;NIMSDK&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 4.9.0&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.subspec &lt;span class=&quot;string&quot;&gt;&#39;Lite&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |cs|  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cs.source_files = &lt;span class=&quot;string&quot;&gt;&#39;NIMKit/NIMKit/**/*.&amp;#123;h,m&amp;#125;&#39;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cs.dependency &lt;span class=&quot;string&quot;&gt;&#39;NIMKit/Core&#39;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cs.dependency &lt;span class=&quot;string&quot;&gt;&#39;NIMSDK_LITE&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 4.9.0&#39;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.subspec &lt;span class=&quot;string&quot;&gt;&#39;Core&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |os|     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.default_subspec = &lt;span class=&quot;string&quot;&gt;&#39;Lite&#39;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# NIMSDK.podspec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;symbol&quot;&gt;Pod:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Spec&lt;/span&gt;.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s|   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.vendored_libraries  = &lt;span class=&quot;string&quot;&gt;&#39;**/Libs/*.a&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.vendored_frameworks = &lt;span class=&quot;string&quot;&gt;&#39;**/NIMSDK.framework&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;**/NIMAVChat.framework&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	... &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;# NIMSDK_LITE.podspec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Pod:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Spec&lt;/span&gt;.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |s|   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.vendored_libraries  = &lt;span class=&quot;string&quot;&gt;&#39;NIMSDK/Libs/*.a&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s.vendored_frameworks = &lt;span class=&quot;string&quot;&gt;&#39;**/NIMSDK.framework&#39;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;然后我这样去引用：

&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;NIMKit&#39;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:subspecs&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;Lite&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;Full&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

因为两个 spec 中都引用了 NIMKit framework，所以执行 `pod install` 的时候就会出现如下问题：
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/uploads/Cocoa-Pods/target_confilct.png&quot; alt=&quot;target_confilct.png&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 这里还是不太理解，可能表述有误。如果清楚请指出，我加以改正。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;处理静态库传递依赖问题。如果 A 组件依赖 B 组件，B 组件中含有通过vendored_libraries加载的静态库.a或framewrok。如果 &lt;code&gt;Podfile&lt;/code&gt; 中不使用 &lt;code&gt;use_frameworks!&lt;/code&gt;，不会出现任何问题；如果使用 &lt;code&gt;use_frameworks!&lt;/code&gt;，那么打包的 &lt;code&gt;framework&lt;/code&gt; 会将 &lt;code&gt;vendored_libraries&lt;/code&gt; 库中的内容包含进来，这就出现了符号冲突的问题了。如果出现了这种问题，CocoaPods 会报出如下错误：&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The &amp;apos;pod-name&amp;apos; target has transitive dependencies that include static binaries: (static_libs.to_sentence)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;因为在 swift 中必须使用 `use_frameworks`，所以 swift 中经常会遇到这种问题。解决办法就是修改 `podspec` 和 `Podfile` 两个文件：

podspec

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s.dependency &amp;apos;xxx&amp;apos;, &amp;apos;~&amp;gt; 15.2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; s.pod_target_xcconfig = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;apos;FRAMEWORK_SEARCH_PATHS&amp;apos; =&amp;gt; &amp;apos;$(inherited) $(PODS_ROOT)/xxx&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;apos;OTHER_LDFLAGS&amp;apos;          =&amp;gt; &amp;apos;$(inherited) -undefined dynamic_lookup&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


Podfile

&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pre_install &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |installer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;# workaround for https://github.com/CocoaPods/CocoaPods/issues/3289&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;installer&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;verify_no_static_framework_transitive_dependencies&lt;/span&gt;;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;校验不同 target 所引用的代码中，如果包含 swift，所使用的 swift 版本是否相同。如果不同则会报出如下错误：&lt;/p&gt;
  &lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The following pods are integrated into targets that &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have the same Swift &lt;span class=&quot;symbol&quot;&gt;version:&lt;/span&gt;&amp;#123;error_messages.join&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当在 swift 中使用时，校验是否在 &lt;code&gt;Podfile&lt;/code&gt; 中是否添加了 &lt;code&gt;use_frameworks!&lt;/code&gt;。如果不添加便会报错。例如：&lt;/p&gt;
&lt;p&gt;  Podfile&lt;/p&gt;
  &lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/CocoaPods/Specs.git&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;platform &lt;span class=&quot;symbol&quot;&gt;:ios&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ignore all warnings from all pods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inhibit_all_warnings!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;SwiftTest&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   pod &lt;span class=&quot;string&quot;&gt;&#39;AFNetworking&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;3.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   pod &lt;span class=&quot;string&quot;&gt;&#39;Alamofire&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 4.6&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	   pod &lt;span class=&quot;string&quot;&gt;&#39;YYCache&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   pod &lt;span class=&quot;string&quot;&gt;&#39;YYImage&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   pod &lt;span class=&quot;string&quot;&gt;&#39;YYImage&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;对上述 `Podfile` 文件，执行 `pod install` 时便会报出如下错误：

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[!] Pods written in Swift can only be integrated as frameworks; add `use_frameworks!` to your Podfile or target to opt into using it. The Swift Pod being used is: Alamofire&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&quot;整合-project-文件&quot;&gt;&lt;a href=&quot;#整合-project-文件&quot; class=&quot;headerlink&quot; title=&quot;整合 project 文件&quot;&gt;&lt;/a&gt;整合 project 文件&lt;/h6&gt;&lt;p&gt;依赖文件下载完毕之后，会将这些文件打包成 &lt;code&gt;Pods.xcodeproj&lt;/code&gt;。这一过程方法定义如下:&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# Generate the &#39;Pods/Pods.xcodeproj&#39; project.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate_pods_project&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(generator = create_generator)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  UI.section &lt;span class=&quot;string&quot;&gt;&#39;Generating Pods project&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    generator.generate!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @pods_project = generator.project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    run_podfile_post_install_hooks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    generator.write&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    generator.share_development_pod_schemes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    write_lockfiles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里会通过 &lt;code&gt;generator&lt;/code&gt; 实例执行 &lt;code&gt;generate!&lt;/code&gt; 方法。我们主要说一下这个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer/xcode/pods_project_generator.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  prepare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  install_file_references&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  install_libraries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  integrate_targets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  set_target_dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法做了这样几件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成一个 &lt;code&gt;Pods.xcodeproj&lt;/code&gt; 工程&lt;/li&gt;
&lt;li&gt;将下载的依赖文件加入工程&lt;/li&gt;
&lt;li&gt;将下载的 Library 加入工程&lt;/li&gt;
&lt;li&gt;处理 target 依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一系列过程的操作，主要依赖于前面所提到的 &lt;strong&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods/Xcodeproj&lt;/a&gt;&lt;/strong&gt; 组件。&lt;/p&gt;
&lt;h6 id=&quot;执行下载过程&quot;&gt;&lt;a href=&quot;#执行下载过程&quot; class=&quot;headerlink&quot; title=&quot;执行下载过程&quot;&gt;&lt;/a&gt;执行下载过程&lt;/h6&gt;&lt;p&gt;这是最后一个阶段，会下载每个组件的具体源文件，并输出最终的执行结果。方法定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# CocoaPods/lib/cocoapods/installer.rb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Performs any post-installation actions&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;perform_post_install_actions&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  unlock_pod_sources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  run_plugins_post_install_hooks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  warn_for_deprecations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  warn_for_installed_script_phases&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  lock_pod_sources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  print_post_install_message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一过程一般是最慢的一个过程。偷懒一下，其中的过程方法我就不一一讲解了。看一下最后输出信息这个方法吧：&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_post_install_message&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  podfile_dependencies = podfile.dependencies.uniq.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pods_installed = root_specs.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title_options = &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:verbose_prefix&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;-&amp;gt; &#39;&lt;/span&gt;.green &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  UI.titled_section(&lt;span class=&quot;string&quot;&gt;&#39;Pod installation complete! &#39;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;There &lt;span class=&quot;subst&quot;&gt;#&amp;#123;podfile_dependencies == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&#39;is&#39;&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;are&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;#&amp;#123;podfile_dependencies&amp;#125;&lt;/span&gt; &quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;dependency&#39;&lt;/span&gt;.pluralize(podfile_dependencies)&amp;#125;&lt;/span&gt; from the Podfile &quot;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;and &lt;span class=&quot;subst&quot;&gt;#&amp;#123;pods_installed&amp;#125;&lt;/span&gt; total &lt;span class=&quot;subst&quot;&gt;#&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;pod&#39;&lt;/span&gt;.pluralize(pods_installed)&amp;#125;&lt;/span&gt; installed.&quot;&lt;/span&gt;.green,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    title_options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是我们常见的输出结果：&lt;/p&gt;
&lt;p&gt;!()[]&lt;/p&gt;
&lt;p&gt;执行一次 &lt;code&gt;pod install&lt;/code&gt; 的过程到此结束了。如果你大致读一遍源码，执行 &lt;code&gt;pod install&lt;/code&gt; 再遇到问题时，可以快速断定问题原因并修复。&lt;code&gt;pod update&lt;/code&gt; 和 &lt;code&gt;pod install&lt;/code&gt; 还是有一些差别的，有兴趣的同学可以读一下 &lt;code&gt;pod update&lt;/code&gt; 的源码。我这里就不在写了，就算你读不吐我都快写吐了。&lt;/p&gt;
&lt;h3 id=&quot;CocoaPods-使用&quot;&gt;&lt;a href=&quot;#CocoaPods-使用&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods 使用&quot;&gt;&lt;/a&gt;CocoaPods 使用&lt;/h3&gt;&lt;h4 id=&quot;1-安装-CocoaPods&quot;&gt;&lt;a href=&quot;#1-安装-CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;1.安装 CocoaPods&quot;&gt;&lt;/a&gt;1.安装 CocoaPods&lt;/h4&gt;&lt;p&gt;这里假设你什么都没有安装，从 0 开始。如果你已经安装了某些东西，可以跳过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装 rvm&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -L get.rvm.io | bash -s stable &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source ~/.bash_profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看 rvm 版本&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rvm -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看可安装 Ruby 版本&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rvm list known&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装一个版本，我一般选最高，这里是 2.4.1&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rvm intall 2.4.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为你后面可能会稀里糊涂装很多版本，所以设置这个版本为默认版本&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rvm use 2.4.1 --default&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;更换 Ruby 源。因为国内被墙，所以需要切换。之前很多教程中说使用 &lt;a href=&quot;https://ruby.taobao.org，但是淘宝源已经停止维护，现在建议使用&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ruby.taobao.org，但是淘宝源已经停止维护，现在建议使用&lt;/a&gt; &lt;a href=&quot;https://gems.ruby-china.org。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gems.ruby-china.org。&lt;/a&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	sudo gem update --system&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	gem sources --remove https://rubygems.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	gem sources -a https://gems.ruby-china.org/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 查看当前源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	gem sources -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 安装 CocoaPods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  // 安装 CocoaPods&lt;br&gt;  sudo gem install cocoapods&lt;/p&gt;
&lt;p&gt;  // 安装本地库，需要等待很长时间&lt;br&gt;  pod setup&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 如果安装了多个 Xcode，需要选择一个。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 检测是否安装好，search 一个组件，能 search 到证明安装好了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  pod search [一个组件]&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* CocoaPods 版本操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  // 查看当前安装的所有 CocoaPods 版本&lt;br&gt;   gem list –local | grep cocoapods&lt;/p&gt;
&lt;p&gt;  // 当前使用 pod 版本&lt;br&gt;  pod –version&lt;/p&gt;
&lt;p&gt;  // 更新到最新稳定版本&lt;br&gt;  sudo gem install cocoapods&lt;/p&gt;
&lt;p&gt;  // 更新到一个 pre-release 版本&lt;br&gt;  sudo gem install cocoapods –pre&lt;/p&gt;
&lt;p&gt;  // 安装指定版本&lt;br&gt;  sudo gem install cocoapods -v [版本号]&lt;/p&gt;
&lt;p&gt;  // 移除 CocoaPods，如果你安装多个，会列出一个 list 让你选择删除那个。如果只安装一个，也会给你提示，问你是否确定删除。&lt;br&gt;  sudo gem uninstall cocopods&lt;/p&gt;
&lt;p&gt;  // 移除指定版本&lt;br&gt;  sudo gem uninstall cocopods -v [版本号]&lt;/p&gt;
&lt;p&gt;  // 使用指定版本执行命令&lt;br&gt;  pod &lt;em&gt;1.3.1&lt;/em&gt; install&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 2.使用 CocoPods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 基础操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  // 打开一新的工程，执行命令&lt;br&gt;  pod init&lt;br&gt;  // Podfile 中添加&lt;br&gt;  pod ‘AFNetworking’&lt;br&gt;  // install&lt;br&gt;  pod install&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* 想要看到 install 的详细过程&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  pod install –verbose&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* 更新某一个组件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  // 不添加组件名则更新所有&lt;br&gt;  pod update [组件名]&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 更新本地依赖&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  pod repo update&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 不想在 install/update 时更新本地依赖。这样执行 `pod install` 会快一些。但是如果 github 或者私有仓库上面有了最新版本，本地搜到的还是旧版本。如果 `Podfile` 中使用新的版本号，这样是无法执行成功的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  // –verbose 可省略&lt;br&gt;  pod install –verbose –no-repro-update&lt;/p&gt;
&lt;p&gt;  pod update –verbose –no-repro-update&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 校验本地 lib repro 有效性&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  pod lib lint –allow-warnings&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 校验 spec 文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  pod spec lint&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 自定义组件时，将组件的 spec 文件上传到远端仓库。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  // [reponame] 一般可以在路径 ~/.cocoapods/repo 下查看，选择你需要的 name.&lt;br&gt;  pod repo push [reponame] [name.podspec] –verbose –sources=master,[reponame] –use-libraries –allow-warnings&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;想了解更多命令，请查看官方文档中 [Command Line API](https://guides.cocoapods.org/terminal/commands.html) 这一章节。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### Podfile 书写规范&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Podfile Syntax Reference v1.4.0](https://guides.cocoapods.org/syntax/podfile.html#script_phase)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```rb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source &amp;apos;https://github.com/CocoaPods/Specs.git&amp;apos; # 组件依赖文件所存放仓库，根据需求可引入多个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source &amp;apos;https://github.com/artsy/Specs.git&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;platform :ios, &amp;apos;8.0&amp;apos;            # &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inhibit_all_warnings!           # 忽视引用的代码中的警告&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;workspace &amp;apos;CocoaPodsDemo&amp;apos;       # 指定生成的 workspace 名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def common_pods                 # 如果有多个 target，可以将公共部分进行 def 定义再引入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pod &amp;apos;xxx&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &amp;apos;CocoaPodsDemo&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    project &amp;apos;DemoProject&amp;apos;       # 可用于指定实际的工程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    use_frameworks!             # 是否以 framework 形式引入。swift 必须有这个关键字 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    common_pods     			   # 公共引入的组件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pod &amp;apos;SSipArchive&amp;apos;, :inhibit_warnings =&amp;gt; true   # 屏蔽某个 pod 的 warning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pod &amp;apos;AFNetworking&amp;apos;, &amp;apos;3.2&amp;apos;   # 使用 3.2 版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pod &amp;apos;YYCache&amp;apos;, &amp;apos;~&amp;gt; 0.3&amp;apos;     # pod update 时最高升级到 &amp;lt; 1.0，不包括 1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 # Build 环境配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;PonyDebugger&amp;apos;, :configurations =&amp;gt; [&amp;apos;Debug&amp;apos;, &amp;apos;Beta&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;PonyDebugger&amp;apos;, :configuration =&amp;gt; &amp;apos;Debug&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 # 使用具体的某个 subspec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;QueryKit/Attribute&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;QueryKit&amp;apos;, :subspecs =&amp;gt; [&amp;apos;Attribute&amp;apos;, &amp;apos;QuerySet&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 # 引用本地组件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;AFNetworking&amp;apos;, :path =&amp;gt; &amp;apos;~/Documents/AFNetworking&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 # 使用具体仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 # 使用具体仓库具体分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;, :branch =&amp;gt; &amp;apos;dev&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 # 使用具体仓库的某个 tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;, :tag =&amp;gt; &amp;apos;0.7.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 # 使用具体仓库的某个 commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;, :commit =&amp;gt; &amp;apos;082f8319af&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 使用指定路径的 spec 文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 pod &amp;apos;JSONKit&amp;apos;, :podspec =&amp;gt; &amp;apos;https://example.com/JSONKit.podspec&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 target &amp;apos;ShowsApp&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		 pod &amp;apos;ShowsKit&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		# Has its own copy of ShowsKit + ShowTVAuth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		 target &amp;apos;ShowsTV&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		 pod &amp;apos;ShowTVAuth&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		 end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		# Has its own copy of Specta + Expecta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		# and has access to ShowsKit via the app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     # that the test target is bundled into&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	target &amp;apos;ShowsTests&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	 # inherit！ 有三种类型：&amp;apos;:complete&amp;apos; 继承父级所有行为；&amp;apos;:none&amp;apos; 什么行为都不继承；&amp;apos;:search_paths&amp;apos; 继承父级的 search paths&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     		inherit! :search_paths&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	pod &amp;apos;Specta&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	pod &amp;apos;Expecta&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# hook 配置, 在 preparing 阶段后，install 之前&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pre_install do |installer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# hook 配置，在 pod install 之后，可用于修改工程配置等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post_install do |installer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  installer.pods_project.targets.each do |target|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    target.build_configurations.each do |config|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      config.build_settings[&amp;apos;GCC_ENABLE_OBJC_GC&amp;apos;] = &amp;apos;supported&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Podspec-书写规范&quot;&gt;&lt;a href=&quot;#Podspec-书写规范&quot; class=&quot;headerlink&quot; title=&quot;Podspec 书写规范&quot;&gt;&lt;/a&gt;Podspec 书写规范&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://guides.cocoapods.org/syntax/podspec.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Podspec Syntax Reference v1.4.0&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;Pod:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:Spec&lt;/span&gt;.new &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |spec|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 组件基本信息配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;# 组件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.name         = &lt;span class=&quot;string&quot;&gt;&#39;Reachability&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 组件版本号，命名规则遵循 [semantic versioning](https://semver.org/)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.version      = &lt;span class=&quot;string&quot;&gt;&#39;3.1.0&#39;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 许可证&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.license      = &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;BSD&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 仓库主页&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.homepage     = &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/tonymillion/Reachability&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 一个作者用 spec.author = &#39;Darth Vader&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.authors      = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;Tony Million&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;tonymillion@gmail.com&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 组件概述&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.summary      = &lt;span class=&quot;string&quot;&gt;&#39;ARC and GCD Compatible Reachability Class for iOS and OS X.&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 组件源码地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.source       = &amp;#123; &lt;span class=&quot;symbol&quot;&gt;:git&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/tonymillion/Reachability.git&#39;&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:tag&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;v3.1.0&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 组件平台支持&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# 支持单平台使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.platform = &lt;span class=&quot;symbol&quot;&gt;:osx&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;10.8&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.platform = &lt;span class=&quot;symbol&quot;&gt;:ios&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# 支持多平台使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.ios.deployment_target = &lt;span class=&quot;string&quot;&gt;&#39;6.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.osx.deployment_target = &lt;span class=&quot;string&quot;&gt;&#39;10.8&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Build settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.dependency &lt;span class=&quot;string&quot;&gt;&#39;AFNetworking&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 1.0&#39;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# 组件依赖的第三方库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.requires_arc = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;                   &lt;span class=&quot;comment&quot;&gt;# 是否要求 ARC 环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.requires_arc = [&lt;span class=&quot;string&quot;&gt;&#39;Classes/*ARC.m&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Classes/ARC.mm&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.frameworks = &lt;span class=&quot;string&quot;&gt;&#39;QuartzCore&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;CoreData&#39;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 组件引用的 framework	spec.weak_frameworks = &#39;Twitter&#39;, &#39;SafariServices&#39; # 组件弱引用的 framework&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.libraries = &lt;span class=&quot;string&quot;&gt;&#39;xml2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;                &lt;span class=&quot;comment&quot;&gt;# 组件引用的 library&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	... 更多请看官方文档&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# File patterns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.source_files = &lt;span class=&quot;string&quot;&gt;&#39;Classes/**/*.&amp;#123;h,m&amp;#125;&#39;&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;# 接入方使用组件时，引入的源文件，正则匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.public_header_files = &lt;span class=&quot;string&quot;&gt;&#39;Headers/Public/*.h&#39;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;# 引入的共有头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.private_header_files = &lt;span class=&quot;string&quot;&gt;&#39;Headers/Private/*.h&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 引入的私有头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.vendored_frameworks = &lt;span class=&quot;string&quot;&gt;&#39;MyFramework.framework&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# 引入的 framework&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.vendored_libraries = &lt;span class=&quot;string&quot;&gt;&#39;libProj4.a&#39;&lt;/span&gt;            &lt;span class=&quot;comment&quot;&gt;# 引入的 library&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# 以 bundle 形式引入的资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.resource_bundles = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;MapBox&#39;&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;MapView/Map/Resources/*.png&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;OtherResources&#39;&lt;/span&gt; =&amp;gt; [&lt;span class=&quot;string&quot;&gt;&#39;MapView/Map/OtherResources/*.png&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# 直接引入资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.resources = [&lt;span class=&quot;string&quot;&gt;&#39;Images/*.png&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Sounds/*&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	... 更多请看官方文档&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Subspecs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# 将组件分为多个子组件，接入方可以根据需求只接入几个子组件，减少包体积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subspec &lt;span class=&quot;string&quot;&gt;&#39;Twitter&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |sp|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		sp.source_files = &lt;span class=&quot;string&quot;&gt;&#39;Classes/Twitter&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# 测试组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  spec.test_spec &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; |test_spec|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test_spec.source_files = &lt;span class=&quot;string&quot;&gt;&#39;NSAttributedString+CCLFormatTests.m&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test_spec.dependency &lt;span class=&quot;string&quot;&gt;&#39;Expecta&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# 默认子组件。也就是当接入方不作区分时，直接使用组件名引入时，所引入子组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.default_subspec = &lt;span class=&quot;string&quot;&gt;&#39;Core&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 多平台支持&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.ios.source_files = &lt;span class=&quot;string&quot;&gt;&#39;Classes/ios/**/*.&amp;#123;h,m&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spec.osx.source_files = &lt;span class=&quot;string&quot;&gt;&#39;Classes/osx/**/*.&amp;#123;h,m&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Cocopods 基本使用内容就这些。具体可以查看官方文档中 &lt;a href=&quot;https://guides.cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reference&lt;/a&gt; 这一章节。&lt;/p&gt;
&lt;h3 id=&quot;一些问题&quot;&gt;&lt;a href=&quot;#一些问题&quot; class=&quot;headerlink&quot; title=&quot;一些问题&quot;&gt;&lt;/a&gt;一些问题&lt;/h3&gt;&lt;p&gt;这里是一些经常遇到的问题。不是很全面，希望对你有帮助。&lt;/p&gt;
&lt;h4 id=&quot;1-项目使用了-CocoaPods-之后，为什么要以-Workspace-形式打开&quot;&gt;&lt;a href=&quot;#1-项目使用了-CocoaPods-之后，为什么要以-Workspace-形式打开&quot; class=&quot;headerlink&quot; title=&quot;1.项目使用了 CocoaPods 之后，为什么要以 Workspace 形式打开&quot;&gt;&lt;/a&gt;1.项目使用了 CocoaPods 之后，为什么要以 Workspace 形式打开&lt;/h4&gt;&lt;p&gt;因为执行 &lt;code&gt;pod install&lt;/code&gt; 之后，下载完的文件会通过使用 &lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods/Xcodeproj&lt;/a&gt; 合成一个 Project。Xcode 通过使用 Workspace 管理多个 Project，使各个 Project 之间可以相互引用。为了使工程中的文件能够引用组件中的文件，所以这里需要以 Workspace 形式打开。&lt;/p&gt;
&lt;h4 id=&quot;2-pod-install-vs-pod-update&quot;&gt;&lt;a href=&quot;#2-pod-install-vs-pod-update&quot; class=&quot;headerlink&quot; title=&quot;2.pod install vs. pod update&quot;&gt;&lt;/a&gt;2.pod install vs. pod update&lt;/h4&gt;&lt;p&gt;这是 &lt;a href=&quot;https://guides.cocoapods.org/using/pod-install-vs-update.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt; 中描述的一个经典问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pod install&lt;/strong&gt;: 优先安装 Podfile 中改变的组件，并优先遵循 Podfile 中的版本号，其次遵循 Podfile.lock 中的版本号。如果使用的 Podfile 中版本号，会将新的版本号更新到 Podfile.lock 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pod update [PODNAME]&lt;/strong&gt;: 会根据当前 Podfile 规则更新组件。如果 Podfile 中没有指定版本号，并不会遵循 Podfile.lock，而是会拉取最新版本，并更新 Podfile.lock。&lt;/p&gt;
&lt;p&gt;官方建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新添加一个 pod 时，使用 &lt;code&gt;pod install&lt;/code&gt;，不要使用 &lt;code&gt;pod update&lt;/code&gt; 去下载一个新的组件，避免跟新其他 pod 的版本。&lt;/li&gt;
&lt;li&gt;更新 pod 版本时，使用 &lt;code&gt;pod update [PODNAME]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;没有必要的话，不要使用全局更新 &lt;code&gt;pod update&lt;/code&gt;，避免不必要的更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-校验-podspec-文件出现问题（pod-spec-lint）&quot;&gt;&lt;a href=&quot;#3-校验-podspec-文件出现问题（pod-spec-lint）&quot; class=&quot;headerlink&quot; title=&quot;3.校验 podspec 文件出现问题（pod spec lint）&quot;&gt;&lt;/a&gt;3.校验 podspec 文件出现问题（pod spec lint）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;swift 版本问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Cocoa-Pods/swfit_error.png&quot; alt=&quot;swift_error&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.3, run终端输入：echo “2.3” &amp;gt; .swift-version&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;验证出现警告问题&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod spec lint xxx.podspec --allow-warning&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;找不到头文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight rb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod spec lint --allow-warnings --use-libraries&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然 CocoaPods 还有很多问题，这里就不一一列举了，如果遇到问题自行 Google 吧，很多问题都已经有了答案。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;CocoaPods 的相关知识，就总结到这里。花时间如仔细研究一下，还是能学到很多东西的。这样在今后的项目开发中遇到问题后，可以快速定位并解决，提高开效率。&lt;/p&gt;
&lt;h3 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h3&gt;&lt;p&gt;1.&lt;a href=&quot;https://cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods 官方文档&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;https://www.objc.io/issues/6-build-tools/cocoapods-under-the-hood/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods Under The Hood&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;很久之前读了一遍 &lt;a href=&quot;https://guides.cocoapods.org/&quot;&gt;Cocoa Pods 官方文档&lt;/a&gt;，对 Cocoa Pods 有了一个简单的了解。时隔多日，全忘了。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>2017 个人总结</title>
    <link href="http://yoursite.com/2018/02/13/2017%20%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/13/2017 个人总结/</id>
    <published>2018-02-13T02:05:06.000Z</published>
    <updated>2018-05-13T12:45:29.892Z</updated>
    
    <content type="html">&lt;p&gt;又到了写个人总结的日子。每到年末的时候，静下来回顾这一年，写写总结，是一件很有意思的事。鉴于上半年&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;过得乱七八糟，一切从下半年开始说起吧。&lt;/p&gt;
&lt;p&gt;六月底，和少帮主自驾游回了一次学校。去之前，少帮主叮嘱我最好在京东买两天保险。自驾游意在散心，没有走高速，全程慢慢悠悠的开。从早上十一点出发，中间一度绕到了山里，路很宽，车很少，风景很不错，具体画面可以参考 《平凡之路》 MV，也就是在这种路上，少帮主才放心让我我开。到了学校已经八点多，停下来在学校门口 “大骨拉面” 吃了点东西，吃完九点多，打算去学校逛逛。&lt;/p&gt;
&lt;p&gt;时隔一年回到这里，有种说不出的感觉。因为是毕业季，有些人在拉着箱子往外走，有些人刚刚聚餐回来，去年我们毕业的时候也是如此。进了学校之后，看到三教实验室还在亮着灯，就跑上去看了看，看看自己当年 “奋斗” 的地方。因为 ID 卡已经注销，图书馆也进不去了，所以下来之后就直接穿过小树林，绕过 “学友”，奔着四舍楼下去了，少帮主当然是奔着她的二舍去了。回学校之前，是没告诉任何人的，然后在四舍楼下碰到了邹导…就好像是晚上自习完回宿舍，到了楼下发现邹导在值班一样，这偶遇也没谁了。因为第二天是信院终期答辩，导师没有时间，所以晚上十点多被导师叫去他家聊天，师命不可违。和导师边走边聊，说不完的话，导师从燕大西苑一路把我送到燕大小东门，也就是燕大宾馆那个门。第二天中午，又去了三食堂二楼吃了一顿我梦寐以求的香锅，没吃完我还打包带了回去。之后又在海边转了一圈，就回去了。回去走的高速，几个小时就到北京了。当然是少帮主开的。&lt;/p&gt;
&lt;p&gt;七月至十月初，是结婚的高峰期。这几个月，我参加了很多场婚礼，也错过了很多场婚礼。吃过的狗粮可以养活四只哈士奇，随过的份子可以买一部顶配 iPhone X。其中十一假期，参加了志爽的婚礼。也因为这场婚礼，让我们一群班长时隔一年又聚在了一起。没有什么比一群逗比坐在一起扯淡更开心了。这几个月，除了上班之外，唯一的户外活动就是参加婚礼了。总结来说就是：参加不完的婚礼，吃不完的狗粮，随不完的份子。&lt;/p&gt;
&lt;p&gt;十一月，和斌哥他们一起去鸟巢看了 2017 LPL 世界总决赛。没有中国队不重要，两个韩国队 3:0 结束也不重要，重要的是开场有周杰伦。据网易云音乐统计，我 2017 年一共听了 7243 首歌，听了周杰伦 3741 次，真爱粉无需多言。英雄联盟还不知道能火几年，下次在中国办总决赛还不知道什么时候，即使在中国也不一定再会有周杰伦。所以这一次也算是有生之年系列了。&lt;/p&gt;
&lt;p&gt;十二月，我破了职业生涯两个记录：连续工作一个月；完成一次通宵加班并且第二天正常上班。这一年我加了很多班，这是最狠的一个月，我的 2017 也在这充实的加班中完美收尾。&lt;/p&gt;
&lt;p&gt;这一年值得说的事件也就这些了，但是显然还不够 800 字，所以下面用一些总结性的事情凑一下，中学时代传统不能丢。&lt;/p&gt;
&lt;p&gt;关于读书。每年我都会强迫自己多读一些非技术类书籍，以让自己的思维开阔一些。否则常年和机器打交道，容易变得呆滞。然而这一年只读了几本，少之又少。为了生计，不得不花大量时间读一些技术类书籍，以补发育。所以这个 todo 只能放在下一年。&lt;/p&gt;
&lt;p&gt;关于英语。大学时期，我最讨厌的两门课程就是数学和英语。然而现在的工作和这两门课程联系的最紧密，我也是哔了狗了。大学四级我考了三次才勉强通过，六级考了一次再也没有考过。为了不让自己掉段，这一年我阅读了大量的英文文档，几本英文书籍，还翻译了一些文档。如果现在让我考四级，我觉得我还能勉强通过。&lt;/p&gt;
&lt;p&gt;关于健身。IT 是一个高危职业，没赚哪天你坐在椅子上敲着 code 就心梗了，留下一堆 bug 撒手离去。为了降低心梗概率，我不得不强迫自己经常锻炼。开始的时候，是每周跑步两次，周三晚上跑五公里，周六跑一次十公里，断断续续。健身卡到期之后，又开始在交大操场跑，每天早上起来跑两圈。随着天气变冷，后来也就起不来了。随着加班越来越多，我又开启了 “跑步续命” 模式。周一至周五，每天晚上去公司健身房跑三公里，完后喝 500ml 脱脂牛奶。这一跑就是两三个月，如今已养成习惯，每天不跑都那首。这个年纪，养成一个好习惯已经很不容易了。&lt;/p&gt;
&lt;p&gt;关于炒股。2017 年是港美股牛市，于是一直怀有金融梦的我加入炒股行列。当然不能因为炒个股就把自己说成金融人士，就好比你不能因为会装个系统就把自己说成黑客一样。炒股很练心态，练决策力，显然我还不到火候。有幸的是，折腾了一年没有亏钱。&lt;/p&gt;
&lt;p&gt;最大收获。这一年最大收获就是心态变得更加平和。扎心疼，扎透了就习惯了。你以为你比较穷，不要逗了，你何止穷，你还长得丑、双商低。“不能改变的事情就去适应”，我经常那这句话劝别人劝自己。丢一千块钱不要伤心，等哪天你丢一万块就会觉得那都不是事儿。多扎心的事情，终有一天会被你当做笑话讲出来。有时间去烦恼，不如出踏踏实实做一些你能改变事情。基于这个心态，我现在好高骛远的性格好了很多。&lt;/p&gt;
&lt;p&gt;总的来说，这一年全程都在补发育，所以也活很累。从学校出来，就没想要轻松过。人最可怕的就是一生碌碌无为，还自我安慰的说平凡难能可贵。我还没有到享受 “平凡可贵” 的年纪。《老情书》中有这样一段话：老太太说：“我就特别看不起你们这帮年轻人，二三十岁就叨逼叨说平平淡淡才是真。你们配吗？我上山下乡，知青当过，饥荒捱过，这你们没办法经历。但我今儿个平安喜乐，没事打几圈牌，早睡早起，你以为凭空得来的心静自然凉？老和尚说终归要见山是山，但你们经历见山不是山了吗？不乘着年轻拔腿就走，去刀山火海，不入世就自以为出世，以为自己活佛涅槃来的？我的平平淡淡是苦处来的，你们的平平淡淡是懒惰，是害怕，是贪图安逸，是一条不敢见世面的土狗。” 我不是土狗，我想去经历见山不是山。&lt;/p&gt;
&lt;p&gt;2017，一把辛酸泪，一纸荒唐言，到此结束。&lt;/p&gt;
&lt;p&gt;2018，to be continue. Write the code, change the world.&lt;/p&gt;
&lt;p&gt;2018.02.12 by bool周&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;又到了写个人总结的日子。每到年末的时候，静下来回顾这一年，写写总结，是一件很有意思的事。鉴于上半年&lt;br&gt;
    
    </summary>
    
      <category term="生活拾遗" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="年终总结" scheme="http://yoursite.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>查询规划器（译）</title>
    <link href="http://yoursite.com/2018/01/10/%E6%9F%A5%E8%AF%A2%E8%A7%84%E5%88%92%E5%99%A8/"/>
    <id>http://yoursite.com/2018/01/10/查询规划器/</id>
    <published>2018-01-10T10:04:49.000Z</published>
    <updated>2018-05-13T12:32:38.313Z</updated>
    
    <content type="html">&lt;p&gt;这是一篇 &lt;a href=&quot;https://www.sqlite.org/queryplanner.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Query Planning&lt;/a&gt; 的译文。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查询&lt;br&gt; 1.1 无索引表查询&lt;br&gt; 1.2 使用 rowid 查询&lt;br&gt; 1.3 使用索引查询&lt;br&gt; 1.4 多行内容查找&lt;br&gt; 1.5 使用 AND 链接多个 WHERE 条件查询&lt;br&gt; 1.6 多列查询&lt;br&gt; 1.7 覆盖索引查询&lt;br&gt; 1.8 使用 OR 链接多个 WHERE 条件查询&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;排序&lt;br&gt; 2.1 使用 rowid 排序&lt;br&gt; 2.2 使用索引排序&lt;br&gt; 2.3 覆盖索引排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询并排序&lt;br&gt; 3.1 通过多列索引查询并排序&lt;br&gt; 3.2 通过覆盖索引查询并排序&lt;br&gt; 3.3 通过索引进行局部排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无 rowid 的表&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;SQL 最主要的特征 （在 &lt;em&gt;所有&lt;/em&gt; 使用 SQL 语句的数据库中，不只是 SQLite）在于它是一中 &lt;em&gt;表述式编程语言&lt;/em&gt;，而不是一种 &lt;em&gt;过程化语言&lt;/em&gt;。在使用 SQL 时，你只需要告诉系统你想要计算什么，不需要描述如何去计算。计算结果的方式取决于 SQL 数据库引擎的内部查询规划器。&lt;/p&gt;
&lt;p&gt;对于一条 SQL 语句，可能有成百上千种执行算法。所有的算法都可以计算出正确的结果，但是有的计算的快，有的计算的慢。查询规划器相当于一个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Artificial_intelligence&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AI&lt;/a&gt;，为每条 SQL 语句尽可能规划最快的执行算法。&lt;/p&gt;
&lt;p&gt;多数情况下，查询规划器在 SQLite 中表现的十分出色。但是查询规划器需要使用索引进行协助。这些索引需要由开发者在设计数据库时加上。有时候，查询规划器会选择次优算法，而不是最优的。这种情况下，需要开发者进行一些辅助操作来帮助查询规划器更好的工作。&lt;/p&gt;
&lt;p&gt;这篇文章主要讲解了 SQLite 查询规划器和查询引擎背后的工作原理。有必要的时候，开发者可以根据这些原理更好地创建索引，帮助查询规划器高效地工作。&lt;/p&gt;
&lt;p&gt;更多信息可以查看 &lt;a href=&quot;https://www.sqlite.org/optoverview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLite query planner&lt;/a&gt; 和 &lt;a href=&quot;https://www.sqlite.org/queryplanner-ng.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;next generation query planner&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;1-查询&quot;&gt;&lt;a href=&quot;#1-查询&quot; class=&quot;headerlink&quot; title=&quot;1.查询&quot;&gt;&lt;/a&gt;1.查询&lt;/h3&gt;&lt;h4 id=&quot;1-1-无索引表查询&quot;&gt;&lt;a href=&quot;#1-1-无索引表查询&quot; class=&quot;headerlink&quot; title=&quot;1.1 无索引表查询&quot;&gt;&lt;/a&gt;1.1 无索引表查询&lt;/h4&gt;&lt;p&gt;在 SQLite 中，大多数表由一行或者多行组成，每一行都有一个独一无二的 key (&lt;a href=&quot;https://www.sqlite.org/lang_createtable.html#rowid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rowid&lt;/a&gt; 或者 &lt;a href=&quot;https://www.sqlite.org/lang_createtable.html#rowid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt;)(&lt;a href=&quot;https://www.sqlite.org/withoutrowid.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WITHOUT ROWID&lt;/a&gt; 表是一个特例)。这些数据通常会按照递增顺序排列。例如，这篇文章使用的表为 “FruitsForSale”，主要存储了各种各样的水果以及水果的产地和价格信息。表结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; FruitsForSale(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Fruit &lt;span class=&quot;built_in&quot;&gt;TEXT&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  State &lt;span class=&quot;built_in&quot;&gt;TEXT&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Price &lt;span class=&quot;built_in&quot;&gt;REAL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写入一些数据之后，这张表将以 figure 1 图中所示的形式存储于磁盘中：&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/tab.gif&quot; width=&quot;305&quot; height=&quot;140&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt;Figure 1: “FruitsForSale” 表结构&lt;/center&gt;

&lt;p&gt;在这个表里，rowid 并不是连续，但却是有序排列的。通常情况下，SQLite 创建一条数据时，这条数据的rowid 是在上一条 rowid 基础上加 1。如果某一行被删除，rowid 则会不连贯。如果有必要，创建一条数据时可以指定 rowid 的序号，并不是只能在末尾追加数据。但无论如何添加，每个 rowid 都是唯一的，有序排列的。&lt;/p&gt;
&lt;p&gt;当你想查询桃子的价格，查询语句可能像下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Peach&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了满足这条查询，SQLite 会读取表中每一行数据，首先检索 ‘fruit’ 这一列看是否有一条数据的值为 ‘Peach’，如果有的话，输出这一条数据对应的 ‘price’ 的值。检索过程如图 figure2 所示。这种算法叫做 &lt;em&gt;全表遍历&lt;/em&gt; —— 需要读入整张表并检索。这个表只有 7 条数据，检索起来还好，但如果有 7 百万条数据，为了检索一条 8-byte 的数据需要读入并遍历 1M 的数据。为此，尽量避免全表遍历。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/fullscan.gif&quot; width=&quot;356&quot; height=&quot;190&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt;Figure 2: 全表遍历 &lt;/center&gt;

&lt;h4 id=&quot;1-2-使用-rowid-查询&quot;&gt;&lt;a href=&quot;#1-2-使用-rowid-查询&quot; class=&quot;headerlink&quot; title=&quot;1.2 使用 rowid 查询&quot;&gt;&lt;/a&gt;1.2 使用 rowid 查询&lt;/h4&gt;&lt;p&gt;使用 rowid 查询可以避免全表遍历 (等价于通过 &lt;a href=&quot;https://www.sqlite.org/lang_createtable.html#rowid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;INTEGER PRIMARY KEY&lt;/a&gt; 查询)。查询桃子的价格，直接检索 rowid 为 4 的数据即可：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rowid&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为每条数据是以 rowid 为顺序存储在表中的，SQLite 可以对这些数据进行二分查找。如果表中含有 N 条数据，查询一条数据的时间以 logN 为比例系数增长，而不是以 N 为比例系数增长。假如一个表中含有 1 千万条数据，这意味遍历全表操作时快了 N/logN 倍，也就是 1 百万倍的速度。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/rowidlu.gif&quot; width=&quot;406&quot; height=&quot;138&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt;Figure 3: 通过 rowid 查询 &lt;/center&gt;

&lt;h4 id=&quot;1-3-使用索引查询&quot;&gt;&lt;a href=&quot;#1-3-使用索引查询&quot; class=&quot;headerlink&quot; title=&quot;1.3 使用索引查询&quot;&gt;&lt;/a&gt;1.3 使用索引查询&lt;/h4&gt;&lt;p&gt;使用 rowid 查询固然很快，但当你不知道 rowid 时怎么办？这时使用 rowid 查询就不行了。&lt;/p&gt;
&lt;p&gt;为提高查询速度，我们可以将 “fruitsforsalt” 表中 “fruit” 这一列设置为索引，像下面这样:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; Idx1 &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; fruitsforsale(fruit);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;索引表是与原来的 “fruitsforsale” 表相关联的另外一张表，索引表中包含索引内容(这里指 fruit 这一列)和 rowid 这两列，其中索引内容在前，所有数据按照索引内容排序。Figure 4 中为索引表的结构。”fruit” 这一列作为主键，”rowid” 作为辅助索引，如果多条主键字段值相同，则用辅助索引进行区别。在下面示例中，”Ornage”字段值相同时，使用 rowid 区别。你可能注意到，在原始表中每条数据的 rowid 都是唯一的，所以通过 “fruit” 和 “rowid” 组成的复合键可以为每条数据确定一个唯一索引。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/idx1.gif&quot; width=&quot;135&quot; height=&quot;135&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt;Figure 4: 索引表 &lt;/center&gt;

&lt;p&gt;使用索引可以更快的查询出 “桃子的价格” :&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Peach&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行这条时，SQLLite 先在索引表中进行二分查找，找到 fruit=’Peach’，然后取出这一行的 rowid。使用 rowid 在原始表 ‘FruitForSale’ 中进行第二次二分查找。找到对应行之后，取出 price 字段值。检索过程如图 figure 5 所示。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/idx1lu1.gif&quot; width=&quot;627&quot; height=&quot;137&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt;Figure 5: 通过索引查找桃子的价格 &lt;/center&gt;

&lt;p&gt;为了查询桃子的价格， SQLite 进行了两次二分查找。对于含有大量数据的表，这种方式仍然要快于全表遍历。&lt;/p&gt;
&lt;h4 id=&quot;1-4-多行查找&quot;&gt;&lt;a href=&quot;#1-4-多行查找&quot; class=&quot;headerlink&quot; title=&quot;1.4 多行查找&quot;&gt;&lt;/a&gt;1.4 多行查找&lt;/h4&gt;&lt;p&gt;在前面的查询中，通过 fruit=’Peach’ 约束条件查询出了一条数据。但是有时候一个约束条件可能对应多条数据。例如，我们要查询橘子的价格，将会出现如下情况：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.sqlite.org/images/qp/idx1lu2.gif&quot; width=&quot;630&quot; height=&quot;142&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt;Figure 6: 通过索引查询橘子价格&lt;/center&gt;

&lt;p&gt;在这里，SQLite 仍然是先进行一次二分查找，找到索引为 fruit=’Orange’ 的数据。然后取出 rowid，使用这个 rowid 去原始表再进行一次二分查找，找到对应的 price。之后 SQLite 并不会终止查询，而是继续去查询下一条符合条件的数据。使用二分查找，查询下一条数据的消耗远远小于第一次，因为第二条数据和第一条数据一般会在同一页内，就像上图展示的那样。这样第二次查找十分廉价，以致可以忽略不计。所以整个查询大约进行了三次二分查找。如果数据库中有 K 条数据符合条件，整个表总共有 N 条数据，那么一次查询所消耗时间的比例系数大约为 （K+1)*logN.&lt;/p&gt;
&lt;h4 id=&quot;1-5-使用-AND-链接多个-WHERE-条件查询&quot;&gt;&lt;a href=&quot;#1-5-使用-AND-链接多个-WHERE-条件查询&quot; class=&quot;headerlink&quot; title=&quot;1.5 使用 AND 链接多个 WHERE 条件查询&quot;&gt;&lt;/a&gt;1.5 使用 AND 链接多个 WHERE 条件查询&lt;/h4&gt;&lt;p&gt;接下来，你想要查询 California 生产的橘子的价格。查询条件如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; state=&lt;span class=&quot;string&quot;&gt;&#39;CA&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.sqlite.org/images/qp/idx1lu3.gif&quot; width=&quot;628&quot; height=&quot;140&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt;Figure 7: 使用索引查询 California 生产的橘子的价格&lt;/center&gt;

&lt;p&gt;一种查询路径是，先通过 fruit=’Orange’ 条件找出所有橘子的数据，然后过滤掉产地不是 California 的数据。查询过程如图 Figure 7 所示。多数情况这是一种合理的途径。但是，数据库需要做一次额外的二分查找来过滤掉产地为 Florida 的数据，并不是想象中那么高效。&lt;/p&gt;
&lt;p&gt;既然可以将 “fruit” 这一列设置为索引，也可以考虑将 “state” 这一列设置为索引。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; Idx2 &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; fruitsforsale(state);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.sqlite.org/images/qp/idx2.gif&quot; width=&quot;136&quot; height=&quot;138&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 8: 将 State 这一列设置为索引&lt;/center&gt;

&lt;p&gt;这个索引表中的 “state” 这一列和 Idx1 中的 “fruit” 类似，”state” 一列作为主键，”rowid” 一列作为辅助索引。在这个 model 中，”state” 这一列也有很多重复项，还是需要使用 “rowid” 来区分。&lt;/p&gt;
&lt;p&gt;使用索引表 Idx2，SQLite 有了新的查询方式：先使用索引表找出 California 对应的行，然后过滤掉未生产橘子的行。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/idx2lu1.gif&quot; width=&quot;630&quot; height=&quot;140&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 9: 使用索引查询 California 生产的橘子 &lt;/center&gt;

&lt;p&gt;这里与使用 idx1 查询最终得到的是相同的结果（使用索引是为了提高 SQLite 的查询速度，不应改变查询结果）。这两种索引方式工作量是相同的，所以在查询价格这个 case 上，使用 Idx2 并不能提高性能。&lt;/p&gt;
&lt;p&gt;在本例中，最后这两种查询方式使用时间相同。我们应该使用哪种呢？如果 &lt;a href=&quot;https://www.sqlite.org/lang_analyze.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ANALYZE&lt;/a&gt; 命令开启，SQLite 可以收集使用索引表的统计信息。然后 SQLite 就会知道使用 Idx1 进行索引查询，多数情况下只会查询到一行数据（这个表中 fruit=’Orange’ 属于一种特殊情况）；而使用 Idx2 进行所用查询，很多情况会查询到两行数据。所以如果其他查询情况相同，SQLite 会选择 Idx1 进行索引查询，以减少查询到的行数。这种选择是由 &lt;a href=&quot;https://www.sqlite.org/lang_analyze.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ANALYZE&lt;/a&gt; 提供的。如果 &lt;a href=&quot;https://www.sqlite.org/lang_analyze.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ANALYZE&lt;/a&gt; 没有运行在数据库上，SQLite 选择每种查询方式的概率是一样的。&lt;/p&gt;
&lt;h4 id=&quot;1-6-多列索引查询&quot;&gt;&lt;a href=&quot;#1-6-多列索引查询&quot; class=&quot;headerlink&quot; title=&quot;1.6 多列索引查询&quot;&gt;&lt;/a&gt;1.6 多列索引查询&lt;/h4&gt;&lt;p&gt;为最大化提高 “AND 链接多个 WHERE 条件查询” 的性能，你需要设置根据 AND 的链接项建立一个多列索引表。在这里我们为 FruitsForSale 表中的 “fruit” 和 “state” 两列创建为一个索引表：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; Idx3 &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; FruitsForSale(fruit, state);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/idx3.gif&quot; width=&quot;220&quot; height=&quot;136&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 10: 两列索引 &lt;/center&gt;

&lt;p&gt;多列索引表的形式和单列索引表的形式相同，都是索引列在前，rowid 列在后。最左一列用来确定要查询的行数，第二列用来过滤不符合要求的行数。如果这里有三列，第三列则用来过滤前两列结果，以此类推。这种情况一般在我们这种简单数据模型中不会出现。但也有特例，如过滤条件为 fruit=’Orange’ 时会有两行数据，需要根据索引表中的第二列来过滤掉脏数据。因为 rowid 是唯一的，所以索引表中的每一行都是唯一的，尽管两行内容一样。&lt;/p&gt;
&lt;p&gt;使用新的索引表 Idx3，SQLite 查询 California 生产的橘子的价格只需要两次二分查找：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; state=&lt;span class=&quot;string&quot;&gt;&#39;CA&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/idx3lu1.gif&quot; width=&quot;676&quot; height=&quot;140&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 11: 使用两列索引的索引表查询 &lt;/center&gt;

&lt;p&gt;在 Idx3 中使用 WHERE 约束进行查询，SQLite 只需要做一次二分查找就可以找出 “California 生产的橘子” 这一行对应的 rowid，然后再从原始的表中进行一次二分查找，找出对应橘子的价格。这是一种非常高效的查询方式。&lt;/p&gt;
&lt;p&gt;既然 Idx3 中已经包含了 &lt;a href=&quot;http://www.sqlite.org/queryplanner.html#fig3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Idx1&lt;/a&gt; 中的所有信息，那么我们就不需要 Idx1 了。如果要查询 “桃子的价格”，可以忽略掉 “state” 字段，直接使用 Idx3 进行查询：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Peach&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.sqlite.org/images/qp/idx3lu2.gif&quot; width=&quot;645&quot; height=&quot;132&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 12: 使用 Idx3 进行查询 &lt;/center&gt;

&lt;p&gt;因此，在今后设计数据库时最好遵循这样一个原则：不要让一个索引表包含另外一个索引表。虽然 SQLite 对于较长索引仍然可以进行高效查找，但是在设计时尽可能减少索引表的列数。&lt;/p&gt;
&lt;h4 id=&quot;1-7-覆盖索引&quot;&gt;&lt;a href=&quot;#1-7-覆盖索引&quot; class=&quot;headerlink&quot; title=&quot;1.7 覆盖索引&quot;&gt;&lt;/a&gt;1.7 覆盖索引&lt;/h4&gt;&lt;p&gt;通过使用索引表 Idx3 查询 “California 生产的橘子的价格” 已经十分高效。但还可以提高：将 “price” 这一列加入索引表，使用含有 3 列选项的索引表：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INDEX&lt;/span&gt; Idx4 &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; FruitsForSale(fruit, state, price);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.sqlite.org/images/qp/idx4.gif&quot; width=&quot;304&quot; height=&quot;136&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 13: 覆盖索引表 &lt;/center&gt;

&lt;p&gt;这个索引表中包含了 FruitesForSale 表中的所有字段。我们称这种查询方式为 “覆盖查询”。因为所有的字段信息都被设置为了索引。SQLite 不需要再查询原始表就可以查询出对应水果的价格。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; state=&lt;span class=&quot;string&quot;&gt;&#39;CA&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.sqlite.org/images/qp/idx4lu1.gif&quot; width=&quot;374&quot; height=&quot;138&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 14: 使用覆盖索引查询 &lt;/center&gt;

&lt;p&gt;将要查询的结果的那一列数据也加入到索引表中，这样就不用再与原始表相关联，也使二分查找次数减半。这种查询虽然使性能有了提升（查询大约速度提升一倍）。但是，这只是细微提升。在性能提升这一方面，提升一倍往往不如提升数百万倍。所以对于大多数查询来说，1 微秒与 2 微秒之间的的差异是微不足道的。&lt;/p&gt;
&lt;h4 id=&quot;1-8-使用-OR-链接多个-WHERE-条件查询&quot;&gt;&lt;a href=&quot;#1-8-使用-OR-链接多个-WHERE-条件查询&quot; class=&quot;headerlink&quot; title=&quot;1.8 使用 OR 链接多个 WHERE 条件查询&quot;&gt;&lt;/a&gt;1.8 使用 OR 链接多个 WHERE 条件查询&lt;/h4&gt;&lt;p&gt;多列索引表只适用于用 AND 连接的 WHERE 条件的查询。所以当约束条件为 &lt;strong&gt;California 生产和橘子&lt;/strong&gt; 时 Idx3 和 Idx4 两个索引表才有帮助；当约束条件变为 &lt;strong&gt;California 生产或橘子&lt;/strong&gt; 时，这两个索引表将不再有什么帮助。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; FruitsForSale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OR&lt;/span&gt; state=&lt;span class=&quot;string&quot;&gt;&#39;CA&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当面对使用 OR 连接 WHERE 条件时，SQLite 会先通过索引表查询出每个条件对应行的 rowid。然后将这些 rowid 做一个并集，再去原始表中去查询。下面是查询过程：&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.sqlite.org/images/qp/orquery.gif&quot; width=&quot;700&quot; height=&quot;308&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 15: 使用 OR 连接的查询 &lt;/center&gt;

&lt;p&gt;如上图所示，SQLite 首先查询出符合条件的 rowid，然后先将两部分做并集，再使用这些 rowid 去原始表中查询。这些 rowid 的排列是非常离散的，SQLite 使用索引查询一次 rowid 之后，会记住遍历过的索引，这样可以减少下次查询的计算量。当然，这只是其中一个实现细节。上图中不能表示完整的检索细节，但是展示了一个大概的过程。&lt;/p&gt;
&lt;p&gt;上图所示的 OR-by-UNION 技术是很适用的，前提索引表中必须有满足条件的数据。如果索引表中没有满足 OR 连接的约束条件的数据，那么 SQLite 会去原始表中进行全表遍历。而不是通过 rowid 集合进行二分查找，这将十分耗费性能。&lt;/p&gt;
&lt;p&gt;我们可以看到，OR-by-UNION 这个技术进行多索引查询时，实际上就是先通过索引表查询符合条件的 rowid，再将这些 rowid 进行 &lt;strong&gt;并集&lt;/strong&gt; 操作；类似的，通过 AND 连接的 WHERE 条件的查询，也可以先通过索引表将符合条件的 rowid 查询出来，然后取 &lt;strong&gt;交集&lt;/strong&gt;，很多 SQL 型数据库的原理就是这样的。但是是用单列索引的索引表和 OR-by-INTERSECT 进行 AND 查询，性能会比较差，所以一般都是使用多列索引进行 AND 查询。随着 SQLite 的不断优化，后序可能支持 OR-by-INTERSECT 查询。&lt;/p&gt;
&lt;h3 id=&quot;2-排序&quot;&gt;&lt;a href=&quot;#2-排序&quot; class=&quot;headerlink&quot; title=&quot;2.排序&quot;&gt;&lt;/a&gt;2.排序&lt;/h3&gt;&lt;p&gt;SQLite (像很多其他 SQL 数据库引擎一样) 可以使用索引进行 ORDER BY 查询，不仅加快查询速度。还可以加速排序速度。&lt;/p&gt;
&lt;p&gt;如果没有索引进行辅助，一个 ORDERT BY 查询需要先进行排序。看一下下面这个语句：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; fruit;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;SQLite 首先检索出所有结果，然后再通过使用一个 sorter 进行排序输出。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/obfruitnoidx.gif&quot; width=&quot;480&quot; height=&quot;185&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 16: 无索引排序 &lt;/center&gt;

&lt;p&gt;如果要输出的行数为 K 条，那么排序所需时间的比例系数为 KlogK.如果 K 的值比较小，那么排序时间无足轻重。但是像上图所示那样 K==N,排序时间远远大于需要遍历全表的时间。此外，所有的检索结果都需要先放在临时缓存区（可能是运存或者硬盘缓存，依赖于编译时和运行时的设置），这意味着在语句执行完之前需要占据一块很大的缓存。&lt;/p&gt;
&lt;h4 id=&quot;2-1-使用-rowid-排序&quot;&gt;&lt;a href=&quot;#2-1-使用-rowid-排序&quot; class=&quot;headerlink&quot; title=&quot;2.1 使用 rowid 排序&quot;&gt;&lt;/a&gt;2.1 使用 rowid 排序&lt;/h4&gt;&lt;p&gt;排序操作是十分昂贵的，SQLite 很难将 ORDER BY 转化为一个非耗时操作。如果 SQLite 要输出的数据已经排序好了，这样就不用进行排序了。例如，你如果你按照 rowid 的排序输出结果，就不需要进行排序：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rowid&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/obrowid.gif&quot; width=&quot;380&quot; height=&quot;185&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 17: 使用 rowid 进行排序检索 &lt;/center&gt;

&lt;p&gt;你也可以进行倒序检索：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;rowid&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样 SQLite 虽然不会进行排序。但是为了进行倒序输出，SQLite 需要从 table 最后一条开始向前遍历，而不是从前往后遍历。如图 Figure 17 所示。&lt;/p&gt;
&lt;h4 id=&quot;2-2-使用索引排序&quot;&gt;&lt;a href=&quot;#2-2-使用索引排序&quot; class=&quot;headerlink&quot; title=&quot;2.2 使用索引排序&quot;&gt;&lt;/a&gt;2.2 使用索引排序&lt;/h4&gt;&lt;p&gt;然而，在实际使用中，很少直接通过 rowid 进行有序输出。一般都是通过其他条件进行有序检索。如果一个索引可以适用于进行 ORDER BY 查询，那么这个索引也可以用来进行排序。例如，对 “fruit” 这一列排序进行输出：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitsforsale &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; fruit;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/obfruitidx1.gif&quot; width=&quot;595&quot; height=&quot;190&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 18: 使用索引进行排序 &lt;/center&gt;

&lt;p&gt;首先从上向下遍历 Idx1 索引表（如果查询语句为 “ORDER BY fruit DESC” 则从下向上遍历），按顺序检索出每个 fruit 对应的 rowid。然后通过 rowid 在原始表中进行二分查找并输出对应的数据。因为从索引中检索 rowid 时已经排好顺序，所以直接按照 rowid 的排列顺序在原始表中将数据检索并输出即可，不需要将所有检索结果再次排序。&lt;/p&gt;
&lt;p&gt;但是这样做真的节省时间吗？在本节开始时所描述的方式中，先对数据查找再排序，所需要的时间比例系数为 NlogN，因为这需要对 N 条数据进行排序。而通过 Idx 索引表进行有序查找，我们需要对 N 个 rowid 进行二分查找，每个查找时间为 logN，总时间的比例系数同样为 NlogN.&lt;/p&gt;
&lt;p&gt;SQLite 的查询规划器遵循 “低成本原则”。当有两种甚至有更多种查询方式时，SQLite 会先对每一种查询方式进行时间预估，然后选择成本最低的那种方式。成本的高低大多数情况下由预估时间决定，所以最终选择哪种方式取决于要查询的表的大小和 WHERE 条件的复杂度。通常情况下，使用索引进行有序查找一般作为首选。主要原因在于，使用索引查找不需要额外的临时存储空间来对数据进行排序，可以减少内存消耗。&lt;/p&gt;
&lt;h4 id=&quot;2-3-使用覆盖索引排序&quot;&gt;&lt;a href=&quot;#2-3-使用覆盖索引排序&quot; class=&quot;headerlink&quot; title=&quot;2.3 使用覆盖索引排序&quot;&gt;&lt;/a&gt;2.3 使用覆盖索引排序&lt;/h4&gt;&lt;p&gt;如果覆盖索引可以用于查询，那么查询 rowid 这一步则可以省去，这样消耗成本急剧降低。&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/obfruitidx4.gif&quot; width=&quot;370&quot; height=&quot;190&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 19: 使用覆盖索引进行有序查找 &lt;/center&gt;

&lt;p&gt;使用覆盖索引，SQLite 可以简单的对所有数据进行遍历，然后将结果输出，所需时间比例系数问 N。而且不需要额外开辟临时缓存区对数据进行排序。&lt;/p&gt;
&lt;h3 id=&quot;3-同时进行查询和排序&quot;&gt;&lt;a href=&quot;#3-同时进行查询和排序&quot; class=&quot;headerlink&quot; title=&quot;3.同时进行查询和排序&quot;&gt;&lt;/a&gt;3.同时进行查询和排序&lt;/h3&gt;&lt;p&gt;前面针对查询和排序两个主题分别作了讲解。但是在实际使用中，开发者需要将查找和排序同时进行。幸运的是，通过单个索引就可以完成这个操作。&lt;/p&gt;
&lt;h4 id=&quot;3-1-通过多列索引进行同时查找和排序操作&quot;&gt;&lt;a href=&quot;#3-1-通过多列索引进行同时查找和排序操作&quot; class=&quot;headerlink&quot; title=&quot;3.1 通过多列索引进行同时查找和排序操作&quot;&gt;&lt;/a&gt;3.1 通过多列索引进行同时查找和排序操作&lt;/h4&gt;&lt;p&gt;假如我们有这样一个需求：我们想要查询所有橘子的价格，并且按照橘子产地进行排序输出。查询语句如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; price &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这条查询语句中，既包含了查询，又包含了排序。使用索引表 Idx3 中的两列索引，可以将满足这两个条件的数据查询出来.&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/fruitobstate0.gif&quot; width=&quot;678&quot; height=&quot;142&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 20: 使用多行索引进行查找并排序 &lt;/center&gt;

&lt;p&gt;查询过程中，SQLite 先进行一次二分查找，找到 fruit=’Orange’ 对应的 rowid。（因为 fruit 是最左端的一列，所以整个索引表就是按照 furit 的拼写顺序进行排序的，因此两个相同的 fruit 在表中也是相邻的。）然后使用 rowid 在原始表中进行二分查找，找出对应的水果的价格。&lt;/p&gt;
&lt;p&gt;你可能注意到，这里没有任何排序过程。没有特意过程去执行 ORDER BY 操作。没有排序过程，是因为在 index 表中查出数据的时候就已经按照 state 排好顺序了。在一个索引表中，如果第一列的值相同（例如上图中的 ‘Orange’)，那么其对应的第二列的值也会像第一列那样按照顺序进行排列。所以，如果我们在一个索引表中遍历 fruit 值相同的两行，那么这两行数据的 state 列一定是按照顺序排列的。&lt;/p&gt;
&lt;h4 id=&quot;3-2-使用覆盖索引进行查找和排序&quot;&gt;&lt;a href=&quot;#3-2-使用覆盖索引进行查找和排序&quot; class=&quot;headerlink&quot; title=&quot;3.2 使用覆盖索引进行查找和排序&quot;&gt;&lt;/a&gt;3.2 使用覆盖索引进行查找和排序&lt;/h4&gt;&lt;p&gt;覆盖索引也可以用来查找和排序，例如下面这样：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; state;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/fruitobstate.gif&quot; width=&quot;393&quot; height=&quot;136&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 21: 使用覆盖索引进行查找并排序 &lt;/center&gt;

&lt;p&gt;按照之前说的，为满足 WHERE 条件约束，SQLite 会进行一次二分查找，从上向下遍历索引表，以找到符合条件的数据。如果 WHERE 条件所约束的值在索引表中有多条数据，那么这些条数据一定是相邻排列的。遍历时是按照从上向下顺序遍历的。因为 fruit 这一列后面一列就是 state，所以当 fruit 值相等时就会按照 state 这一列进行排列，以此类推。根据这个原理，查找出来的数据直接就是已经排好顺序的，十分高效。&lt;/p&gt;
&lt;p&gt;SQLite 同样也可以进行降序查询：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitforsale &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; fruit=&lt;span class=&quot;string&quot;&gt;&#39;Orange&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; state &lt;span class=&quot;keyword&quot;&gt;DESC&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本原理是类似的，只不过这次是从下向上遍历，这样查询出来的数据也是降序排列的。&lt;/p&gt;
&lt;h4 id=&quot;3-3-使用索引进行局部排序&quot;&gt;&lt;a href=&quot;#3-3-使用索引进行局部排序&quot; class=&quot;headerlink&quot; title=&quot;3.3 使用索引进行局部排序&quot;&gt;&lt;/a&gt;3.3 使用索引进行局部排序&lt;/h4&gt;&lt;p&gt;有些情况下，索引表只能满足部分属性的排序。例如下面这个查询：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fruitforsale &lt;span class=&quot;keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; fruit, price;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果使用覆盖索引表进行遍历，fruit 这一列肯定是按照顺序排列的，但是如果表中有多条 fruit 字段值相同的数据，它们的 price 字段值就不一定按照顺序排列了。当出现这种状况时，SQLite 会进行很多局部排序操作，每次只针对某个 fruit 进行排序，而不是针对整个表排序。Figure 22 展示了这一过程：&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://www.sqlite.org/images/qp/partial-sort.gif&quot; width=&quot;476&quot; height=&quot;186&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/p&gt;
&lt;center&gt; Figure 22: 使用索引进行局部排序 &lt;/center&gt;

&lt;p&gt;在这个示例中，并不是对 7 条数据进行整体排序，而是进行了 5 次单条排序（其实不用排）和 1 次两条排序（fruit=’Orange’ 这两条数据）。&lt;/p&gt;
&lt;p&gt;进行多次局部排序，而不是进行整体排序的优点在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相对于一次整体排序，多个局部排序同时进行可以减少 CPU 的时钟周期。&lt;/li&gt;
&lt;li&gt;每个局部排序可以很快运行完毕，这意味着不用将大量信息暂存到内存缓存中，减少内存的占用。&lt;/li&gt;
&lt;li&gt;有些 sort key 已经在索引表中排好顺序了，写 SQL 的可以省略，这样可以减少内存占用和 CPU 执行时间。&lt;/li&gt;
&lt;li&gt;每当一次局部排序完成，便会将数据返回给应用；整体查询需要遍历完整表才会将数据返回。前者更好。&lt;/li&gt;
&lt;li&gt;如果使用了 LIMIT 条件，还可以避免遍历整个表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为这些优点，SQLite 经常使用索引进行局部排序，而不是进行整体排序。&lt;/p&gt;
&lt;h4 id=&quot;4-无-rowid-的表&quot;&gt;&lt;a href=&quot;#4-无-rowid-的表&quot; class=&quot;headerlink&quot; title=&quot;4.无 rowid 的表&quot;&gt;&lt;/a&gt;4.无 rowid 的表&lt;/h4&gt;&lt;p&gt;以上描述的这些基本原则，同时适用于含有 rowid 的表和&lt;a href=&quot;https://www.sqlite.org/withoutrowid.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;无 rowid 的表&lt;/a&gt;。唯一的不同就是，有 rowid 的表，rowid 这一列一般会作为一个表的键。创建索引表之后，rowid 会在所以表中最右端用来关联索引表和原始表，在索引表中它的位置会被主键代替。&lt;/p&gt;
&lt;h4 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/queryplanner.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.sqlite.org/queryplanner.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇 &lt;a href=&quot;https://www.sqlite.org/queryplanner.html&quot;&gt;Query Planning&lt;/a&gt; 的译文。&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>iOS 中的单元测试</title>
    <link href="http://yoursite.com/2017/10/04/iOS%20%E4%B8%AD%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/10/04/iOS 中的单元测试/</id>
    <published>2017-10-04T13:05:30.000Z</published>
    <updated>2018-05-13T14:36:56.033Z</updated>
    
    <content type="html">&lt;p&gt;最近团队内部为了保证代码质量，要求单元测试覆盖率 80%+。在编写单元测试过程中，等到了一些收获，为此&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;总结一下。&lt;/p&gt;
&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;Unit test 是保证代码质量的重要模块，为模块编写 Unit test 可以减少开发中的 bug。同时在重构代码时，如果有一定粒度的 Unit test 覆盖，可以降低重构风险，这些大家都深有体会。&lt;/p&gt;
&lt;h5 id=&quot;1-核心观点&quot;&gt;&lt;a href=&quot;#1-核心观点&quot; class=&quot;headerlink&quot; title=&quot;1.核心观点&quot;&gt;&lt;/a&gt;1.核心观点&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;开发必须重视 unit test，不仅是点缀和补充，要和功能开发放到同样主要地位，加入工作量评估.&lt;/li&gt;
&lt;li&gt;加入 daily build，build break 要追责.&lt;/li&gt;
&lt;li&gt;对于某些大的代码改动，发 merge request 之前要跑 unit test.&lt;/li&gt;
&lt;li&gt;不要写完了功能再补充 unit test，尽可能做到 TDD.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2-覆盖粒度&quot;&gt;&lt;a href=&quot;#2-覆盖粒度&quot; class=&quot;headerlink&quot; title=&quot;2.覆盖粒度&quot;&gt;&lt;/a&gt;2.覆盖粒度&lt;/h5&gt;&lt;p&gt;原则上，unit test 要尽可能覆盖所有 case，粒度拆分越细越好。但是实际代码中，并不是所有 case 都需要覆盖，有的覆盖了没有意义；还有些 case 无法覆盖到，所以做到 100% 并不可能。unit test 诣在提高代码质量，减少失误，不要为了提高覆盖率而去强行覆盖某个无意义的 case。&lt;/p&gt;
&lt;h4 id=&quot;Unit-Test-基础知识&quot;&gt;&lt;a href=&quot;#Unit-Test-基础知识&quot; class=&quot;headerlink&quot; title=&quot;Unit Test 基础知识&quot;&gt;&lt;/a&gt;Unit Test 基础知识&lt;/h4&gt;&lt;h5 id=&quot;1-Get-Start&quot;&gt;&lt;a href=&quot;#1-Get-Start&quot; class=&quot;headerlink&quot; title=&quot;1.Get Start&quot;&gt;&lt;/a&gt;1.Get Start&lt;/h5&gt;&lt;p&gt;简单来说，创建 unit test 的 target，在这个 target 中创建对应的 test 文件，然后运行，测试，check 结果就可以了。但是有一些问题需要注意一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个 unit test 类中都会有一个 &lt;code&gt;-[setUp]&lt;/code&gt; 方法和一个 &lt;code&gt;-[tearDown]&lt;/code&gt; 方法。可以将需要公共初始化操作放在 &lt;code&gt;-[setUp]&lt;/code&gt; 中，将需要重置或者销毁的操作放在 &lt;code&gt;-[tearDown]&lt;/code&gt; 中。&lt;strong&gt;每个 test 方法的执行，都会 new 一个新的实例，并调用这两个方法。如果一个类中有多个 test 方法，这两个方法会被调用多次。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在执行 unit test 时，第一需要将 target 选为 unit test 那个 target；第二需要 run 选项选为 “Test”，如下图。不选择为 “Test” 也会运行，但有时候会出一些错误，运行结果不准。&lt;br&gt; &lt;img src=&quot;/uploads/iOS-unit-test/runItem.png&quot; alt=&quot;启动项&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果某个方法没有运行的”小菱形”，如下图。检查一下你这文件是否添加到 test target 里面(读取本地文件时，读取不到可能也是如此)。&lt;br&gt; &lt;img src=&quot;/uploads/iOS-unit-test/diamond.png&quot; alt=&quot;小菱形&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2-Test-Assertions-概览&quot;&gt;&lt;a href=&quot;#2-Test-Assertions-概览&quot; class=&quot;headerlink&quot; title=&quot;2. Test Assertions 概览&quot;&gt;&lt;/a&gt;2. Test Assertions 概览&lt;/h5&gt;&lt;p&gt;在一些 test 方法中，会使用一些 XCTest Framework 提供的 assert 进行判断，这些 assert 主要分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Boolean Assertions&lt;/strong&gt;，主要用来判断结果是 true 还是 false。例如 &lt;code&gt;XCTAssertTure&lt;/code&gt;、&lt;code&gt;XCTAssertFalse&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nil and Non-nil Assertions&lt;/strong&gt;，判断结果是否为 nil。例如 &lt;code&gt;XCTAssertNil&lt;/code&gt;、&lt;code&gt;XCTAssertNotNil&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equality and Inequality Assertions&lt;/strong&gt;，判断两个类或者值是否相等。例如 &lt;code&gt;XCTAssertEqual&lt;/code&gt;、&lt;code&gt;XCTAssertEqualObjects&lt;/code&gt;、&lt;code&gt;XCTAssertEqualWithAccuracy&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparable Value Assertions&lt;/strong&gt;，主要用于大小比较（&amp;gt;,&amp;lt;,&amp;gt;=,&amp;lt;=）。例如 &lt;code&gt;XCTAssertGreaterThan&lt;/code&gt;、&lt;code&gt;XCTAssertCreaterThanOrEqual&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Assertions&lt;/strong&gt;，主要用于异常测试，判断一个表达是否会抛出异常，以及异常具体信息。例如 &lt;code&gt;XCTAssertThrows&lt;/code&gt;、&lt;code&gt;XCTAssertThrowsSpecific&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failing Unconditionally&lt;/strong&gt;，想主动触发一个失败，或者标记一个失败。例如 &lt;code&gt;XCTAssertFail&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asynchronous Tests and Expectations&lt;/strong&gt;，这不是 assert，这是测试时需要的一些 exception，异步，KVO，Notification 等。例如 &lt;code&gt;XCTestExpectation&lt;/code&gt;、&lt;code&gt;XCTKVOExpectation&lt;/code&gt;、&lt;code&gt;XCTNSNotificationExpectation&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前几个都比较熟悉，这里说一下最后一项，有几个 expectation 对于我们来说比较陌生，主要用于 UI Test。在 &lt;a href=&quot;https://developer.apple.com/documentation/xctest/asynchronous_tests_and_expectations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Asynchronous Tests and Expectations&lt;/a&gt; 里面主要有如下几个类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XCTKVOException，当监听一个对象的属性变化（KVO）时使用。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)testMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	UIView *view &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [UIView new]; // 监听对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	XCTKVOExpectation *kvoExceptation &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [[XCTKVOExpectation alloc] initWithKeyPath:@&lt;span class=&quot;string&quot;&gt;&quot;tag&quot;&lt;/span&gt; object:view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTWaiterResult result &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [XCTWaiter waitForExpectations:@[kvoExceptation] timeout:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTAssertTrue(result &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; XCTWaiterResultCompleted);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;XCTNSNotificationExpectation/XCTDarwinNSNotificationExpectation，测试发通知时使用（NSNotification 和 Darwin NSNotification）。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)testMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	XCTNSNotificationExpectation *notificationExpectation &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [[XCTNSNotificationExpectation alloc] initWithName:@&lt;span class=&quot;string&quot;&gt;&quot;kNotificationName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTWaiterResult result &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [XCTWaiter waitForExpectations:@[notificationExpectation] timeout:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTAssertTrue(result &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; XCTWaiterResultCompleted);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;XCTNSPredicateExpectation，测试谓词表达式时使用，例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *str &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; @&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSPredicate *predicate &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [NSPredicate predicateWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;SELF BETWEEN &amp;#123;100, 200&amp;#125;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   XCTNSPredicateExpectation *predicateExpectation2 &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [[XCTNSPredicateExpectation alloc] initWithPredicate:predicate object:str];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   XCTWaiterResult result &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [XCTWaiter waitForExpectations:@[predicateExpectation2] timeout:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   XCTAssertTrue(result &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; XCTWaiterResultCompleted);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3-运行-unit-test-快捷键&quot;&gt;&lt;a href=&quot;#3-运行-unit-test-快捷键&quot; class=&quot;headerlink&quot; title=&quot;3.运行 unit test 快捷键&quot;&gt;&lt;/a&gt;3.运行 unit test 快捷键&lt;/h5&gt;&lt;p&gt;运行 unit test 试的方式有很多，可能直接点击 run 按钮运行；可以在 Test navigator 中选择运行全部 or 单个类 or 单个 case；也可以在源码中点击运行等。当然也可以通过快捷键，这里介绍一些快捷键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run 所有 unit test: Command + U&lt;/li&gt;
&lt;li&gt;只 build unit test: Shift + Command + U&lt;/li&gt;
&lt;li&gt;只 run，不 build unit test: Control + Command + U&lt;/li&gt;
&lt;li&gt;只 run 一个 case (当前光标停留的这个 case): Control + Option + Command + U&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;4-断点调试&quot;&gt;&lt;a href=&quot;#4-断点调试&quot; class=&quot;headerlink&quot; title=&quot;4.断点调试&quot;&gt;&lt;/a&gt;4.断点调试&lt;/h5&gt;&lt;p&gt;在 Breakpoint navigator 中添加一个 ‘Test Failure Breakpoint’ 断点，当出现失败时，就会出停下，方便调试。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/uploads/iOS-unit-test/testBreakpoint.png&quot; alt=&quot;test breakpoint&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;5-Code-Coverage&quot;&gt;&lt;a href=&quot;#5-Code-Coverage&quot; class=&quot;headerlink&quot; title=&quot;5.Code Coverage&quot;&gt;&lt;/a&gt;5.Code Coverage&lt;/h5&gt;&lt;p&gt;通过 code coverage 可以查看每个模块 unit test 的覆盖率，甚至可以具体到每个类里面，每个 case 的覆盖率。可以在 scheme 菜单中开启 code coverage。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/uploads/iOS-unit-test/openCodeCoverage.png&quot; alt=&quot;openCodeCoverage&quot;&gt;&lt;/p&gt;
&lt;p&gt;查看结果具体如下:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/uploads/iOS-unit-test/codeCoverage.png&quot; alt=&quot;codeCoverage&quot;&gt;&lt;/p&gt;
&lt;p&gt;在代码中可以查看方法是否被覆盖到，如下图中，红色代表未被覆盖，绿色代表被覆盖，绿色中的数字代表在测试过程中这段代码被命中的次数。可以通过 Editor -&amp;gt; Hide/Show Code Coverage 打开和关闭覆盖信息。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/uploads/iOS-unit-test/hitCode.png&quot; alt=&quot;hitCode&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;6-命令行运行-unit-test&quot;&gt;&lt;a href=&quot;#6-命令行运行-unit-test&quot; class=&quot;headerlink&quot; title=&quot;6.命令行运行 unit test&quot;&gt;&lt;/a&gt;6.命令行运行 unit test&lt;/h5&gt;&lt;p&gt;这目前没有什么实际用途，在这里只是简单提一下。通过以下命令格式可以直接运行 unit test:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcodebuild test [-workspace &amp;lt;your_workspace_name&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [-project &amp;lt;your_project_name&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                -scheme &amp;lt;your_scheme_name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                -destination &amp;lt;destination-specifier&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [-only-testing:&amp;lt;test-identifier&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [-skip-testing:&amp;lt;test-identifier&amp;gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;eg: &lt;code&gt;xcodebuild test -workspace MTBusinesskitDev.xcworkspace -scheme MTBusinessKitTests -destination &amp;#39;platform=iOS Simulator,name=iPhone 7&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;想了解更多信息可以查看 &lt;a href=&quot;How do I run unit tests from the command line?&quot;&gt;How do I run unit tests from the command line?&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Practics&quot;&gt;&lt;a href=&quot;#Practics&quot; class=&quot;headerlink&quot; title=&quot;Practics&quot;&gt;&lt;/a&gt;Practics&lt;/h4&gt;&lt;h5 id=&quot;1-测试路径&quot;&gt;&lt;a href=&quot;#1-测试路径&quot; class=&quot;headerlink&quot; title=&quot;1.测试路径&quot;&gt;&lt;/a&gt;1.测试路径&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;既要考虑正确路径，还要考虑非正确路径，故意创建一些错误 case。例如在 &lt;code&gt;MTBAdLoadInfoTest&lt;/code&gt; 中，故意创造了几组错误数据进行测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试多路径。很多的类中，可能有多条 case，需要覆盖完全。例如 &lt;code&gt;MTBMeituBusinessAdRequest&lt;/code&gt; 中，根据 load from cache or load from web,phase1 or phase2,缓存是否有效等情况，组合起来会有多种 case，组要考虑周全，完全覆盖到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;考虑边界情况。例如在 &lt;code&gt;MTBBatchReportDataManager&lt;/code&gt; 类中，测试“是否超过 15 天”(&lt;code&gt;-[checkDateIsPast:]&lt;/code&gt; 方法) 时。出了需要测试未超过 15 天和超过 15 天的 case，还需要测试恰好 15 天的 case。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2-测试一些私有方法及使用到私有属性&quot;&gt;&lt;a href=&quot;#2-测试一些私有方法及使用到私有属性&quot; class=&quot;headerlink&quot; title=&quot;2.测试一些私有方法及使用到私有属性&quot;&gt;&lt;/a&gt;2.测试一些私有方法及使用到私有属性&lt;/h5&gt;&lt;p&gt;测试过程中，可能需要调用或者测试一些私有方法，也有可能需要使用一些私有属性。这时可以新建一个 private category 文件，将一些私有方法和属性放到这个 category 中。然后将这个文件引入到 test case.m 中即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原则上这个 private category 文件只放在 test target 中，并且只被 test case.m 引入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如在测试 &lt;code&gt;MTBBusinessAdPreload&lt;/code&gt; 类时，添加了 &lt;code&gt;MTBBusinessAdPreload+Private.h&lt;/code&gt; 文件，内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; MTBPreloadModel ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)preloadModelWithInfo:(NSDictionary *)info parsingError:(NSString *__autoreleasing *)errorStr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; MTBBusinessAdPreload (Pirvate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) NSMutableArray &amp;lt;NSDictionary *&amp;gt; *resourceToDownloadDic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// preload 相关方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (MTBPosition *)createPositionWithAdIndexInfo:(MTBAdIndexInfo *)adIndexInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)replaceRoundAndIdeaIDWithPreloadData:(MTBPreloadModel *)preloadModel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSDictionary &amp;lt;NSString *, NSArray *&amp;gt; *)replaceCreativesWithPreloadData:(MTBPreloadModel *)preloadModel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// download 相关方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)downloadMaterials:(NSDictionary *)resourcesToDownload;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// cache 操作相关方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)cacheResourceToDownload:(NSDictionary *)dic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMutableDictionary *)cachedResourceToDownload;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)removeResourceFromCache:(NSString *)creativeId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3-异步方法测试&quot;&gt;&lt;a href=&quot;#3-异步方法测试&quot; class=&quot;headerlink&quot; title=&quot;3.异步方法测试&quot;&gt;&lt;/a&gt;3.异步方法测试&lt;/h5&gt;&lt;p&gt;测试异步逻辑，系统提供了专门的 API。所有涉及 通知、观察者、listener 等回调机制的 API 都可以写 case，不同的平台各自有支持。例如在 &lt;code&gt;MTBAnalyticsReportDataTest&lt;/code&gt; 中的异步测试：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)testReportAdInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTestExpectation *exception1 &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [self expectationWithDescription:@&lt;span class=&quot;string&quot;&gt;&quot;Report Data&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[MTBAnalyticsReportData shared] logEventWithReportInfo:allParams completion:^(NSError *error, BOOL success) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XCTAssertNil(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XCTAssertTrue(success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [exception1 fulfill];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTestExpectation *exception2 &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [self expectationWithDescription:@&lt;span class=&quot;string&quot;&gt;&quot;Report nil&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[MTBAnalyticsWebService shared] reportAdInfo:nil completion:^(NSError *error, BOOL success) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XCTAssertTrue(error.code &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1010&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        XCTAssertFalse(success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [exception2 fulfill];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self waitForExpectationsWithTimeout:&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt; handler:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有些异步测试，可能需要验证线程是否安全。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MTBReqeust *request &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [MTBReqeust new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[request loadData:^(id data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	XCTAssertTrue([NSThread mainThread]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此以外, 不仅要写独立调用异步 API 的 case, 还可以考虑对同一个对象多次调用该 API 的并发逻辑.&lt;/p&gt;
&lt;p&gt;因为对于异步API, 我们设计时总是隐含地给他制定了一个内在的重复调用时的回调逻辑, 一般对于异步 API , 我们在调用了该 API 方法后 callback 没回调的情况下, 又对&lt;strong&gt;同一个对象&lt;/strong&gt;再次调用了该 API 时的相应逻辑(ie. 并发模型), 会是以下几类之一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 每次调用, 总会在将来确定触发一个 callback, 多次调用间互不影响, 调用几次就会 callback 几次&lt;/li&gt;
&lt;li&gt;新的调用被忽略, 已存在的调用继续执行 (在前面的例子里, 第二次调用 request 方法会立刻同步返回&lt;code&gt;false&lt;/code&gt;), 旧调用在将来某时刻触发 callback&lt;/li&gt;
&lt;li&gt;旧的调用立刻被自动 cancel/旧的调用会立刻触发 failure callback, 新的调用正常执行, 在将来某时刻触发 callback&lt;/li&gt;
&lt;li&gt;新旧两次调用合并成一次调用/旧的 callback 被新的 callback 接管, 旧的 callback 不再触发, 在新的调用完成时再进行&lt;strong&gt;1次&lt;/strong&gt;回调&lt;/li&gt;
&lt;li&gt;API 不允许第一个调用没 callback 前就触发新的调用, 如果出现这种情况立刻抛出异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果在写 case 之前从来没考虑过这个问题, 那么可能使用这个 API 时已经有隐藏的危险了&lt;br&gt;无论我们的 API 采用哪一种并发调用策略, 都可以编写对应的 case 来严格验证这个问题, 此处不赘述.&lt;/p&gt;
&lt;h5 id=&quot;4-模拟操作&quot;&gt;&lt;a href=&quot;#4-模拟操作&quot; class=&quot;headerlink&quot; title=&quot;4.模拟操作&quot;&gt;&lt;/a&gt;4.模拟操作&lt;/h5&gt;&lt;p&gt;在写一些 case 时，有时候我们无法创造真实的场景，这时就需要进行模拟。&lt;/p&gt;
&lt;p&gt;（1）模拟系统通知&lt;/p&gt;
&lt;p&gt;视频在收到 home 出去时需要暂停. 我们有2种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1是模拟系统发 notification. 这种方式简单, 但是可能会影响一些其他逻辑&lt;/li&gt;
&lt;li&gt;2重构视频类的接口, 把 &lt;code&gt;func pause()&lt;/code&gt;方法扩展成 &lt;code&gt;func pause(cause:)&lt;/code&gt; 其中 &lt;code&gt;cause&lt;/code&gt; 参数表示了pause的原因, 例如包括”主动点击”, “页面消失”, “进如后台”等等, 然后把一部分原先在 &lt;code&gt;pause&lt;/code&gt; 外的逻辑移到方法里面来, 对传入的不同参数进行不同的处理. 这样在test case里只需要用不同的 &lt;code&gt;cause&lt;/code&gt; 参数调用pause方法即可.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）模拟时间流逝&lt;/p&gt;
&lt;p&gt;在开屏的一些逻辑中，home 出去回来，需要根据上次展示时间判断，是否有必要展示开屏；在批量上报逻辑中，测试数据是否过期时，需要创造一个过期时间。例如在 &lt;code&gt;MTBSplashAdManagerTest&lt;/code&gt; 中，在现在基础上减去 200s 并传入，这样程序执行时拿到的时间就是一个 “过去” 时间：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)testAppWillEnterForeground4 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [MTBSplashStatus setAppeared:NO];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.manager.splashShownCountInWarmStart &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.manager.isIntervalLargerThanSetting &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.manager.hasPendingDisplayTask &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 倒退 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;s,再次进入 APP 时距离上次超过 &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;s，展示开屏。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSTimeInterval interval &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [[NSDate date] timeIntervalSince1970] - &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.manager.lastLeaveDate &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [NSDate dateWithTimeIntervalSince1970:interval];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.manager appWillEnterForeground];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTAssertFalse(self.manager.isColdStart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;5-网络相关测试&quot;&gt;&lt;a href=&quot;#5-网络相关测试&quot; class=&quot;headerlink&quot; title=&quot;5.网络相关测试&quot;&gt;&lt;/a&gt;5.网络相关测试&lt;/h5&gt;&lt;p&gt;原则上，本地单元测试不依赖网络情况。因为打包时跑单元测试，打包机网络可能会挂掉，或者服务器挂掉。这是单元测试跑不过，打包就会挂掉。因此需要针对一些网络请求进行模拟。&lt;/p&gt;
&lt;p&gt;在测试一些接口解析时，需要一些 json 数据，平时这些数据是从服务端请求。而在测试过程中，可以直接读取本地数据。例如在测试 preload,load,setting 接口时，都是从本地读取数据。&lt;/p&gt;
&lt;p&gt;除此之外，还可以继承并重写 &lt;code&gt;MTBSimpleHttpFetcher&lt;/code&gt; 类中的一些方法，指定返回数据。本质上和从本地读取数据是一样的，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight m&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; MTBSimpleHttpFetchreMock:MTBSimpleHttpFetcher&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;implementation&lt;/span&gt; MTBSimpleHttpFetchreMock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id&amp;lt;MTBCancellable&amp;gt;)loadResource:(MTBRemoteResource *)resource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       reportQueue:(dispatch_queue_t)reportQueue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        completion:(MTBRequestCompletion)completion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   dispatch_async(reportQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	id data &lt;span class=&quot;built_in&quot;&gt;=&lt;/span&gt; [NSObject new]; // 自定义 data,也可以自定义 error 等。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		completion(data,data,nil);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	                        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后通过创建 &lt;code&gt;MTBSimpleHttpFetchreMock&lt;/code&gt; 类，调用 &lt;code&gt;-[loadResource:reprotQueue:completion:]&lt;/code&gt; 方法模拟网络拉取。&lt;/p&gt;
&lt;h4 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;h5 id=&quot;1-unit-test-需要与-APP-本身隔离，unit-test-执行不应该影响到-APP-本身逻辑&quot;&gt;&lt;a href=&quot;#1-unit-test-需要与-APP-本身隔离，unit-test-执行不应该影响到-APP-本身逻辑&quot; class=&quot;headerlink&quot; title=&quot;1. unit test 需要与 APP 本身隔离，unit test 执行不应该影响到 APP 本身逻辑&quot;&gt;&lt;/a&gt;1. unit test 需要与 APP 本身隔离，unit test 执行不应该影响到 APP 本身逻辑&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;iOS的unit test是否需要host到app这个问题, 尽量不要, 但目前因为bundle info取不到只能要host, 后面应该拆离。&lt;/li&gt;
&lt;li&gt;test case执行的process和main app不是一个process, 但是对于某些系统提供的全局UI对象, 如UIApplication和视图层级, 却是统一的, 因此要避免test case对main app的UI进行操作. 如果执行case一定会操作到的, 需要考虑用其他方式屏蔽.&lt;/li&gt;
&lt;li&gt;通过在scheme中增加test时的环境变量, 可以判断某个方法被调用到时所在的环境是main app进程还是test case代码的进程.&lt;/li&gt;
&lt;li&gt;注重test case退出时的数据清理, 都在&lt;code&gt;XCTestCase&lt;/code&gt;里&lt;ul&gt;
&lt;li&gt;func teardown()&lt;/li&gt;
&lt;li&gt;static func teardown()&lt;/li&gt;
&lt;li&gt;waitForExpectations(timeout:handler:)第二个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;涉及到复杂持久化存储的, 如果不太容易和main app数据分开来, 或者无法单独清理test数据, 那么应该在数据存储源头上就指定不同的路径, 通过上面提到的方式把这部分数据源抽象出来, 让test case可以重新指定另一个测试用的数据源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2-unit-test对开发的启示&quot;&gt;&lt;a href=&quot;#2-unit-test对开发的启示&quot; class=&quot;headerlink&quot; title=&quot;2.unit test对开发的启示&quot;&gt;&lt;/a&gt;2.unit test对开发的启示&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;模块高内聚低耦合, 一个类干明确的1件事&lt;/li&gt;
&lt;li&gt;多用组合(相比之于继承)&lt;/li&gt;
&lt;li&gt;不要滥用单例, 滥用单例会导致很难对这个类单独编写test case &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面如果谁有一些 best practics 可以直接更新文档。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近团队内部为了保证代码质量，要求单元测试覆盖率 80%+。在编写单元测试过程中，等到了一些收获，为此
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道</title>
    <link href="http://yoursite.com/2017/02/26/Clean-code/"/>
    <id>http://yoursite.com/2017/02/26/Clean-code/</id>
    <published>2017-02-26T11:41:39.000Z</published>
    <updated>2018-05-13T12:24:01.510Z</updated>
    
    <content type="html">&lt;p&gt;代码的整洁与否是一个程序员的个人卫生问题。一个程序员穿着可以稍邋遢一些，但是代码要写的干净、利落。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;如果你想成为一个更好的程序员，除了要学习语法、设计模式之外，还要学习如何写出整洁有效的代码，这本书会教你如何写出这样的代码。书中代码全部为 Java 语言，如果没有接触过 Java 语言，读起来可能会有点困难。&lt;/p&gt;
&lt;p&gt;这本书大致可以分为三个部分：第一部分占据了大约一半的章节，主要介绍编写整洁代码的原则、模式和实践，读起来比较容易理解。如果你读完这部分感觉已经掌握了如何写好整洁代码，那么你要失望了，其实你只学到一点皮毛。要知道，&lt;strong&gt;容易学会的东西一般价值都不高&lt;/strong&gt;。当然如果你是天才，学什么都快，就当我没说。&lt;/p&gt;
&lt;p&gt;第二部分主要是对几个复杂性不断增加的案例的研究，这是最有价值的一部分，也是最难读的一部分。在这部分你会读大量的 Java 代码，然后逐渐掌握如何写出整洁有效的代码。&lt;/p&gt;
&lt;p&gt;第三部分是从研究案例得到的一些启示与灵感。如果你仔细读了第二部分，这部分将是对你的回报，否则这部分对你来说可能所值无几。&lt;/p&gt;
&lt;p&gt;这本书是基于 Java 语言写的，因为语法的差异性，有些规则并不适合 OC。下面我主要针对 OC 总结的一些 Tips。&lt;/p&gt;
&lt;h3 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;命名是令程序员最头疼的事之一，良好的命名习惯是写好整洁代码的基本素养，命名遵循的原则就是：&lt;strong&gt;有意义且不误导读者&lt;/strong&gt;。在 Apple 的官方文档 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coding Guidelines for Cocoa&lt;/a&gt; 中，有规范的命名规则。作为一名 iOS 开发者，有必要读一下这篇文档。如果说 Apple 官方文档是针对 OC 的定制规则，那么下面说的将是一些通用规则。&lt;/p&gt;
&lt;h4 id=&quot;1-有意义的命名&quot;&gt;&lt;a href=&quot;#1-有意义的命名&quot; class=&quot;headerlink&quot; title=&quot;1.有意义的命名&quot;&gt;&lt;/a&gt;1.有意义的命名&lt;/h4&gt;&lt;p&gt;只有编程初学者才会用 &lt;code&gt;a&lt;/code&gt;,&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;sss&lt;/code&gt;,&lt;code&gt;tyq&lt;/code&gt; 去做变量或常量名，这点相信大家都不会了。在命名的时候，想要表达什么，就去用什么样的名字。在 OC 的编码习惯中，基本都是用完整的单词，尽量&lt;strong&gt;不要用缩写&lt;/strong&gt;，多个单词采用”驼峰标记法”。如果你深受 Windows 的 C 语言 API 毒害的话，赶快忘掉那该死的”匈牙利标记法”吧。例如下面的代码中：&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *nameLbl = [&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; new];  &lt;span class=&quot;comment&quot;&gt;// nameLbl 中不应把 &#39;Label&#39; 缩写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *logStr = &lt;span class=&quot;string&quot;&gt;@&quot;this is log&quot;&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 即使是 NSString 类型，也不应该缩写为 Str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *loginVC = [&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; new];  &lt;span class=&quot;comment&quot;&gt;// 不建议把 ViewController 所以为 VC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple 官方指定的一些缩写&lt;/a&gt;，在命名时这些变量可以使用缩写。&lt;/p&gt;
&lt;p&gt;尽量避免使用一些无意义的”魔法数字”，可以使用枚举、常量、宏或者其他方式代替，在进行全局搜索时也很方便。例如下面例子：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1,2,3 各代表什么？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果写成这样，则很明确&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;, VideoState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	VideoStateOpen = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	VideoStatePause,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	VideoStateClose&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == VideoStateOpen) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == VideoStatePause) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == VideoStateClose) &amp;#123;...&amp;#125;  &lt;span class=&quot;comment&quot;&gt;// 换成 switch 或许更好一些&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 还有这种的，40.0f 和 23.0f 是什么鬼？为什么不定义为有名字的常量？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; viewHeight = &lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;f + &lt;span class=&quot;number&quot;&gt;23.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-避免误导&quot;&gt;&lt;a href=&quot;#2-避免误导&quot; class=&quot;headerlink&quot; title=&quot;2.避免误导&quot;&gt;&lt;/a&gt;2.避免误导&lt;/h4&gt;&lt;p&gt;有意义的命名是先决条件，在有意义的基础上，还要做到不能误导读者。不要使用关键字或者一些专属名词命名；不要使用双关语；不要单个使用 ‘o’、’l’ 这种字母，以免与 ‘0’ 、 ‘1’ 混淆读者。下面示例引以为戒：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// list 在很多语言中是一种容器类型，尽量不要作为变量名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *list = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; new];   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// o or 0,1 or l 很容易混淆,尽管现在的 IDE 会对数字和字母有高亮区分,还是不建议这样写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (O == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a = O1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	l = &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;OC-中变量、属性、方法、类的命名&quot;&gt;&lt;a href=&quot;#OC-中变量、属性、方法、类的命名&quot; class=&quot;headerlink&quot; title=&quot;OC 中变量、属性、方法、类的命名&quot;&gt;&lt;/a&gt;OC 中变量、属性、方法、类的命名&lt;/h4&gt;&lt;p&gt;在进行团队合作时，通常团队内部会统一一套编码风格，否则在定义”个人信息”时有的用 ‘personData’，有的用 ‘personInfo’ 岂不是乱套了。在没有统一的时候，应按照如下规则。&lt;/p&gt;
&lt;p&gt;在对基本类型的变量或属性进行命名时，遵循有意义且不误导原则；在对对象类型的变量或属性进行命名时，经常在名字后面加上对象类型。不要觉得长，OC 的语法命名一向都很长，看 API 就知道了。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 基本类型命名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; avatarViewFrame = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 对象类型命名,多以 &#39;名称+类型后缀&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *titleLabel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *tagView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)	&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *namesArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 也有一些特例,例如 NSString 类型有时候就不带后缀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Property (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法命名，要遵循一下几条原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以小写字母开始，之后单词的首字母大写，即”驼峰标识”。&lt;/li&gt;
&lt;li&gt;如果方法代表对象接收的动作，以动词开始。尽量不要使用 ‘get’、’set’ 命名，set 方法可以使用 ‘set’ 开头命名。&lt;/li&gt;
&lt;li&gt;如果方法返回接收者的属性，以 接收者 + 接收的属性 命名。&lt;/li&gt;
&lt;li&gt;参数名以小写字母开始，之后的单词首字母大写，不要使用缩写。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 动词开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)pushToLoginViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)downloadImageWithURLString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)imageURL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGSize&lt;/span&gt;)logoViewSize;  &lt;span class=&quot;comment&quot;&gt;// 接受者 + 属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// set 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setUserName:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)userName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 一些反例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)getNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)showimage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithRequest:(&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *) req;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类命名，一般在开发项目时，会规定类得前缀。因为 Apple 的 API 前缀一般为两个大写字母，为了避免冲突，自定义类名一般前缀为三个大写字母。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 所有前缀为 BLC(BoolChow) 缩写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLCLoginViewController.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLCLoginViewController.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLCNetWork.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLCNetWork.m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Xcode 中，选中项目在右侧工具栏中可以设置类的前缀，这样在新建类时会默认加上前缀。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Clean-Code/prefixSet.png&quot; alt=&quot;设置前缀&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Clean-Code/prefixEg.png&quot; alt=&quot;设置前缀示例&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;p&gt;好的代码是不用注释的，好的注释是你想办法不去写注释，听着有点废话，但确实如此。之因为写注释，是因为代码写的比较乱，怕其他人看不懂，因为标上清晰的注释就能掩盖代码的丑陋。但是往往注释写太多，代码显得就 low 了。&lt;/p&gt;
&lt;p&gt;OC 的命名一般都使用单词全拼，很少使用缩写。有时候一个方法的名字特别长，读起来像一句话。所以在 OC 中，如果名字起得好，很少用的到注释。当然，在一些开源框架、SDK 或者官方 API 中，头文件中很多方法都会标有大量注释，方便使用者理解，这并不矛盾。为了注释到恰到好处，下面从”什么时候写”，”怎么写”，”在哪写”三个方面简述几条注释的规则。&lt;/p&gt;
&lt;h4 id=&quot;1-当代码表述不清，或者容易误导读者的时候，加以注释。&quot;&gt;&lt;a href=&quot;#1-当代码表述不清，或者容易误导读者的时候，加以注释。&quot; class=&quot;headerlink&quot; title=&quot;1.当代码表述不清，或者容易误导读者的时候，加以注释。&quot;&gt;&lt;/a&gt;1.当代码表述不清，或者容易误导读者的时候，加以注释。&lt;/h4&gt;&lt;p&gt;最好情况下是将代码表述清楚，但是有时候想要表述的内容太多，代码无法表述，这时候要加上注释进行辅助表述。例如 &lt;code&gt;ViewController&lt;/code&gt; 的生命周期方法：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 想要表述的内容太多，以至于方法名字不能表述出来。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)loadView; &lt;span class=&quot;comment&quot;&gt;// This is where subclasses should create their custom view hierarchy if they aren&#39;t using a nib. Should never be called directly.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad; &lt;span class=&quot;comment&quot;&gt;// Called after the view has been loaded. For view controllers created in code, this is after -loadView. For view controllers unarchived from a nib, this is after the view is set.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有时候代码表述的有歧义，可能会误导读者，这时候要加上注释进行辅助表述。而且尽量不要写误导性代码。&lt;/p&gt;
&lt;p&gt;在写 SDK 或者其他开源框架时，需要在头文件中添加注释，表述每个方法的作用。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Mantle 中，MTLJsonAdapter.h 中对每个方法都做了详细的注释，方便使用者理解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MTLJSONAdapter&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Attempts to parse a JSON dictionary into a model object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// modelClass     - The MTLModel subclass to attempt to parse from the JSON.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///                  This class must conform to &amp;lt;MTLJSONSerializing&amp;gt;. This&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///                  argument must not be nil.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// JSONDictionary - A dictionary representing JSON data. This should match the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///                  format returned by NSJSONSerialization. If this argument is&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///                  nil, the method returns nil.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// error          - If not NULL, this may be set to an error that occurs during&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///                  parsing or initializing an instance of `modelClass`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Returns an instance of `modelClass` upon success, or nil if a parsing error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)modelOfClass:(Class)modelClass fromJSONDictionary:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)JSONDictionary error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Attempts to parse an array of JSON dictionary objects into a model objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// of a specific class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// modelClass - The MTLModel subclass to attempt to parse from the JSON. This&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///              class must conform to &amp;lt;MTLJSONSerializing&amp;gt;. This argument must&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///              not be nil.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// JSONArray  - A array of dictionaries representing JSON data. This should&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///              match the format returned by NSJSONSerialization. If this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///              argument is nil, the method returns nil.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// error      - If not NULL, this may be set to an error that occurs during&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///              parsing or initializing an any of the instances of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///              `modelClass`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Returns an array of `modelClass` instances upon success, or nil if a parsing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// error occurred.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)modelsOfClass:(Class)modelClass fromJSONArray:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)JSONArray error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-注释要求简洁、明确、有意义。&quot;&gt;&lt;a href=&quot;#2-注释要求简洁、明确、有意义。&quot; class=&quot;headerlink&quot; title=&quot;2.注释要求简洁、明确、有意义。&quot;&gt;&lt;/a&gt;2.注释要求简洁、明确、有意义。&lt;/h4&gt;&lt;p&gt;既然是辅助表述，就不要啰嗦一顿还没说清楚，也不要喃喃自语。不需要注释的不要画蛇添足，强行注释；需要注释的，应以最简洁的语言将想要表达的意思表述清楚。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 例如下面的注释，纯属多余。因为命名已经将意思表达的很清楚。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *avatarImageView;  &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 头像视图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *userName;  &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 用户名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 播放视频 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)playVideo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-在正确的位置注释&quot;&gt;&lt;a href=&quot;#3-在正确的位置注释&quot; class=&quot;headerlink&quot; title=&quot;3.在正确的位置注释&quot;&gt;&lt;/a&gt;3.在正确的位置注释&lt;/h4&gt;&lt;p&gt;一般在类的头文件中注释，在源文件中不需要再次注释。例如下面代码，为什么要注释两次？&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CodeReview&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *	更新用户信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param userModel 用户信息 model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateUserInfoWithModel:(UserModel *)userModel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CodeReview&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** 更新用户信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateUserInfoWithModel:(UserModel *)userModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽量不要在过程代码中添加注释。除非在过程中有一段不易于理解的代码，可以加注释阐述一下。尤其是有一段代码需要其他开发者注意，这时候可以&lt;strong&gt;加注释起到放大、警示作用&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面的方法中有两个问题，一是过程代码中太多的注释；二是方法中执行事件太多，一个方法原则上只执行一件事，后面会说到。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)func &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 暂停播放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.player pause];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 获取视频播放进度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; totalTime = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.player.currentItem.Duration.value /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							 &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.player.currentItem.Duration.value.timescale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; currentTime = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.player.currentTime.value /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;								&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.player.currentTime.timescale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *playerProgress = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%.2f&quot;&lt;/span&gt;,currentTime / currentTime];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;span class=&quot;comment&quot;&gt;// 上传视频播放进度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	NetWorkManager *manager = [NetWorkManager new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	[manager uploadViewProgress:playerProgress];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注释的样式因注释的内容不同，有着不同的格式。有些格式是能&lt;strong&gt;被 Xcode 识别的&lt;/strong&gt;，有些格式是不能被识别的。在使用 Xcode 编写代码时，会有代码自动提示功能，同时如果一个如果这个变量或方法的注释被识别，则也会显示在代码提示栏中，例如下面的示例：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Documentation&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *personalInfo;    &lt;span class=&quot;comment&quot;&gt;///&amp;lt; 个人信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;ViewController.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Documentation.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Documentation *documentation = [Documentation new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    documentation.pers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Clean-Code/document.png&quot; alt=&quot;document&quot;&gt;&lt;/p&gt;
&lt;p&gt;swift 的注释与 OC 略有不同，有兴趣的可以看一下这篇&lt;a href=&quot;http://nshipster.com/swift-documentation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;对于 OC ，常用的注释方式有一下几种：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.文件信息的注释，在创建文件时编译器会为我们生成，不可被识别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  CodeReivew.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  BlogTest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  Created by boolChow on 17/2/18.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//  Copyright © 2016年 xxx All rights reserved.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.头文件(.h)中方法的注释，Xcode8 快捷键 &#39;option + command + /&#39;，可以被识别。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;#description#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * param &amp;lt;#param description#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * return &amp;lt;#return value description#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.源文件(.m)中私有方法的注释，可以和上面一样，也可以按照如下方式。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/** &amp;lt;#descriotion#&amp;gt; */。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)func &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.属性的注释，常用两种&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) UIView *view; ///&amp;lt; &amp;lt;#description#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) UIButton *button; //!&amp;lt; &amp;lt;#description#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.过程代码注释，一般使用 &#39;// &amp;lt;#description#&amp;gt;&#39;。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.枚举类型注释，一般使用 &#39;/** &amp;lt;#descriotion#&amp;gt; */&#39;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Xcode 中，&lt;code&gt;//&lt;/code&gt; 这种注释是不能被识别的，能识别的一般有 &lt;code&gt;/** */&lt;/code&gt;、&lt;code&gt;///&lt;/code&gt;、&lt;code&gt;//!&lt;/code&gt;、&lt;code&gt;///&amp;lt;&lt;/code&gt;、&lt;code&gt;//!&amp;lt;&lt;/code&gt;。另外，对于因为废弃而注释掉的代码，或者在调试过程中注释掉的代码，&lt;strong&gt;在进行代码提交之前一定要删掉！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h3&gt;&lt;p&gt;排版格式是影响代码整洁度的一个重要因素，虽然现在大部分 IDE 都对代码进行了排版，但是还有一些地方是 IDE 不能做到的，这需要我们手动去排版。我下面将”从小-&amp;gt;大”讲述一下格式的细节。&lt;/p&gt;
&lt;h4 id=&quot;1-大括号-‘-’&quot;&gt;&lt;a href=&quot;#1-大括号-‘-’&quot; class=&quot;headerlink&quot; title=&quot;1.大括号 ‘{}’&quot;&gt;&lt;/a&gt;1.大括号 ‘{}’&lt;/h4&gt;&lt;p&gt;对于大括号，有的习惯将在方法后面紧跟大括号的左半部分 ‘{‘，有的习惯换一行在写 ‘{‘，我习惯前者。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 普通方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)func &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// if else 等类似语句，else 跟在 if 语句结束后面，而不是换行。如果 if 语句中只有一句代码，也建议加上大括号。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (condition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-空格&quot;&gt;&lt;a href=&quot;#2-空格&quot; class=&quot;headerlink&quot; title=&quot;2.空格&quot;&gt;&lt;/a&gt;2.空格&lt;/h4&gt;&lt;p&gt;在适当的地方使用空格，能够使代码显得更加清晰。&lt;/p&gt;
&lt;p&gt;定义方法时，方法的 ‘-‘ 与方法返回值间添加空格，参数之间添加空格，方法名与方法开头的大括号之间添加空格&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)createBannerWithImage:(&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)image frame:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)frame &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)createBannerWithImage : (&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)image frame:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)frame&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;定义属性时，@property 与属性关键字之间空格，多个属性关键字之间使用空格，属性类型与属性名称之间使用空格，’*’紧跟属性名称。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;*password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * password;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运算符两侧之间添加空格。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isOpen == &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (username != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.state = [value isEqualString:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;] ? &lt;span class=&quot;string&quot;&gt;@&quot;close&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;@&quot;open&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加注释时，’//‘与内容之间添加空格，注释之间如果有英文单词，中英文之间添加空格。&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 根据 URL 对内容进行预加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prelaodDataWithURL:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)url;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-空行&quot;&gt;&lt;a href=&quot;#3-空行&quot; class=&quot;headerlink&quot; title=&quot;3.空行&quot;&gt;&lt;/a&gt;3.空行&lt;/h4&gt;&lt;p&gt;恰当是用空行能够使代码结构更加清晰，但是滥用空行会使代码显得更加糟糕。加空行的原则是：相关的代码组成一个”代码块”,两个代码块之间添加空行。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建议范例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithUserModel:(UserModel *)userModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_userModel = userModel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_imageArray = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_attribute = [&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; dictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; loadData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- （&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)func &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; height = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.avatarImageView.frame.size.height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; width = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.avatarImageView.frame.size.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *descriptionLabel = [&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	descriptionLabel.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20.&lt;/span&gt;f,&lt;span class=&quot;number&quot;&gt;30.&lt;/span&gt;f,height,width);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-模块分类&quot;&gt;&lt;a href=&quot;#4-模块分类&quot; class=&quot;headerlink&quot; title=&quot;4.模块分类&quot;&gt;&lt;/a&gt;4.模块分类&lt;/h4&gt;&lt;p&gt;对于头文件，可以分为系统 API、Pod文件、自定义 Model、自定义 View、自定义 Controller、自定义 Utils 等。具体分类依个人情况，只要合理即可。另外，个人习惯按照头文件长度从小到大排列。虽然现在有一些插件可以管理头文件，但是一开始就写清晰更好。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// System&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;CoreData/CoreData.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;CoreMedia/CoreMedia.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;AVFoundation/AVFoundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Pod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Mantle/Mantle.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;YYImage/YYImage.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;CocoaLumberjack/DDLog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;AFNetworking/AFNetworking.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;FeedModel.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;UserModel.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;CommentModel.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#improt &lt;span class=&quot;meta-string&quot;&gt;&quot;BannerView.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;PersonalInfoView.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;VideoDetailViewController.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;PersonalInfoViewController.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于属性分类，类似于头文件，例如按照 Data、View、Bool、Custom Class 等类型。依个人喜好，合理即可。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; maxHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *username;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *params;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// View&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *leftLine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *feedTableView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Custom Class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Property (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) TimelineRequest *request;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) UserInfoManager *userInfoManager;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个类中，方法之间通过 ‘#pragma mark - xxx’ 进行模块划分。例如在一个 ViewController 中，按照 init Method、Setup Method、LifeCycle Method、Public Method、Private Method等。例如下面途中即按照模块进行分割。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Clean-Code/separateCodeBlock.png&quot; alt=&quot;separateCodeBlock&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-一些原则&quot;&gt;&lt;a href=&quot;#5-一些原则&quot; class=&quot;headerlink&quot; title=&quot;5.一些原则&quot;&gt;&lt;/a&gt;5.一些原则&lt;/h4&gt;&lt;p&gt;对于代码的书写格式，需要遵循一些原则。类之间如何进行归类划分，属于设计模式的范畴，这里只从一个类说起。对于一个类文件，垂直方向代码长度最多建议 &lt;strong&gt;700~800 行&lt;/strong&gt;(超过 500 行就有点不能忍了)，如果超过了 1000 行，则应进行拆分抽取，否则可阅读行会很差；水平方向，建议最多不要超过 &lt;strong&gt;80 个字符&lt;/strong&gt;，如果超过，建议进行换行。例如下面注册 &lt;code&gt;Notification&lt;/code&gt; 时：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(updateData) name:ZHIDidDeleteMediaNotification object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(updateData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             name:UpdateDataNotification&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了提高可阅读行，一个类中的方法，最好按照&lt;strong&gt;调用顺序&lt;/strong&gt;进行编写，并进行模块分类。这样在其他人阅读代码时不用跳来跳去。&lt;/p&gt;
&lt;p&gt;按照正常人的审美观，适当的缩进、空格、空行、对齐，可以提高代码整洁度与美感。按照正常人的逻辑思维，例如从小到大、由表及里、从短到长等一些逻辑顺序去划分模块，编写代码，可以提高代码可阅读性。按照正常人的单元理解能力，垂直方向编写适当范围行数代码，水平方向按照适当范围换行，也可以提高代码的可阅读行。&lt;/p&gt;
&lt;h3 id=&quot;方法与数据结构&quot;&gt;&lt;a href=&quot;#方法与数据结构&quot; class=&quot;headerlink&quot; title=&quot;方法与数据结构&quot;&gt;&lt;/a&gt;方法与数据结构&lt;/h3&gt;&lt;h4 id=&quot;1-只做一件事&quot;&gt;&lt;a href=&quot;#1-只做一件事&quot; class=&quot;headerlink&quot; title=&quot;1.只做一件事&quot;&gt;&lt;/a&gt;1.只做一件事&lt;/h4&gt;&lt;p&gt;方法是对一段过程代码的封装，为了保证代码的整洁性，这段代码最好只执行一个事件，即一个方法最好只做一件事。先理解怎样才算是”一件事”，请看下面的代码：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupNotification];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupNavgationItme];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupTableView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupTableView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView = [[&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-64.0&lt;/span&gt;f, MTScreenWidth, MTScreenHeight) style:&lt;span class=&quot;built_in&quot;&gt;UITableViewStylePlain&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.dataSource = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.tableFooterView = [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.tableHeaderView = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableHeaderView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.separatorStyle = &lt;span class=&quot;built_in&quot;&gt;UITableViewCellSeparatorStyleNone&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithHexString:&lt;span class=&quot;string&quot;&gt;@&quot;f2f2f2&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView registerClass:[CommonCell class] forCellReuseIdentifier:kCommonCellReuseIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面代码中，&lt;code&gt;viewDidLoad&lt;/code&gt; 方法做了三个操作：注册通知、初始化导航栏、初始化 &lt;code&gt;tableView&lt;/code&gt;，这是三件事还是一件事呢？写过 OC 代码的都知道，这些操作”均属于初始化一些基本信息的操作”，这三个操作都在&lt;strong&gt;同一个抽象层级&lt;/strong&gt;上，因此算是一件事。&lt;/p&gt;
&lt;p&gt;同样的 &lt;code&gt;setupTableView&lt;/code&gt; 方法中，分别进行了：新建 &lt;code&gt;tableView&lt;/code&gt; 对象，设定 &lt;code&gt;tableView&lt;/code&gt; 代理、数据、&lt;code&gt;footerView&lt;/code&gt; 等一系列信息，注册 &lt;code&gt;cell&lt;/code&gt;。那么这算几件事呢？这些操作均属于初始化 &lt;code&gt;tableView&lt;/code&gt;，因此这个方法也就只做了”初始化 &lt;code&gt;tableView&lt;/code&gt;“这一件事。&lt;/p&gt;
&lt;p&gt;刚才提到了”同一个抽象层级”，一个方法中应该只有一个抽象层级。如果混杂不同的抽象层级，会让人迷惑，方法看起来就像一个垃圾桶。例如下面的代码：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dataURL = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@%@%@&quot;&lt;/span&gt;,host,baseURL,userID];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupNotification];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; uploadData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述代码虽然只有几行，确混论不堪。拼接 &lt;code&gt;dataURL&lt;/code&gt; 属于较低抽像层级；初始化视图和注册通知属于中间抽象层级；上传数据属于较高抽象层级。短短几行尚且能够读懂，多了之后读起来会乱七八糟。不建议这样写。&lt;/p&gt;
&lt;p&gt;一个好的方法应该遵循这样的原则：在尽量&lt;strong&gt;短小&lt;/strong&gt;的情况下，所有过程代码属于&lt;strong&gt;同一抽象层级&lt;/strong&gt;，按照&lt;strong&gt;自顶向下&lt;/strong&gt;的顺序书写代码。如果方法还能拆分，证明不合格。&lt;/p&gt;
&lt;h4 id=&quot;2-逻辑语句&quot;&gt;&lt;a href=&quot;#2-逻辑语句&quot; class=&quot;headerlink&quot; title=&quot;2.逻辑语句&quot;&gt;&lt;/a&gt;2.逻辑语句&lt;/h4&gt;&lt;p&gt;每种语言基本都会有 &lt;code&gt;if-else&lt;/code&gt;、&lt;code&gt;for循环&lt;/code&gt;、&lt;code&gt;switch&lt;/code&gt; 等这些逻辑语句，过多的使用这些语句，会使代码变得冗长、丑陋。当你的一段代码嵌套2~3个 &lt;code&gt;if-else&lt;/code&gt; 语句或者 &lt;code&gt;for循环&lt;/code&gt;时，你就应该考虑一下是否有更优雅的写法呢。下面通过代码来分析一下：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 给一个变量赋值需要这么多行代码吗？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isFriend) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.permission = &lt;span class=&quot;string&quot;&gt;@&quot;YES&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.permission = &lt;span class=&quot;string&quot;&gt;@&quot;NO&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;objcArray.count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Object *obj = objcArray[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[obj description]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或许这种写法更简洁呢&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.permission = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isFriend ? &lt;span class=&quot;string&quot;&gt;@&quot;YES&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;@&quot;NO&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Object *obj &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; objcArray) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[obj description]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// if 判断中包含多个条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; password != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; phone != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; sex != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这种情况最好封装成方法,if 判断中不要有太多的判断参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; userInfoIsEmpty]) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)userInfoIsEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; password != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; phone != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; sex != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些语句是一些基本的语句，用起来简单，不用太走心，同时容易把代码写的冗长不堪。因此在写代码时要尽量减少这些语句的使用，用其他更加优雅的方式代替。&lt;/p&gt;
&lt;p&gt;使用这些语句也暴露出一个问题，证明方法中有多处逻辑判断，每种条件下对应一个事件，是这个方法中包含太多的事件，极易违反”只做一件事”这一原则，也不易于阅读。&lt;/p&gt;
&lt;h4 id=&quot;3-参数&quot;&gt;&lt;a href=&quot;#3-参数&quot; class=&quot;headerlink&quot; title=&quot;3.参数&quot;&gt;&lt;/a&gt;3.参数&lt;/h4&gt;&lt;p&gt;一个方法，好情况下是没有参数，其次是一个、两个、三个（init 方法稍有特殊，可能会有多个参数）。当一个方法参数超过三个，那说明其中的一些参数可以封装为类了。&lt;/p&gt;
&lt;p&gt;方法是对过程代码的封装，参数越多，暴露的内容就越多，封装性就越差。过多的参数，也不易于理解。&lt;/p&gt;
&lt;p&gt;不建议向一个方法中传入布尔类型参数，否则的话就说明这个方法很有可能不只做一件事。YES 的时候会这样做，NO 的时候会那样做。&lt;/p&gt;
&lt;h4 id=&quot;4-结构化编程&quot;&gt;&lt;a href=&quot;#4-结构化编程&quot; class=&quot;headerlink&quot; title=&quot;4.结构化编程&quot;&gt;&lt;/a&gt;4.结构化编程&lt;/h4&gt;&lt;p&gt;每个方法，每个方法中的每个代码块都应该有一个入口、一个出口。遵循这个原则，意味着每个方法中只有一个 &lt;code&gt;return&lt;/code&gt; 语句，循环中不能有 &lt;code&gt;break&lt;/code&gt; 或 &lt;code&gt;continue&lt;/code&gt; 语句，更不能有 &lt;code&gt;goto&lt;/code&gt; 语句。结构化编程规范，对于小方法助易不大，只有在大的方法中，这些规范才会有明显的好处。所以，在保持方法短小的前提下，偶尔出现 &lt;code&gt;return&lt;/code&gt;、&lt;code&gt;break&lt;/code&gt;、&lt;code&gt;continue&lt;/code&gt; 语句没有坏处，甚至比单入单出原则更有表达力。&lt;/p&gt;
&lt;h4 id=&quot;5-时序性耦合&quot;&gt;&lt;a href=&quot;#5-时序性耦合&quot; class=&quot;headerlink&quot; title=&quot;5.时序性耦合&quot;&gt;&lt;/a&gt;5.时序性耦合&lt;/h4&gt;&lt;p&gt;一个方法的过程代码中，有时会出现时序性耦合。例如下面代码：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; registerCell];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; registerNotification];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupTableView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)registerCell &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView registerClass:[EmptyTableViewCell class] forCellReuseIdentifier:kEmptyCellReuseIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.TableView registerClass:[CommonCell class] forCellReuseIdentifier:kCommonCellReuseIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupTableView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView = [[&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-64.0&lt;/span&gt;f, MTScreenWidth, MTScreenHeight) style:&lt;span class=&quot;built_in&quot;&gt;UITableViewStylePlain&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.dataSource = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.tableFooterView = [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.tableHeaderView = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableHeaderView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.separatorStyle = &lt;span class=&quot;built_in&quot;&gt;UITableViewCellSeparatorStyleNone&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上述代码中，在 &lt;code&gt;viewDidLoad&lt;/code&gt; 方法中进行一些初始化操作。但是细心一些你会发现，”注册 &lt;code&gt;cell&lt;/code&gt;“在”初始化 &lt;code&gt;tableView&lt;/code&gt;“之前。但是在注册 &lt;code&gt;cell&lt;/code&gt; 的时候会用到 &lt;code&gt;tableView&lt;/code&gt;，这时候 &lt;code&gt;tableView&lt;/code&gt; 还是 &lt;code&gt;nil&lt;/code&gt;。所以这两个方法调用是有顺序的，否则就会出错。但是如果这样写，即使写对了，后面再修改代码时也容易颠倒位置，导致错误。那么最合适的做法应是这样：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将两个方法合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupTableView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView = [[&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-64.0&lt;/span&gt;f, MTScreenWidth, MTScreenHeight) style:&lt;span class=&quot;built_in&quot;&gt;UITableViewStylePlain&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.dataSource = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.tableFooterView = [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.tableHeaderView = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableHeaderView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.separatorStyle = &lt;span class=&quot;built_in&quot;&gt;UITableViewCellSeparatorStyleNone&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView registerClass:[EmptyTableViewCell class] forCellReuseIdentifier:kEmptyCellReuseIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.TableView registerClass:[CommonCell class] forCellReuseIdentifier:kCommonCellReuseIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;类与对象&quot;&gt;&lt;a href=&quot;#类与对象&quot; class=&quot;headerlink&quot; title=&quot;类与对象&quot;&gt;&lt;/a&gt;类与对象&lt;/h3&gt;&lt;p&gt;面向对象语言的特性就是抽象、封装、继承、多态，而”类”则将这些特性全部包含在内。所以一个好的类，便是将这些特性展现出来。&lt;/p&gt;
&lt;h4 id=&quot;1-类应该短小&quot;&gt;&lt;a href=&quot;#1-类应该短小&quot; class=&quot;headerlink&quot; title=&quot;1.类应该短小&quot;&gt;&lt;/a&gt;1.类应该短小&lt;/h4&gt;&lt;p&gt;在前面已经提过，一个类文件代码长度再好保持在 700~800 行以内。虽然一个类文件可能会有多个类与分类，但是具体到每个类，也应该保持短小，方便理解和阅读。&lt;/p&gt;
&lt;p&gt;这里说的短小，并不单指代码行数方面的衡量。对于一个类，最主要的衡量方式是：&lt;strong&gt;权责&lt;/strong&gt;。一个类不能有太多的权责，即使代码行数比较短，但是负责了太多事情，这个类仍然是一个臃肿的类。如果一个类有了太多权责，那么这个类就需要拆分，从而保持整洁性。这样会带了另外一个问题：类爆炸，似的项目中有太多短小单一的类。然而每达到一定规模的系统都会包括大量逻辑和复杂性，系统应该由许多短小的类而不是少量巨大的类组成。&lt;/p&gt;
&lt;h4 id=&quot;2-封装&quot;&gt;&lt;a href=&quot;#2-封装&quot; class=&quot;headerlink&quot; title=&quot;2.封装&quot;&gt;&lt;/a&gt;2.封装&lt;/h4&gt;&lt;p&gt;程序设计的原则是高内聚、低耦合。因此，一个类不应该暴露太多的属性（变量）与方法。下面是在使用 OC 进行程序设计时的一些建议。&lt;/p&gt;
&lt;p&gt;对于头文件的引入，大多在 .m 文件中引入。如果 .h 文件中需要使用到其他的类，优先使用 &lt;code&gt;@class&lt;/code&gt; 关键字引入，不能解决需求的情况下，再在 .h 文件中引入其他类的头文件。&lt;/p&gt;
&lt;p&gt;对于属性，除了使用 &lt;code&gt;nonatomic/atomic&lt;/code&gt;、&lt;code&gt;strong/weak/copy&lt;/code&gt;关键字修饰之外，最好还要标明读写属性。如果一个属性可以是 &lt;code&gt;readonly&lt;/code&gt;，就不要写成 &lt;code&gt;readwrite&lt;/code&gt;，不要让其他的类随意修改本类的属性。&lt;/p&gt;
&lt;p&gt;对于方法，尽量不要暴露太多的方法。一个类不要提供给外部太多乱七八糟的方法，以保证类的封装性。在提供方法时，方法的参数最好标明 &lt;code&gt;nonull/nullable&lt;/code&gt; 属性，而且一个方法不要有太多参数。&lt;/p&gt;
&lt;h4 id=&quot;3-内聚&quot;&gt;&lt;a href=&quot;#3-内聚&quot; class=&quot;headerlink&quot; title=&quot;3.内聚&quot;&gt;&lt;/a&gt;3.内聚&lt;/h4&gt;&lt;p&gt;类应该只有少量的实体变量。类中的每个方法都应该操作一个或多个这种变量。通常而言，方法操作的变量越多，就越黏聚到类上。如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。在 OC 中，如果一个属性在多个方法中被使用，是比较合理的；但是如果一个属性只在一个方法中使用，那么就有必要考虑一下这个属性的存在性，是否可以用局部变量代替。&lt;/p&gt;
&lt;h3 id=&quot;本书精华&quot;&gt;&lt;a href=&quot;#本书精华&quot; class=&quot;headerlink&quot; title=&quot;本书精华&quot;&gt;&lt;/a&gt;本书精华&lt;/h3&gt;&lt;p&gt;本书的第 14~16 章是对几个案例分析，第 17 张是一些总结性知识点，是本书的精华所在。如果用烹饪做比喻，那么前面的一些章节只是告诉你该用什么原料，油盐酱醋放的剂量以及火候；后面三章才是给你演示一遍整个烹饪过程，真正的授之以渔。&lt;/p&gt;
&lt;p&gt;第 14 章《逐步改进》，是对一个自定义 &lt;code&gt;Args&lt;/code&gt; 类的重构。通过逐步改进的方式，对原有类进行一步步分解。在这一过程中，遵循前面叙述的一些原则，对方法、变量进行大规模修改。其中有一点很值得学习，在进行重构之前，作者先写了一个覆盖这个类所有方法的单元测试。每次修改一些代码之后，都会跑一遍测试，如果测试通过，则继续修改；否则就需要找出问题，修复之后再继续。这非常值得我们学习，想象一下如果你不这样做，在重构完代码后，发现无法编译了，也不知道在哪个阶段修改出了问题，那会是多么糟糕的场景！&lt;/p&gt;
&lt;p&gt;第 15 章《JUnit内幕》，是对 &lt;code&gt;JUnit&lt;/code&gt; 框架部分代码的重构。同样，通过对代码的层层剖析，对代码的命名、函数的结构、模块的划分进行了一些改进，将前面讲的一些原则进行了推演。&lt;/p&gt;
&lt;p&gt;第 16 章《重构SerialDate》，是对开源框架 &lt;code&gt;SerialDate&lt;/code&gt; 的重构过程。先让代码跑通，然后从代码的注释开始，对代码进行修剪、结构调整。如书中所写，这一章分了两部分：”首先，让它工作”；”让它作对”。&lt;/p&gt;
&lt;p&gt;第 17 章《味道与启发》，是一个总结性章节。对前面的一些规则，以及在重构过程中的一些启发的总结。如果你仔细阅读的前面的章节，尤其是第 14~16 章，这一章的内容你会充分的吸收。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;以上，是我对这本书做的一个总结。本书值得学习的地方远不止这些，如果能用一篇文章说清楚，作者干嘛还要写一本书。因此，如果你对代码的整洁性要求十分严苛，想成为一个更好的 coder，建议你读一读这本书。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/5442024/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码整洁之道&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;代码的整洁与否是一个程序员的个人卫生问题。一个程序员穿着可以稍邋遢一些，但是代码要写的干净、利落。&lt;br&gt;
    
    </summary>
    
      <category term="读后有感" scheme="http://yoursite.com/categories/%E8%AF%BB%E5%90%8E%E6%9C%89%E6%84%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>聊聊 Objective-C 中的一些关键字</title>
    <link href="http://yoursite.com/2017/02/26/Keywords-in-Objective-C/"/>
    <id>http://yoursite.com/2017/02/26/Keywords-in-Objective-C/</id>
    <published>2017-02-26T10:04:49.000Z</published>
    <updated>2018-05-13T12:29:17.248Z</updated>
    
    <content type="html">&lt;p&gt;在 OC 中，有很多常用的关键字。如何正确使用这些关键字，是学习一本语言的基础。通常面试官只需要问几&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;个关键字相关的问题，就能看出面试者的基础如何。例如 &lt;code&gt;#include、#import、@class的区别&lt;/code&gt;，什么时候用 &lt;code&gt;const NSString *&lt;/code&gt; 什么时候用 &lt;code&gt;NSString * const&lt;/code&gt;，&lt;code&gt;define&lt;/code&gt; 和 &lt;code&gt;static&lt;/code&gt; 的正确使用等。不仅要知道怎么用，还要知道为什么这样用，不能只是“我看别人这么写”。&lt;/p&gt;
&lt;p&gt;这篇文章将介绍一些关键字的使用及原理。&lt;/p&gt;
&lt;h3 id=&quot;static-amp-const-amp-extern&quot;&gt;&lt;a href=&quot;#static-amp-const-amp-extern&quot; class=&quot;headerlink&quot; title=&quot;static &amp;amp; const &amp;amp; extern&quot;&gt;&lt;/a&gt;static &amp;amp; const &amp;amp; extern&lt;/h3&gt;&lt;p&gt;将一些重复使用的字符串定义为&lt;strong&gt;字符串常量&lt;/strong&gt;是一种良好的习惯，这样写起来代码便于维护。当然有时也会定义成&lt;strong&gt;宏&lt;/strong&gt;，后面会解释两者区别。在定义常量时，通常会用 &lt;code&gt;static&lt;/code&gt; 和 &lt;code&gt;extern&lt;/code&gt; 来定义常量的&lt;strong&gt;作用域&lt;/strong&gt;，用 &lt;code&gt;const&lt;/code&gt; 来定义常量的&lt;strong&gt;可变性&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-static&quot;&gt;&lt;a href=&quot;#1-static&quot; class=&quot;headerlink&quot; title=&quot;1.static&quot;&gt;&lt;/a&gt;1.static&lt;/h4&gt;&lt;p&gt;&lt;code&gt;static&lt;/code&gt; 关键字，主要定义变量的&lt;strong&gt;作用域&lt;/strong&gt;和&lt;strong&gt;生命周期&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; 修饰局部变量，主要定义变量生命周期，静态局部变量，因为存储在全局数据区，不会像其他存储在栈区的局部变量一样随着函数体结束被释放。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; 修饰全局变量，定义变量的作用域，被 &lt;code&gt;static&lt;/code&gt; 修饰的量，只存储一份，始化一次，其他地方共享这一份数据。在 OC 中，&lt;code&gt;static&lt;/code&gt; 变量声明一般在源文件（ “.m” ）中，如果放在头文件（ “.h” ）中，其他文件引入这个头文件时，容易引起命名冲突。被 &lt;code&gt;static&lt;/code&gt; 修饰的全局变量，作用域为当前文件。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.申明在源文件中，声明在头文件中容易引起命名冲突&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在类 TestClass 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = &lt;span class=&quot;string&quot;&gt;@&quot;hello world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestClass&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在类 OtherClass 中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;TestClass.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = &lt;span class=&quot;string&quot;&gt;@&quot;welcome!&quot;&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 编译不通过，这里会报 “Redefinition of &#39;str&#39;” 重复定义的错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OtherClass&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=======================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2.只存储一份，初始化一次，其他使用地方共享&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numA = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestViewcontroller&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addNum];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// numA = numC = 5; numB 一直为1，方法调用结束后被释放。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addNum &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numB = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numC = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	numA++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	numB++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	numC++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;tips: 如果一个变量在当前文件中被多处使用，建议使用 static 定义为当前类的全局变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-extern&quot;&gt;&lt;a href=&quot;#2-extern&quot; class=&quot;headerlink&quot; title=&quot;2.extern&quot;&gt;&lt;/a&gt;2.extern&lt;/h4&gt;&lt;p&gt;&lt;code&gt;extern&lt;/code&gt; 关键字，主要用来定义&lt;strong&gt;外部全局变量&lt;/strong&gt;。前面说用 &lt;code&gt;static&lt;/code&gt; 定义作用域为当前文件的全局变量。那如果想定义作用域为整个工程文件全局变量，即外部全局变量，则用 &lt;code&gt;extern&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一般在头文件中使用 &lt;code&gt;extern&lt;/code&gt; 声明变量，在源文件中赋值，尽量不要将外部全局变量的值暴露在头文件中；或者在头文件中声明，在其他文件中使用的时候再进行赋值。&lt;code&gt;extern&lt;/code&gt; 关键字只对变量进行声明，表明该变量可能在本模块使用也可以在其他模块使用。例如类B如果想使用类A中定义的全局变量，只需要引入类A的头文件即可，这样即使在编译的时候找类B不到变量的定义也不会报错，它会在链接的时候在类A的目标代码中找到这个变量。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * notificationName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestClass&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TestClass.m 源文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;TestClass.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * notificationName = &lt;span class=&quot;string&quot;&gt;@&quot;notificationName&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;多说一点&lt;/strong&gt;&lt;br&gt;在 Apple API 中，我们可以看到一些与 &lt;code&gt;extern&lt;/code&gt; 相关的宏定义，例如 &lt;code&gt;FOUNDATION_EXTERN&lt;/code&gt; 、 &lt;code&gt;UIKIT_EXTERN&lt;/code&gt;等。我们可以看一下其中一个的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// FOUNDATION_EXTERN 定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if defined(__cplusplus)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define FOUNDATION_EXTERN extern &lt;span class=&quot;meta-string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define FOUNDATION_EXTERN extern&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AVKIT_EXTERN 定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#ifdef __cplusplus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define AVKIT_EXTERN	extern &lt;span class=&quot;meta-string&quot;&gt;&quot;C&quot;&lt;/span&gt; __attribute__((visibility (&lt;span class=&quot;meta-string&quot;&gt;&quot;default&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define AVKIT_EXTERN	extern __attribute__((visibility (&lt;span class=&quot;meta-string&quot;&gt;&quot;default&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// UIKIT_EXTERN 定义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#ifdef __cplusplus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define UIKIT_EXTERN		extern &lt;span class=&quot;meta-string&quot;&gt;&quot;C&quot;&lt;/span&gt; __attribute__((visibility (&lt;span class=&quot;meta-string&quot;&gt;&quot;default&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define UIKIT_EXTERN	        extern __attribute__((visibility (&lt;span class=&quot;meta-string&quot;&gt;&quot;default&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OC 是支持与 C++ 混编的。&lt;code&gt;__cplusplus&lt;/code&gt; 是 C++ 中自定义宏，上面这段宏表示如果这是一段 C++ 代码，则使用 &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt;。那么问题来了，为什么要用 &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt; 呢？在 C++ 中，是支持重载的。就是函数名可以一样，在编译处理时，会将“函数名及返回类型+参数及返回类型”合成一个字段，以此判断是哪个函数；但是 C 中是不支持重载的，编译时只会将函数名合成一个字段，即 C 和 C++ 对函数名的处理是不一样的。C++ 为了兼容 C，在C++代码中调用 C 编码的文件，就需要用 &lt;code&gt;extern&amp;quot;C&amp;quot;&lt;/code&gt; 来告诉编译器:这是一个用 C 编码的文件，请用 C 的方式来链接它们。因此在进行 OC 与 C++ 混编时，用&lt;code&gt;FOUNDATION_EXTERN&lt;/code&gt; 去修饰全局方法。&lt;/p&gt;
&lt;p&gt;其他的例如 &lt;code&gt;UIKIT_EXTERN&lt;/code&gt;、&lt;code&gt;AVKIT_EXTERN&lt;/code&gt; 等与此类似，只是名字不同，目的是为了在不同的 framework 中使用时命名区分。平常定义一些外部全局变量时，直接使用 &lt;code&gt;extern&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h4 id=&quot;3-const&quot;&gt;&lt;a href=&quot;#3-const&quot; class=&quot;headerlink&quot; title=&quot;3.const&quot;&gt;&lt;/a&gt;3.const&lt;/h4&gt;&lt;p&gt;&lt;code&gt;const&lt;/code&gt;    关键字，多与 &lt;code&gt;static&lt;/code&gt; 和 &lt;code&gt;extern&lt;/code&gt; 连用，定义的类型为&lt;strong&gt;常类型&lt;/strong&gt;，属性为 &lt;strong&gt;readonly&lt;/strong&gt;。当初学习 C++ 时经常被这几个名词搞懵逼：常指针，指向常量的指针，指向常量的常指针。对应到 OC 上大同小异，请注意”异”在哪里。&lt;code&gt;const&lt;/code&gt; 一般有两种用法：&lt;br&gt;（1）修饰基本变量，即 int、double、float 等类型&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面两种写法是等价的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;		&lt;span class=&quot;comment&quot;&gt;// a 不可变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;		&lt;span class=&quot;comment&quot;&gt;// a 不可变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2) 修饰指针变量。在 OC 中，很多数据对象类型都有 &lt;code&gt;mutable（可变）&lt;/code&gt; 和 &lt;code&gt;immutable（不可变）&lt;/code&gt; 两种。&lt;code&gt;const&lt;/code&gt; 在修饰”不可变”的指针变量时，多被用做定义”指针常量”。因为指针已经为不可变，再用 &lt;code&gt;const&lt;/code&gt; 修饰没有意义。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// const 定义 &quot;常量指针&quot;，没有什么意义。&#39;值&#39;不可变的本身就不可变，可变的依然可变。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str1 = &lt;span class=&quot;string&quot;&gt;@&quot;hello&quot;&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;// const 修饰不可变字符串，字符串本身就不可变。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; *str2 = [&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;you&quot;&lt;/span&gt;];   &lt;span class=&quot;comment&quot;&gt;// const 修饰可变字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[str2 appendString:&lt;span class=&quot;string&quot;&gt;@&quot;name&quot;&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;// str2 的值为@&quot;you name&quot;。str2 可以改变，const 没有起到作用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;==================================================================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// const 定义指针常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; str3 = &lt;span class=&quot;string&quot;&gt;@&quot;const value&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str3 = &lt;span class=&quot;string&quot;&gt;@&quot;change point&quot;&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;// 此种操作不合法，str3 指向对象不能改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; str4 = [&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;mutable value&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str4 = [&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;change point&quot;&lt;/span&gt;];   &lt;span class=&quot;comment&quot;&gt;// 此种操作不合法，str4 指向对象不能改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[str4 appendString:&lt;span class=&quot;string&quot;&gt;@&quot;change value&quot;&lt;/span&gt;];   &lt;span class=&quot;comment&quot;&gt;// str4 的值可以改变。所以 str4 的定义方式没有意义。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;综上，如果想定义不可变字符串（不可变数据对象），直接用 &lt;code&gt;NSString&lt;/code&gt;；如果想定义可变字符串（可变数据对象），直接用 &lt;code&gt;NSMutableString&lt;/code&gt;；如果想定义一个不可以改变的字符串（数据对象），即值不可变，指向对象也不可变，用 &lt;code&gt;NSString * const str = @&amp;quot;xxx&amp;quot;&lt;/code&gt; 方式。且定义时就应赋值，如果不赋值，后面一直为 &lt;code&gt;nil&lt;/code&gt;；如果想定义一个值可以改变，所指对象可以改变的字符串（数据对象），直接用 &lt;code&gt;NSString&lt;/code&gt; 不就可以了么？&lt;/p&gt;
&lt;h4 id=&quot;4-const-与-static、extern-混用&quot;&gt;&lt;a href=&quot;#4-const-与-static、extern-混用&quot; class=&quot;headerlink&quot; title=&quot;4.const 与 static、extern 混用&quot;&gt;&lt;/a&gt;4.const 与 static、extern 混用&lt;/h4&gt;&lt;p&gt;如果需要在文件内部定义一个全局不可变常量，例如 &lt;code&gt;NSDictionary&lt;/code&gt; 的”key”，可以这样定义：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// .m 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;  * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; kValueKey = &lt;span class=&quot;string&quot;&gt;@&quot;key&quot;&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;// 如果变量只在当前文件使用，变量名前面加小写字母 &#39;k&#39;，习惯。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要定义一个外部使用的全局不可变常量，例如 &lt;code&gt;NSNotification&lt;/code&gt; 的”name”，可以这样定义：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// .h 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defineNotification;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// .m 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defineNotification = &lt;span class=&quot;string&quot;&gt;@&quot;defineNotification&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果只是单纯的定义通知名字，Apple 给提供了关键字 &lt;code&gt;NSNotificationName&lt;/code&gt;。本质上没有什么区别，只不过命名习惯让人看起来舒服些。定义方式如下：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// .h 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSNotificationName&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defineNotification;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// .m 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNotificationName&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defineNotification = &lt;span class=&quot;string&quot;&gt;@&quot;defineNotification&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;define&quot;&gt;&lt;a href=&quot;#define&quot; class=&quot;headerlink&quot; title=&quot;#define&quot;&gt;&lt;/a&gt;#define&lt;/h3&gt;&lt;p&gt;宏定义（#define）从上古 C 系编程的时代就存在，一个好的宏定义，能够让代码看起来更简洁、优雅。宏定义主要分为&lt;strong&gt;对象宏&lt;/strong&gt;和&lt;strong&gt;函数宏&lt;/strong&gt;。宏定义在预编译阶段进行替换，不做类型检查。因此，宏定义的使用过程中有很多坑，尤其是在函数宏中。如果没有足够的功底，不要轻易写函数宏，否则会有惊喜。有关宏的深入了解，可以看一下喵神的&lt;a href=&quot;https://onevcat.com/2014/01/black-magic-in-macro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;宏定义的黑魔法 - 宏菜鸟起飞手册&lt;/a&gt;。希望你看完之后能够更优雅的使用宏，尤其是函数宏。&lt;/p&gt;
&lt;p&gt;宏定义可以提升代码的优雅度，但也不能滥用。像上文中说的，一些”key”或者”notificationName”最好定义为静态常量。建议，将系统主题配置的数据定义为对象宏，例如主题色、字体大小、高度等，方便修改和使用；将常用并且冗长的 API 调用定义为函数宏，例如屏幕大小、系统版本判断等，用起来简洁、方便，减少大量冗余代码。还有很多使用场景，可以参考 Apple API，或者在平时敲码中进行积累。&lt;/p&gt;
&lt;p&gt;最后，一个烂大街的问题就是：”#define 和 const”的区别。主要由以下几种区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编译处理过程的区别&lt;/strong&gt;&lt;br&gt;define宏在预处理阶段进行展开、替换，&lt;strong&gt;define宏没有类型&lt;/strong&gt;，不做类型安全检查。宏定义是在预处理阶段进行替换，大量使用宏定义会造成编译时间过长。；const 常量在编译阶段使用，有具体类型，在编译阶段会进行类型检查。也就是说你用 define 定义一个字符串类型，然后赋值给一个浮点型变量，在编译阶段是不会报错的。但是现在的一些 IDE 都会有提示，例如 Xcode 就会提示对应错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;编译四个大体步骤：预处理-&amp;gt;编译-&amp;gt;汇编-&amp;gt;链接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存管理方式的区别&lt;/strong&gt;&lt;br&gt;正如很多文章里说的那样，宏定义不分配内存，变量定义分配内存。宏定义给出的是立即数，每有一次替换，变会分配一次内存，在内存中有若干个拷贝；const 常量给出的是内存地址，存储在全局静态区，只有一次拷贝，一份内存，效率要比宏定义高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有一个误区：这里说的”分配内存”是指在给变量或者常量赋值时，&lt;strong&gt;创建临时变量分配的内存&lt;/strong&gt;。不是变量或者常量占用的内存。例如下面：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define MAX_COUNT 100			   // 宏常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; height = &lt;span class=&quot;number&quot;&gt;20.5&lt;/span&gt;f;   &lt;span class=&quot;comment&quot;&gt;// 定义时并未分配内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count1 = MAX_COUNT;         &lt;span class=&quot;comment&quot;&gt;// 编译期间进行替换，编译期间不进行内存分配。运行时为 count1 赋值时，需要创建 MAX_COUNT 临时变量，宏的多次分配内存，是为赋值时 MAX_COUNT 这个临时变量分配的内存。不是指的 count1 ，不要混淆。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFolat&lt;/span&gt; viewHeight = height;	   &lt;span class=&quot;comment&quot;&gt;// 此时为 const 常量 height 分配内存，此后不再分配。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count2 = MAX_COUNT;	      &lt;span class=&quot;comment&quot;&gt;// 再次为创建 MAX_COUNT 临时变量分配内存。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; labelHeight = height;   &lt;span class=&quot;comment&quot;&gt;// 此时不再为 height 分配内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;修饰区别&lt;/strong&gt;&lt;br&gt;define宏可以定义常量，也可以定义方法；const只能用来定义常量，不能用来修饰方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define NSLogRect(rect) NSLog(@&lt;span class=&quot;meta-string&quot;&gt;&quot;%s x:%.4f, y:%.4f, w:%.4f, h:%.4f&quot;&lt;/span&gt;, #rect, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height)   // 喵神写的一个输出 rect 的函数宏&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define SCREEN_WITH	[[UIScreen mainScreen] bounds].size.width  // 屏幕高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; key = &lt;span class=&quot;string&quot;&gt;@&quot;key&quot;&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 只能定义常量，不能定义函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;id-amp-instancetype&quot;&gt;&lt;a href=&quot;#id-amp-instancetype&quot; class=&quot;headerlink&quot; title=&quot;id &amp;amp; instancetype&quot;&gt;&lt;/a&gt;id &amp;amp; instancetype&lt;/h3&gt;&lt;p&gt;id 被称为”万能指针”，可以指向任何对象，可以用于任何类型的对象。由 id 关键字定义的对象，在编译器看来只是一个对象指针，关于对象的信息，需要等到运行时才能确定。也就是说，id 定义的对象不做类型检查，向它发送未知的消息，编译阶段不会报错。id 在 OC 中如下定义：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if !OBJC_TYPES_DEFINED&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// Class 是一个 objc_class 结构体指针.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_class *Class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// objc_object 结构体,里面是一个 Class 类型成员.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_object &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class isa  OBJC_ISA_&lt;span class=&quot;built_in&quot;&gt;AVAILABILITY&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// id 为一个 objc_object 结构体指针.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; objc_object *&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上面代码可以看出，id 本质是一个结构体指针，结构体中只有一个成员 &lt;code&gt;isa&lt;/code&gt;。任何一个 OC 对象，都会带一个默认的 &lt;code&gt;isa&lt;/code&gt; 指针来存储对象的具体类型和信息。&lt;/p&gt;
&lt;p&gt;id 关键字主要有以下几个使用场景：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.定义 id 类型对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; newObj = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; array];   &lt;span class=&quot;comment&quot;&gt;// newObj 在运行时才确定指向对象类型为 NSArray,编译时不确定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[newObj log];	                 &lt;span class=&quot;comment&quot;&gt;// NSArray 类中并没有 &#39;log&#39; 这个对象方法,但是编译时不报错,运行时报错.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2.定义 delegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;MyDelegate&amp;gt; delegate;   &lt;span class=&quot;comment&quot;&gt;// 不确定什么类型的对象作为代理,定义为 id 类型.并且规定实现 &amp;lt;MyDelegate&amp;gt; 这个协议的对象才能作为代理.因此像 delegate 发送消息时,首先要做 respondsToSelector:&amp;lt;#(SEL)#&amp;gt; 检查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3.作为返回类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从 clang3.5 开始，出现类 &lt;code&gt;instancetype&lt;/code&gt; 关键字。它可以表示一个方法的相关返回类型，与 &lt;code&gt;id&lt;/code&gt; 不同的是，&lt;code&gt;instancetype&lt;/code&gt; 返回是相关类的具体类型，编译器可以清楚的明确该类的信息，在调用该类的方法和属性时会进行检查。目前一般类的初始化方法，返回类型都为 &lt;code&gt;instancetype&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NSArray 的一些初始化方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)arrayWithObject:(ObjectType)anObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)arrayWithObjects:(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ObjectType [])objects count:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)arrayWithObjects:(ObjectType)firstObj, ... &lt;span class=&quot;built_in&quot;&gt;NS_REQUIRES_NIL_TERMINATION&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)arrayWithArray:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;ObjectType&amp;gt; *)array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithObjects:(ObjectType)firstObj, ... &lt;span class=&quot;built_in&quot;&gt;NS_REQUIRES_NIL_TERMINATION&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithArray:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;ObjectType&amp;gt; *)array;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithArray:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;ObjectType&amp;gt; *)array copyItems:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)flag;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;include-amp-import-amp-class-amp-import&quot;&gt;&lt;a href=&quot;#include-amp-import-amp-class-amp-import&quot; class=&quot;headerlink&quot; title=&quot;#include &amp;amp; #import &amp;amp; @class &amp;amp; @import&quot;&gt;&lt;/a&gt;#include &amp;amp; #import &amp;amp; @class &amp;amp; @import&lt;/h3&gt;&lt;h4 id=&quot;1-include&quot;&gt;&lt;a href=&quot;#1-include&quot; class=&quot;headerlink&quot; title=&quot;1.#include&quot;&gt;&lt;/a&gt;1.#include&lt;/h4&gt;&lt;p&gt;在编译预处理阶段，预处理器会将一些引入的头文件替换成其对应的内容。例如，在源文件中引入了如下代码：&lt;br&gt;&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;预处理器对这行代码的处理是用 Foundation.h 文件中的内容去替换这行代码，如果 Foundation.h 中也引用了其他头文件，例如 &lt;code&gt;#import &amp;lt;Foundation/NSArray.h&amp;gt;&lt;/code&gt;，则会按照同样的处理方式对引入的头文件进行逐级替代，依次递归下去。&lt;/p&gt;
&lt;p&gt;在 C/C++ 中，我们用 &lt;code&gt;#include&lt;/code&gt; 引入头文件，用 &lt;code&gt;#include &amp;quot;&amp;quot;&lt;/code&gt; 引入自定义头文件，用 &lt;code&gt;#include &amp;lt;&amp;gt;&lt;/code&gt; 引入系统头文件。使用双引号 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，系统会优先从自定义头文件去查找，找不到再去系统头文件中找，如果还找不到，编译报错；使用尖括号 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;，系统会直接从系统头文件找，找不到会报错。如果直接用尖括号引入自定义头文件，则会直接报错。使用合理的方式去引入头文件，能够提高编译效率。&lt;/p&gt;
&lt;h4 id=&quot;2-import&quot;&gt;&lt;a href=&quot;#2-import&quot; class=&quot;headerlink&quot; title=&quot;2.#import&quot;&gt;&lt;/a&gt;2.#import&lt;/h4&gt;&lt;p&gt;&lt;code&gt;#import&lt;/code&gt; 可以说是 &lt;code&gt;#include&lt;/code&gt; 的一个升级，有关 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 的使用与 &lt;code&gt;#include&lt;/code&gt; 相同。除此之外，&lt;code&gt;#import&lt;/code&gt; 解决了”重复引用“的问题。例如，A,B,C 三个文件，B 引用了 A，C 引用了 B 和 A，这时 C 相当于引用了两次 A。如果直接用 &lt;code&gt;#include&lt;/code&gt; 编译会出问题，如果想使用 &lt;code&gt;#include&lt;/code&gt; 应该这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#ifndef(XXX)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;meta&quot;&gt;#define XXX&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#ifndef _AFNETWORKING_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#define _AFNETWORKING_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;AFURLRequestSerialization.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;AFURLResponseSerialization.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果直接使用 &lt;code&gt;#import&lt;/code&gt;，可以避免这个重复引用的问题。在编译的时候它会进行判断，如果已经引入了就不会再次引入。最好的习惯还是尽量不要在头文件(.h)中引入过多的文件，以免加长编译时间。另外，在引入系统文件或者 Pod 中的文件时，最好将包含头文件的外层文件夹一起引入。如果不引入，虽然编译能够通过，但是 Xcode 会提示一些错误，而且调用里面 API 时不会有代码提示。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;AVFoundation/AVFoundation.h&amp;gt;&lt;/span&gt;   // 前面添加 AVFoundation 文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-class&quot;&gt;&lt;a href=&quot;#3-class&quot; class=&quot;headerlink&quot; title=&quot;3.@class&quot;&gt;&lt;/a&gt;3.@class&lt;/h4&gt;&lt;p&gt;&lt;code&gt;@class&lt;/code&gt; 是告诉编译器有这样一个类，但是具体这个类里面有什么不知道。好比只给了你一本书的目录，但是没有给你书的内容。那么什么情况下使用 &lt;code&gt;@class&lt;/code&gt; 呢？在编译预处理阶段，会将文件中的 .h 文件替换为对应的内容，如果 .h 文件中还引入了其他的 .h 文件，则进行逐级替换，依次递归。因此，&lt;strong&gt;尽量不要在 .h 文件中引入其他的 .h 文件&lt;/strong&gt;。如果在声明一下方法或者属性时，需要用到某个类，这时可以用 &lt;code&gt;@class&lt;/code&gt;，并且需要在 .m 文件中以 &lt;code&gt;#improt&lt;/code&gt; 的方式再次引入这个文件。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// .h 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserModel&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIViewcontroller&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithUserModel:(UserModel *)userModel;  &lt;span class=&quot;comment&quot;&gt;// 此处用到了 UserModel 定义参数类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// .m 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;UserModel.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在这里需要使用 UserModel 中的具体内容，此时需要以 #import 的方式引入。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面说过，&lt;code&gt;@class&lt;/code&gt; 只是告诉有这么一个类，如果使用类中的内容，则会出错。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// TestOne.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NS_EUMU&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;, ReachabilityStatus) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReachabilityStatusUnknown          = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReachabilityStatusNotReachable     = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReachabilityStatusReachableViaWWAN = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReachabilityStatusReachableViaWiFi = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// OtherClass.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestOne&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OtherClass&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)JudgeStatusWith:(ReachabilityStatus)status;   &lt;span class=&quot;comment&quot;&gt;// 这里使用 ReachabilityStatus 会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-import&quot;&gt;&lt;a href=&quot;#4-import&quot; class=&quot;headerlink&quot; title=&quot;4.@import&quot;&gt;&lt;/a&gt;4.@import&lt;/h4&gt;&lt;p&gt;在说和这个关键字之前，先说一下 &lt;strong&gt;Moudles&lt;/strong&gt;。&lt;code&gt;#import&lt;/code&gt; 相对于 &lt;code&gt;#include&lt;/code&gt; 解决了重复引用的问题，但同时也带来另外一个问题：当引用关系很复杂时，编译时引用所占的代码量就会大幅上升。如果想解决这个问题，可以在项目文件中的 Supporting Files 组内的 .pch 文件中将经常引用的一些头文件添加进去，解决编译时间问题。默认情况下，里面会引入 &lt;code&gt;UIKit&lt;/code&gt;，这是每个文件中经常引用到的文件。&lt;/p&gt;
&lt;p&gt;但是并不能把所有的文件都放到 .pch 文件中，因为放入 .pch 中的头文件，每个文件都能访问，这样有些文件就能访问它本不应该访问的文件。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，Moudles 出现了。Modules 相当于将框架进行了封装，然后加入在实际编译之时加入了一个用来存放已编译添加过的 Modules 列表。如果在编译的文件中引用到某个 Modules 的话，将首先在这个列表内查找，找到的话说明已经被加载过则直接使用已有的；如果没有找到，则把引用的头文件编译后加入到这个表中。这样被引用到的 Modules 只会被编译一次，提升速度，从而解决了编译时间和访问混乱的问题。&lt;/p&gt;
&lt;p&gt;Apple 在 LLVM5.0 引入了一个新的编译符号 &lt;code&gt;@import&lt;/code&gt;，使用 @ 符号将告诉编译器去使用 Modules 的引用形式。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/FoundationErrors.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面等价于 #import &amp;lt;UIKit/UIKit.h&amp;gt;，同时还增加了 Moudles 的特性。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import Foundation.FoundationErrors;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;pragma&quot;&gt;&lt;a href=&quot;#pragma&quot; class=&quot;headerlink&quot; title=&quot;pragma&quot;&gt;&lt;/a&gt;pragma&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pragma&lt;/code&gt; 是一个预处理指令，在 OC 中主要有两个作用：&lt;strong&gt;整理代码&lt;/strong&gt; 和 &lt;strong&gt;防止警告&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;整理代码&lt;/strong&gt;&lt;br&gt;代码是一种艺术，代码写的优雅整洁是艺术的提现。使用 &lt;code&gt;pragma&lt;/code&gt; 能够是代码结构看起来更加整洁。具体语法为 &lt;code&gt;#pragma mark 描述内容&lt;/code&gt;，或者 &lt;code&gt;#pragma mark - 描述内容&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Lifecycle Method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewWillAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Private Method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)layoutSubviews &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - UIScrollViewDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewDidScroll:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Xcode 导航栏看起来效果如下：&lt;br&gt;（1）#pragma mark 描述内容&lt;br&gt;    &lt;img src=&quot;/uploads/Keywords-in-Objective-C/pragma.png&quot; alt=&quot;pragma 效果图&quot;&gt;&lt;br&gt;（2）#pragma mark - 描述内容 （添加了 ‘-‘），代码块之间会有一条线，更加清晰。&lt;br&gt;    &lt;img src=&quot;/uploads/Keywords-in-Objective-C/pragmaLine.png&quot; alt=&quot;pragma 效果图&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;防止警告&lt;/strong&gt;&lt;br&gt;比起代码结构乱七八糟，更让人崩溃的是，代码有一堆警告。编译器或者静态分析器会针对一些不合格的代码提示”警告”，目的是为了帮助开发者写出更加优秀的代码。在 Xcode 的 Build Settings 里面有关于 &lt;code&gt;warning&lt;/code&gt; 提示的设定，如下图：&lt;br&gt;&lt;img src=&quot;/uploads/Keywords-in-Objective-C/warningSettings.png&quot; alt=&quot;warning 设置&quot;&gt;&lt;br&gt;其中三个设定都为 NO，&lt;code&gt;Inhibit All Warnings&lt;/code&gt; 意为忽略所有警告，如果你想写出规范的代码，不要开启这个设定；&lt;code&gt;Pedantic Warnings&lt;/code&gt; 开启之后，会更加严格检查代码的标准，如果使用系统不支持的一些扩展，会报 &lt;code&gt;Warning&lt;/code&gt;；&lt;code&gt;Treat Warning as Error&lt;/code&gt; 意为将 &lt;code&gt;warning&lt;/code&gt; 作为 &lt;code&gt;error&lt;/code&gt; 处理，也就是说，开启之后所有的 &lt;code&gt;Warning&lt;/code&gt; 全部变为 &lt;code&gt;Error&lt;/code&gt;，只要有警告则编译不通过。如果你要严格要求自己，那就开启吧…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是有时候代码必须要这样写，又不想看到 &lt;code&gt;Warning&lt;/code&gt;，可以用预编译指令来处理。这时候可以使用 &lt;code&gt;#pragma&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ZBWeakTimerTarget&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面方法中，屏蔽了 &#39;-Warc-performSelector-leaks&#39; 警告，如果不屏蔽，会报出警告 &#39;PreformSelector may &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cause a leak because its selector is unknown&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) fire:(&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; *) timer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma clang diagnostic push&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma clang diagnostic ignored &lt;span class=&quot;meta-string&quot;&gt;&quot;-Warc-performSelector-leaks&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.target performSelector:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.selector withObject:timer.userInfo];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma clang diagnostic pop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer invalidate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上述代码中，如果不用 &lt;code&gt;#pragma&lt;/code&gt; 进行处理，会报有内存泄漏的警告。因为在 ARC 环境下调用方法时，Runtime 需要知道如何处理返回值。返回值会有 &lt;code&gt;void&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;char&lt;/code&gt;、&lt;code&gt;NSString *&lt;/code&gt;、&lt;code&gt;id&lt;/code&gt;等类型，ARC 通常会根据你所在操作的对象的头文件进行处理，或忽略，或 retain 等。这个问题的具体解释可以去查看一下 stackoverflow 上面的前三个&lt;a href=&quot;http://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown/20058585#20058585&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高票回答&lt;/a&gt;。在此主要阐明用 &lt;code&gt;#pragma&lt;/code&gt; 可以消除这个 warning。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;以上只是对 OC 中部分常用关键字进行一下总结，在 OC 中还有很多关键字，在此就不进行一一分析了。关键字这个东西，用好了能够提高代码的效率和鲁棒性，乱用的话则会造成意想不到的结果。对于一些常用的关键字，建议了解其作用与原理后再去使用。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://onevcat.com/2014/01/black-magic-in-macro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;宏定义的黑魔法 - 宏菜鸟起飞手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nshipster.com/pragma/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#pragma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;performSelector may cause a leak because its selector is unknown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在 OC 中，有很多常用的关键字。如何正确使用这些关键字，是学习一本语言的基础。通常面试官只需要问几&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>2016年个人总结</title>
    <link href="http://yoursite.com/2017/01/25/annual-report-2016/"/>
    <id>http://yoursite.com/2017/01/25/annual-report-2016/</id>
    <published>2017-01-25T03:55:37.000Z</published>
    <updated>2018-05-13T12:23:51.233Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;其&lt;/strong&gt;实，真的没有什么好写的。七月份的毕业总结已经把上半年总结在内，下半年又过的不痛不痒。如果生&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;活的满分是 10 分的话，这半年的生活我给 6 分，及格分（画外音：这个X装的我给满分）。但是年关将至，不矫情一下似乎不是我的风格。不是这个性格，也不会现在蹲在北京南站的星巴克里写总结了。还好不是写代码。&lt;/p&gt;
&lt;p&gt;去年春节，在家里仅仅呆了 7 天，大年初四就回到了学校。在燕大小区租的房子里，每天恶补面试相关知识。当时学校外面的饭店还没有开门，初五的时候，房东老奶奶给我端过一碗饺子来，感动的不行。这是我第一次大过年的，在异地他乡陌生人家里吃着饺子。后来老奶奶看我没地方吃饭，让我跟着他们吃，直到外卖饭店开门。当然后来我也给人家饭钱了，毕竟都挺不容易的。后来就是面试，面试，面试…折腾了近半年，临近毕业之际，找到了一份差强人意的工作。毕业前最后一段时间，本是旅行的日子，也在毕设与考驾照中等乱七八糟的事情中度过，上半年也就这样过去了。有关毕业的一些感慨，详情请看&lt;a href=&quot;http://luoanhao.github.io/2016/07/10/Graduation/#more&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我毕业了&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;七月二号来到北京，四号入职，然后就开始了上班族生涯。起初一个月感觉还不错，毕竟生活场景刚刚转换过来，对什么都充满新鲜感。起初我们租的房子里住了四个人，比较热闹。大家每天上下班，周六日就窝在家里看电视剧、打游戏；偶尔去健身、打球、养花，过得颓废而又自在。&lt;/p&gt;
&lt;p&gt;毕业之后，班级群异常的活跃，一会儿不看就 ‘99+’，不得不把它屏蔽了。以前在学校，大家学累了、玩累了就去别的宿舍转转，闲扯几句。只不过现在宿舍没有了，大家无聊了就去群里扯扯，装装X。因为我比较能装，所以有些都围绕我起了昵称。每天早上群里会发两个红包，大的运气王第二天和我接着发，小的运气王去整理歌单，为大家百无聊赖的生活增添了点乐趣。就这样开始了“混工资”的生活，一混就是几个月。&lt;/p&gt;
&lt;p&gt;但是后来我就开始慌了，感觉不能再这样下去。重复格调，重复频率的生活，时间久了就会让人生厌。每天上班下班，周六日休息，周而复始，完美的闭循环，无趣的很。毕竟还没有到过“岁月静好，现世安稳”那种生活的年纪，我还年轻。中学时期读了太多的韩寒、郭敬明，把我启蒙成一个“伪文青”，总是想象背包旅行走天涯才是自己想要的生活。但旅行是需要资金的，因为穷不得不“曲线救国”，先去赚钱，再去旅行。于是我由一名“伪文青”转换成一名“程序员”，梦想是三十岁以前做两年自由开发者，背着电脑去旅行，走累了停下来写会儿代码…但是照目前状态看来，“曲线救国”的半径是越来越大了。虽然平时假期也有时间去各地走走，但我宁可待在家里，毕竟据官方统计，中国现在已经有14亿人了。&lt;/p&gt;
&lt;p&gt;大约十二月份的时候，意识到了不能在这样下去，否则这辈子也就这样了。于是想了好几天，开始制定计划，很多计划都延续到了17年。所以说这一年其实没有什么可以写的，除了毕业和找到工作，其余时间都在无所事事，机械地生活。为了给自己年终憋出一点成果来，在最后两个月多读了几本书。同时在最近工作不忙的几天里，不停的写博客，直到昨天晚上还在校验最近写的几篇博客。与其说是对知识做总结，不如说是在为自己寻求一点心理安慰，也许这就是大家常说的“间歇性踌躇满志”。&lt;/p&gt;
&lt;p&gt;今年的总结大约也就这些东西，综上所述，找工作、毕业、上班。希望今年指定的计划能在明年完成，年终可以总结一些有价值的事，而不是拿一些小插曲来拼凑。就总结到这吧，我是在编不下去了，但愿我的“踌躇满志”可以延续到17年底。&lt;/p&gt;
&lt;p&gt;待续…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;其&lt;/strong&gt;实，真的没有什么好写的。七月份的毕业总结已经把上半年总结在内，下半年又过的不痛不痒。如果生&lt;br&gt;
    
    </summary>
    
      <category term="生活拾遗" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="年度总结" scheme="http://yoursite.com/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS 简单容错处理</title>
    <link href="http://yoursite.com/2016/09/08/Reduce-crash/"/>
    <id>http://yoursite.com/2016/09/08/Reduce-crash/</id>
    <published>2016-09-08T10:55:57.000Z</published>
    <updated>2018-05-13T12:27:07.479Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;对&lt;/strong&gt;一些代码进行容错处理，如果处理的好，会减少很多 crash。尤其对于像我这样的新手，稍不注意就会&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;写出几十个 bug。以下是针对刚入职这段时间所做项目的一个总结，同时提醒自己不要再犯同样的错误。&lt;/p&gt;
&lt;p&gt;美好的一天，从没有 bug 开始~&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h4&gt;&lt;p&gt;新手(像我这样)在使用一些常用的数据类型时，例如 &lt;code&gt;NSArray&lt;/code&gt; 、&lt;code&gt;NSDictionary&lt;/code&gt; 、&lt;code&gt;NSNumber&lt;/code&gt; 、&lt;code&gt;NSString&lt;/code&gt;等，经常会遇到一些崩溃问题。如果平时写程序首先进行容错判断，会减少很多崩溃问题。下面列举一些新手需要注意的情况。&lt;/p&gt;
&lt;h5 id=&quot;1-NSArray-amp-NSMutableArray&quot;&gt;&lt;a href=&quot;#1-NSArray-amp-NSMutableArray&quot; class=&quot;headerlink&quot; title=&quot;1.NSArray &amp;amp; NSMutableArray&quot;&gt;&lt;/a&gt;1.NSArray &amp;amp; NSMutableArray&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;+(instancetype)arrayWithObject:(ObjectType)anObject;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断对象是否为 nil，传入 nil 会引起崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(ObjectType)objectAtIndex:(NSUInteger)index;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断 index 是否小于数组个数，否则会因数组越界引起崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(NSArray&lt;objecttype&gt; *)arrayByAddingObject:(ObjectType)anObject;&lt;/objecttype&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断传入的对象是否为 nil，传入 nil 会引起崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(void)addObject:(ObjectType)anObject;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断传入的对象是否为 nil，传入 nil 会引起崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(void)insertObject:(ObjectType)anObject atIndex:(NSUInteger)index;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前对 anyObject 进行非空判断 &amp;amp;&amp;amp; 对 index 进行越界判断，否则可能引起崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(void)removeObjectAtIndex:(NSUInteger)index;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前对 index 进行越界判断，否则可能会因数组越界引起崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(void)replaceObjectAtIndex:(NSUInteger)index withObject:(ObjectType)anObject;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提亲对 index进行越界判断 &amp;amp;&amp;amp; 对 anyObject 进行非空判断，否则可能引起崩溃&lt;/p&gt;
&lt;h5 id=&quot;2-NSDictionary-amp-NSMutableDictionary&quot;&gt;&lt;a href=&quot;#2-NSDictionary-amp-NSMutableDictionary&quot; class=&quot;headerlink&quot; title=&quot;2.NSDictionary &amp;amp; NSMutableDictionary&quot;&gt;&lt;/a&gt;2.NSDictionary &amp;amp; NSMutableDictionary&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;+(instancetype)dictionaryWithObject:(ObjectType)object forKey:(KeyType &lt;nscopying&gt;)key;&lt;/nscopying&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断 object 和 key 是否为 nil，如有一个为 nil 则会崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(nullable id)objectForKey:(NSString *)anAttribute;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断传入参数是否为 nil，传入 nil 会引起崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(void)setObject:(ObjectType)anObject forKey:(KeyType &lt;nscopying&gt;)aKey;&lt;/nscopying&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断 anyObject 和 aKey 是否为 nil，有一个为空都会崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-(void)removeObjectForKey:(KeyType)aKey;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提前判断 akey 是否为 nil， 传入 nil 会引起崩溃&lt;/p&gt;
&lt;h5 id=&quot;3-NSNumber&quot;&gt;&lt;a href=&quot;#3-NSNumber&quot; class=&quot;headerlink&quot; title=&quot;3.NSNumber&quot;&gt;&lt;/a&gt;3.NSNumber&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSNumber&lt;/code&gt; 在进行类型转换时，需要先判断是否响应转换方法。在 &lt;code&gt;NSNumber&lt;/code&gt; 的实例,可以转化为的类型有：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;char、unsigned char、short、unsigned short、int、unsigned int、long、unsigned long、long long、unsigned long long、float、double、BOOL、NSInteger、NSUInteger&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;例如下面这种情况，如果不提前进行判断，会引起崩溃：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)transType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *testArray = @[@&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *testDict = @&amp;#123;&lt;span class=&quot;string&quot;&gt;@&quot;key&quot;&lt;/span&gt;:testArray&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *testNumber = (&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *) [testDict objectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;key&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iValue = [testNumber intValue];     &lt;span class=&quot;comment&quot;&gt;// 程序会在此处崩溃&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我们初始化 &lt;code&gt;NSNumber&lt;/code&gt; 对象时，可能会使用一些意想不到的对象进行初始化。例如上面 &lt;code&gt;testNumer&lt;/code&gt; 实际获得的是一个 &lt;code&gt;NSArray&lt;/code&gt; 类型的对象，并不能响应 &lt;code&gt;intValue&lt;/code&gt; 方法，因此正确的写法应为：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([testNumber respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(intValue)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iVaule = [testNumber intValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;4-NSString&quot;&gt;&lt;a href=&quot;#4-NSString&quot; class=&quot;headerlink&quot; title=&quot;4.NSString&quot;&gt;&lt;/a&gt;4.NSString&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSString&lt;/code&gt; 类使用时需要注意两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在使用一些字符串长度操作的方法，例如 &lt;code&gt;- (NSString *)stringByReplacingCharactersInRange:(NSRange)range withString:(NSString *)replacement&lt;/code&gt; 时，需要判断传入的 &lt;code&gt;range&lt;/code&gt; 是否越界。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在使用类似 &lt;code&gt;NSNumber&lt;/code&gt; 的模糊类型转换方法时，首先进行 &lt;code&gt;respondsToSelector:&lt;/code&gt; 判断。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以上实例方法的容错判断限于&lt;strong&gt;实例对象不为空&lt;/strong&gt;的情况下，如果实例对象都为空了，即使传入空值也不会崩溃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;数据类型番外篇&quot;&gt;&lt;a href=&quot;#数据类型番外篇&quot; class=&quot;headerlink&quot; title=&quot;数据类型番外篇&quot;&gt;&lt;/a&gt;数据类型番外篇&lt;/h4&gt;&lt;p&gt;在项目开发过程中，很多数据都是依赖服务端返回。如果服务端不靠谱，你不知道服务端会返回给你什么乱七八糟的东西。在加上自己粗心忘记进行了 nil 判断，很容易造成崩溃。如果每次都去判断，会很麻烦，我们需要一个统一的方法进行非空判断。&lt;/p&gt;
&lt;p&gt;你可能会想到 &lt;code&gt;Category&lt;/code&gt; ，我开始也是想到使用 &lt;code&gt;Category&lt;/code&gt; ，但是写到一半你会发现有很多问题。如果使用 &lt;code&gt;Category&lt;/code&gt; 方式去重写 &lt;code&gt;objectAtIndex：&lt;/code&gt; 方法，你可能无法处理通过下标[]访问数据的问题；另外 &lt;code&gt;NSArray&lt;/code&gt; 是一个 &lt;strong&gt;类簇&lt;/strong&gt; ，重写起来十分麻烦，工作量很大。&lt;/p&gt;
&lt;h5 id=&quot;类簇&quot;&gt;&lt;a href=&quot;#类簇&quot; class=&quot;headerlink&quot; title=&quot;类簇&quot;&gt;&lt;/a&gt;类簇&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;Class clusters are a design pattern that the Foundation framework makes extensive use of. Class clusters group a number of private concrete subclasses under a public abstract superclass. The grouping of classes in this way simplifies the publicly visible architecture of an object-oriented framework without reducing its functional richness. Class clusters are based on the Abstract Factory design pattern.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单说就是：类簇将一些私有的、具体的子类组合在一个公共的、抽象的超类下面，以这种方法来组织类可以简化一个面向对象框架的公开架构。这是一种基于 &lt;code&gt;工厂模式&lt;/code&gt; 的实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSArray&lt;/code&gt; 、&lt;code&gt;NSDictionary&lt;/code&gt; 、&lt;code&gt;NSNumber&lt;/code&gt; 、 &lt;code&gt;NSString&lt;/code&gt; 这些都是类簇。&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt; 通过 &lt;code&gt;NSNumber&lt;/code&gt; 对类簇进行了解释。&lt;/p&gt;
&lt;p&gt;针对 &lt;code&gt;NSArray&lt;/code&gt; ，进行了如下测试：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)classClustersTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; iArray1 = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; alloc];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; iArray2 = [iArray1 init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[[iArray1 class] description]); &lt;span class=&quot;comment&quot;&gt;// __NSPlaceholderArray&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[[iArray2 class] description]); &lt;span class=&quot;comment&quot;&gt;// __NSArray0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; mArray1 = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; alloc];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; mArray2 = [mArray1 init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[[mArray1 class] description]); &lt;span class=&quot;comment&quot;&gt;// __NSPlaceholderArray&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[[mArray2 class] description]); &lt;span class=&quot;comment&quot;&gt;// __NSArrayM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出，iArray1 与 mArray1 为同一个类，都为 &lt;code&gt;__NSPlaceholderArray&lt;/code&gt;。但是 iArray2 为 &lt;code&gt;___NSArray0&lt;/code&gt; (NSArray) ，mArray2 为 &lt;code&gt;__NSArrayM&lt;/code&gt; (NSMutableArray) 类。因此对于类簇，在使用 &lt;code&gt;alloc + init&lt;/code&gt; 方法进行初始化时，&lt;code&gt;alloc&lt;/code&gt; 方法先生成一个中间类，在 &lt;code&gt;init&lt;/code&gt; 方法时，生成对应的具体类型。具体在执行 &lt;code&gt;init&lt;/code&gt; 方法时是如何区分 &lt;code&gt;immutable&lt;/code&gt; 还是 &lt;code&gt;mutable&lt;/code&gt; 未搞清楚。&lt;/p&gt;
&lt;h5 id=&quot;使用-Method-swizzling-进行方法交换&quot;&gt;&lt;a href=&quot;#使用-Method-swizzling-进行方法交换&quot; class=&quot;headerlink&quot; title=&quot;使用 Method swizzling 进行方法交换&quot;&gt;&lt;/a&gt;使用 Method swizzling 进行方法交换&lt;/h5&gt;&lt;p&gt;上面说了，使用 &lt;code&gt;Category&lt;/code&gt; 会很麻烦，而且移植性较差。因此想到了使用 &lt;code&gt;Method swizzling&lt;/code&gt;。在使用 &lt;code&gt;Method swizzling&lt;/code&gt; 时，有一步是根据 &lt;code&gt;类名&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 获取响应的方法，即使用 &lt;code&gt;class_getInstanceMethod(Class cls, SEL name)&lt;/code&gt;。如果你像下面这样写，就会出现问题了：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method originalMethod = class_getClassMethod(&lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;NSArray&quot;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(objectAtIndex:));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method newMthod = class_getClassMethod(&lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;NSArray&quot;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(myMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        method_exchangeImplementations(originalMethod, newMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面提到，&lt;code&gt;NSArray&lt;/code&gt; 是类簇，是一个抽象类的集合。&lt;code&gt;objectAtIndex:&lt;/code&gt; 真正所属的类应该是 &lt;code&gt;__NSArrayI&lt;/code&gt;。因此，正确的写法应该这样：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;SafeArray.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSArray&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;SafeFunc&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NSArray&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;SafeFunc&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)safeObjectAtIndex:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)index &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index &amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; safetObjectAtIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj == [&lt;span class=&quot;built_in&quot;&gt;NSNull&lt;/span&gt; null]) &amp;#123;	&lt;span class=&quot;comment&quot;&gt;// 为什么使用 [NSNull null]？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SafeArray&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method originalMethod = class_getClassMethod(&lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;NSArray&quot;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(objectAtIndex:));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method newMthod = class_getClassMethod(&lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;NSArray&quot;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(safeObjectAtIndex:));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        method_exchangeImplementations(originalMethod, newMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;NSArray 或者 NSDictionary 中不会有 nil 对象，但是可能会有 ‘空值’，因此使用 &lt;code&gt;obj == [NSNUll null]&lt;/code&gt; ，如果使用 &lt;code&gt;obj == nil&lt;/code&gt; 进行判断，那么这句话等于浪费。有关 &lt;code&gt;nil / Nil / NULL / NSNull&lt;/code&gt;，请参考&lt;a href=&quot;http://nshipster.com/nil/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于 &lt;code&gt;NSNumber&lt;/code&gt; 、 &lt;code&gt;NSDictionary&lt;/code&gt; 这些有 immutable 和 mutable 类使用 &lt;code&gt;Method swizzling&lt;/code&gt; 时都需要注意以上问题，找到真正的 &lt;code&gt;具体类&lt;/code&gt; 进行操作。&lt;/p&gt;
&lt;h4 id=&quot;Delegate-使用&quot;&gt;&lt;a href=&quot;#Delegate-使用&quot; class=&quot;headerlink&quot; title=&quot;Delegate 使用&quot;&gt;&lt;/a&gt;Delegate 使用&lt;/h4&gt;&lt;p&gt;关于 &lt;code&gt;delegate&lt;/code&gt; 的使用，需要注意三个问题：&lt;/p&gt;
&lt;h5 id=&quot;1-delegate-属性都要为-weak，不解释&quot;&gt;&lt;a href=&quot;#1-delegate-属性都要为-weak，不解释&quot; class=&quot;headerlink&quot; title=&quot;1.delegate 属性都要为 weak，不解释&quot;&gt;&lt;/a&gt;1.delegate 属性都要为 weak，不解释&lt;/h5&gt;&lt;h5 id=&quot;2-‘委托方’调用代理方法时，需要通过-respondsToSelector-进行判断，否则代理对象没有实现这个方法，会导致崩溃&quot;&gt;&lt;a href=&quot;#2-‘委托方’调用代理方法时，需要通过-respondsToSelector-进行判断，否则代理对象没有实现这个方法，会导致崩溃&quot; class=&quot;headerlink&quot; title=&quot;2.‘委托方’调用代理方法时，需要通过 respondsToSelector: 进行判断，否则代理对象没有实现这个方法，会导致崩溃&quot;&gt;&lt;/a&gt;2.‘委托方’调用代理方法时，需要通过 &lt;code&gt;respondsToSelector:&lt;/code&gt; 进行判断，否则代理对象没有实现这个方法，会导致崩溃&lt;/h5&gt;&lt;h5 id=&quot;3-不要在单例中使用-delegate&quot;&gt;&lt;a href=&quot;#3-不要在单例中使用-delegate&quot; class=&quot;headerlink&quot; title=&quot;3.不要在单例中使用 delegate&quot;&gt;&lt;/a&gt;3.不要在单例中使用 delegate&lt;/h5&gt;&lt;p&gt;代理属性 &lt;code&gt;delegate&lt;/code&gt; 是一个弱引用指针，指向的是&lt;strong&gt;代理对象&lt;/strong&gt;的的内存地址。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ZBDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)doSomething;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassA&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;ZBDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassA&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)delegateTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate doSomething];	&lt;span class=&quot;comment&quot;&gt;// self.delegate 指向 ClassB 的内存地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassB&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;ZBDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)doSomething &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在单例中使用 &lt;code&gt;delegate&lt;/code&gt; ，因为单例对象使用都是一个对象，这样 &lt;code&gt;self.delegate&lt;/code&gt; 就会不断被从新赋值，只保留最后一个，这样最终只有一个对象响应代理方法，其他对象都不会响应。&lt;/p&gt;
&lt;h4 id=&quot;NSnotification-使用&quot;&gt;&lt;a href=&quot;#NSnotification-使用&quot; class=&quot;headerlink&quot; title=&quot;NSnotification 使用&quot;&gt;&lt;/a&gt;NSnotification 使用&lt;/h4&gt;&lt;p&gt;关于 &lt;code&gt;NSnotification&lt;/code&gt; 的使用，需要注意一下几个问题：&lt;/p&gt;
&lt;h5 id=&quot;1-注册问题&quot;&gt;&lt;a href=&quot;#1-注册问题&quot; class=&quot;headerlink&quot; title=&quot;1.注册问题&quot;&gt;&lt;/a&gt;1.注册问题&lt;/h5&gt;&lt;p&gt;如果一个对象注册了一个通知，然后又注册了一次，这两次不会合并，通知回调会被调用两次。因此在注册通知的时候，需要在 &lt;code&gt;init&lt;/code&gt; 或者 &lt;code&gt;viewDidload&lt;/code&gt; 这些一般整个生命周期只执行一次的方法里注册，不要在一些可重入的方法里面注册。&lt;strong&gt;避免重复注册问题。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-发送通知&quot;&gt;&lt;a href=&quot;#2-发送通知&quot; class=&quot;headerlink&quot; title=&quot;2.发送通知&quot;&gt;&lt;/a&gt;2.发送通知&lt;/h5&gt;&lt;p&gt;建议所有的通知都要在 &lt;strong&gt;主线程&lt;/strong&gt; 中发送，没有例外。如果在其他线程运行，需要发送通知时，回到主线程发送，否则注销通知时，因为发送通知和注销通知不在同一个线程，造成一些意想不到的结果(竞态条件)。&lt;/p&gt;
&lt;h5 id=&quot;3-注销通知&quot;&gt;&lt;a href=&quot;#3-注销通知&quot; class=&quot;headerlink&quot; title=&quot;3.注销通知&quot;&gt;&lt;/a&gt;3.注销通知&lt;/h5&gt;&lt;p&gt;如果在一个对象销毁时，不注销当前对象注册的通知，对象销毁后，再次向这个对象发送通知，会造成 crash。因此在类的 &lt;code&gt;dealloc&lt;/code&gt; 方法中需要注销对象。&lt;/p&gt;
&lt;p&gt;建议使用 &lt;code&gt;[[NSNotificationCenter defaultCenter] removeObserver:self];&lt;/code&gt; 这种整体注销的方式，避免遗漏。&lt;/p&gt;
&lt;h4 id=&quot;NSTimer-使用&quot;&gt;&lt;a href=&quot;#NSTimer-使用&quot; class=&quot;headerlink&quot; title=&quot;NSTimer 使用&quot;&gt;&lt;/a&gt;NSTimer 使用&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;NSTimer&lt;/code&gt; 时需要注意 ‘repeat timer’ 的释放问题。如果你想在 &lt;code&gt;- (void)dealloc&lt;/code&gt; 中执行 &lt;code&gt;[self.timer invalidate];&lt;/code&gt;，一般情况下都是释放不了的。原因如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TimerTest&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; *timer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TimerTest&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupTimer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer = [&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(doSomething)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)doSomething &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer invalidate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;dealloc&lt;/code&gt; 方法中，并不能将 timer 销毁，因为这个方法并不能执行。原因是：&lt;code&gt;Timer&lt;/code&gt; 加到 &lt;code&gt;Runloop&lt;/code&gt; 中，会被 &lt;code&gt;Runloop&lt;/code&gt; 强引用，然后 &lt;code&gt;Timer&lt;/code&gt; 对 &lt;code&gt;self&lt;/code&gt; 有一个强引用，导致 &lt;code&gt;self&lt;/code&gt; 不能够被释放，不能执行 &lt;code&gt;dealloc&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要想销毁 &lt;code&gt;repeat&lt;/code&gt; 类型的 &lt;code&gt;Timer&lt;/code&gt;，必须要执行 &lt;code&gt;invalidate&lt;/code&gt; 方法。&lt;/strong&gt;可以去手动 （action）方式去调用，也可以在执行 &lt;code&gt;delloc&lt;/code&gt; 之前去执行 &lt;code&gt;invalidate&lt;/code&gt; 方法。如果想要在 &lt;code&gt;dealloc&lt;/code&gt; 方法中去销毁，可以自己封装一个类，给 &lt;code&gt;Timer&lt;/code&gt; 传一个假的 &lt;code&gt;target&lt;/code&gt;，如下:&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MTBWeakTimerTarget&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) SEL selector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; *timer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MTBWeakTimerTarget&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) fire:(&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; *) timer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma clang diagnostic push&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma clang diagnostic ignored &lt;span class=&quot;meta-string&quot;&gt;&quot;-Warc-performSelector-leaks&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.target performSelector:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.selector withObject:timer.userInfo];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma clang diagnostic pop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer invalidate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MTBWeakTimer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; *)scheduledTimerWithInterval:(&lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt;)interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 target:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)aTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               selector:(SEL)aSelector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               userInfo:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)userInfo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                repeats:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)repeats &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MTBWeakTimerTarget *timerTarget = [MTBWeakTimerTarget new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timerTarget.target = aTarget;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timerTarget.selector = aSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timerTarget.timer = [&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:interval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                         target:timerTarget selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(fire:) userInfo:userInfo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                        repeats:repeats];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; timerTarget.timer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.timer = [MTBWeakTimer scheduledTimerWithInterval:&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(doSomething)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                              repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然这个解决方案不是我想的，具体请看&lt;a href=&quot;http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;作者原创&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;线程安全问题&quot;&gt;&lt;a href=&quot;#线程安全问题&quot; class=&quot;headerlink&quot; title=&quot;线程安全问题&quot;&gt;&lt;/a&gt;线程安全问题&lt;/h4&gt;&lt;p&gt;在多线程环境中，因为线程安全问题引发的 crash 有很多，尤其是对一些数据类型进行操作时。有人可能认为使用 &lt;code&gt;immutable&lt;/code&gt; 类型的就安全了，但是并不是你想象的那样。请看下面示例：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)threadSafe &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *dataArray = [&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// in thread one&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *otherArray = @[@&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;// array count = 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataArray = [otherArray &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// in thread two&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *anotherArray = @[@&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,@&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;// array count = 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataArray = [anotherArray &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// in main thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = dataArray[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];   &lt;span class=&quot;comment&quot;&gt;// ????&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码中可能会出现 crash。所以不要认为使用 &lt;code&gt;immutable&lt;/code&gt; 类型的就线程安全了。处理线程安全问题，没有公式化的方法，不可能对所有用到的数据类型进行加锁，那样太损耗性能，只有对于一些特殊的数据对象，在读写时进行加锁。是否有必要加锁，写程序的时候还需要自己注意。&lt;/p&gt;
&lt;h5 id=&quot;关于-‘锁’-的一些问题&quot;&gt;&lt;a href=&quot;#关于-‘锁’-的一些问题&quot; class=&quot;headerlink&quot; title=&quot;关于 ‘锁’ 的一些问题&quot;&gt;&lt;/a&gt;关于 ‘锁’ 的一些问题&lt;/h5&gt;&lt;p&gt;今天写这个的时候，正好看到了&lt;a href=&quot;http://m.weibo.cn/3321824014/4017336178496605?moduleID=feed&amp;amp;uicode=10000002&amp;amp;mid=4017421889132510&amp;amp;luicode=10000011&amp;amp;_status_id=4017336178496605&amp;amp;lfid=2304133290954642_-_WEIBO_SECOND_PROFILE_WEIBO&amp;amp;lcardid=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;南大&lt;/a&gt;今天发的《iOS知识小集》，讲述了一下关于锁的问题。文中这样描述：&lt;/p&gt;
&lt;p&gt;为了保证线程安全，可能会使用 &lt;code&gt;NSLock, @synchornized, pthread_mutex_t&lt;/code&gt; 等方法，但是加锁和解锁是非常昂贵的操作，对性能会有影响。可以用GCD提供的信号量来进行优化。如下是使用 &lt;code&gt;锁&lt;/code&gt; 和使用 &lt;code&gt;信号量&lt;/code&gt; 处理相同数据所需时间的对比：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; lockTime];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;=========================================&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; semaphoreTime];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; subtractTimes(uint64_t endTime, uint64_t startTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint64_t difference = endTime - startTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; conversion = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(conversion == &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mach_timebase_info_data_t info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kern_return_t err = mach_timebase_info(&amp;amp;info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            conversion = &lt;span class=&quot;number&quot;&gt;1e-9&lt;/span&gt; * (&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;) info.numer / (&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;) info.denom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; conversion * (&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)difference;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)lockTime &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; *items = [&lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; set];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; *lock = [&lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint64_t start = mach_absolute_time();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_apply(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, queue, ^(size_t inddex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [lock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [items addObject:&lt;span class=&quot;string&quot;&gt;@&quot;hi&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [lock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint64_t stop = mach_absolute_time();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;use lock time :%f&quot;&lt;/span&gt;, subtractTimes(stop, start));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用信号量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)semaphoreTime &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; *items = [&lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; set];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_semaphore_t itemLock = dispatch_semaphore_create(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint64_t start = mach_absolute_time();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_apply(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, queue, ^(size_t inddex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dispatch_semaphore_wait(itemLock, DISPATCH_TIME_FOREVER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [items addObject:&lt;span class=&quot;string&quot;&gt;@&quot;hi&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dispatch_semaphore_signal(itemLock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint64_t stop = mach_absolute_time();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;use semaphore time :%f&quot;&lt;/span&gt;, subtractTimes(stop, start));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;程序运行结果如下图 (真机上测试运行) ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Reduce-crash/锁与信号量对比输出.png&quot; alt=&quot;锁与信号量对比输出&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上面的 Log 中可以看出，使用 &lt;code&gt;锁&lt;/code&gt; 和使用 &lt;code&gt;信号量&lt;/code&gt; 处理相同的数据，时间不是一个量级的。因此，在做优化的时候，建议使用 &lt;code&gt;信号量&lt;/code&gt; 来代替锁。&lt;/p&gt;
&lt;h4 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;p&gt;以上是我作为一个 iOS 开发新手，在近期遇到的一些 crash 问题。对此做一个总结，以提醒自己今后不会再犯相同的错误。可能总结的有遗漏，或者有一些问题。如果有什么问题，还请大家指正。&lt;/p&gt;
&lt;h5 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/12/18/class-cluster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1.从NSArray看类簇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cocoachina.com/ios/20150925/13459.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2.打造Objective-C安全的Collection类型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://inessential.com/2015/05/21/how_not_to_crash_3_nsnotification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3.How Not to Crash #3: NSNotification&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4.iOS 中的 NSTimer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://m.weibo.cn/3321824014/4017336178496605?moduleID=feed&amp;amp;uicode=10000002&amp;amp;mid=4017421889132510&amp;amp;luicode=10000011&amp;amp;_status_id=4017336178496605&amp;amp;lfid=2304133290954642_-_WEIBO_SECOND_PROFILE_WEIBO&amp;amp;lcardid=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5.南峰子-iOS知识小集&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;对&lt;/strong&gt;一些代码进行容错处理，如果处理的好，会减少很多 crash。尤其对于像我这样的新手，稍不注意就会&lt;br&gt;
    
    </summary>
    
      <category term="新手必读" scheme="http://yoursite.com/categories/%E6%96%B0%E6%89%8B%E5%BF%85%E8%AF%BB/"/>
    
    
      <category term="crash" scheme="http://yoursite.com/tags/crash/"/>
    
      <category term="容错" scheme="http://yoursite.com/tags/%E5%AE%B9%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>我毕业了</title>
    <link href="http://yoursite.com/2016/07/10/Graduation/"/>
    <id>http://yoursite.com/2016/07/10/Graduation/</id>
    <published>2016-07-10T14:50:52.000Z</published>
    <updated>2018-05-13T12:24:11.023Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;现在&lt;/strong&gt;写毕业感言，或许有点晚了吧。6月29号毕业典礼结束后，也就宣布我们正式毕业了，不只是大学毕&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;业，而是我的学生生涯毕业。按照我矫情的性格，对于这种具有重大纪念意义的时刻，必然会写一篇文章来抒发一下感慨。但是由于毕业时候各种事情，没来的及，一直拖到上班一周之后，赶在这个周末补上。&lt;/p&gt;
&lt;p&gt;在这篇随笔里，不会有什么华丽的辞藻，甚至语言逻辑可能都会不通顺。因为我不想再去拽文，再去狠狠地装一波。我只想通过流水账的形式表达我的一些感受，这也是我最真实的感受。我不是写给谁看，而是纪念我自己内心的感受，写给我自己，不喜勿喷，毕竟我还没有到达“嬉笑怒骂结成文章”的境界，虽然我也姓周。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Graduation/admission.jpg&quot; alt=&quot;录取通知书&quot;&gt;&lt;img src=&quot;/uploads/Graduation/admission2.jpg&quot; alt=&quot;录取通知书2&quot;&gt;&lt;/p&gt;
&lt;p&gt;2012年9月1日，我来到了燕山大学信息科学与工程学院软件工程2班。然后当天晚上我就去了网吧，写了一篇日志作为纪念，不信你们可以去我QQ空间去看。因为高中语文成绩略优，所以当时的我自认文笔非凡，再加上我闷骚的性格，遇事便拽文纪念一番。&lt;/p&gt;
&lt;p&gt;刚步入大学，对什么都很好奇，再加上我一贯喜欢装逼的性格，一冲动便竞选了班长。这个冲动也给我带来了惩罚——我决定毕业三年之后不当领导（太TM累心了）。没进入大学之前，我说希望的生活是这样的：没事去图书馆看看书，写点东西，然后做点自己喜欢的事，典型一个文艺青年范。结果你们可想而知。&lt;/p&gt;
&lt;p&gt;这几年里，我几乎每天都在折腾，争名夺利，勾心斗角（其实没那么黑暗）。当时不懂事，只想装个逼，就竞选了班长。之后感觉自己装大了，不得不改变人生规划。然后我做出了如下规划：大一将班级带入正轨，顺便搞搞人际关系；大二开始拿各种证书和荣誉；大三开始深入学习技术；大四找一份好工作，顺利毕业。然后我就顺着这个计划，忙碌了四年。&lt;/p&gt;
&lt;p&gt;虽然我没有把班级带的太好，但我确实尽力了，能力有限，而且真的很累。之后为了那证书和奖学金，各种找导师做项目，混加分。毕竟我智力有限，是学不过我们班那群人的。个人认为，我的能力不在于智力或者知识储备等方面，而在于综合各种渠道去完成某件事。例如我学习学不过你们，我可以利用我的优势搞到加分，最终成绩还是比你们高。问了争夺名利，得罪了很多人，现在想想当时的自己多么心机。&lt;/p&gt;
&lt;p&gt;每段没有固定的主题内容，为了阅读方便，我瞎分的。&lt;/p&gt;
&lt;p&gt;到了大二下学期，我拿到了各种荣誉和证书，技术也有所提高。当时的我内心膨胀到极点，十分自负。自认技术全院无人能比，各方面综合起来也是全院优秀，睥睨天下。当然现在我也认为整个学院技术我也是最牛逼（吼哈哈哈哈哈）。从哪个时候我也给自己立下目标：毕业的时候我的工资要全院最高，入职公司要全院最好，这也是我给自己挖的最大的一个坑。&lt;/p&gt;
&lt;p&gt;我十分庆幸我在大学期间认识了很多老师（真实感受），有的思想启蒙，有的技术指导，有的给我开后门。不夸张的说，在信息学院没有几个人认识（熟悉）的老师数量比我还要多。当时我所的最狂妄的一句话就是：（考试）“我要是抄起来谁敢管”。虽然考试每次我都做第二排，但是我还是肆无忌惮的抄。虽然我四年没少作弊，但是有几点需要说明：第一，拿国家励志那一年的成绩靠的是真本事，没抄；第二，专业技术课不抄，例如C++、数据结构等；第三，大四为了找工作，很多课考试都是跟老师打招呼过的，这才使我顺利毕业（一节课都没去过，想过还不跟老师打招呼你试试？）。&lt;/p&gt;
&lt;p&gt;这几年我过的真的很累，有多累？我给你描述一下。按照优先级可以这样分：比较轻松的一年——大三，这一年只是做项目，偶尔失眠；心累的一年——大一，刚当上班长，很多事要处理，时常着急上火；比较拼的一年——大二，这一年为了那奖学金和科技比赛证书，既要学习跟上，又要做项目，还得管理班级，要知道仅凭努力（非智力）从专业二十名开外混到专业前三也是有点吃力的，这一年经常失眠；最累的一年——大四，我本以为这会是我最轻松的一年，签了工作就完事了，结果这是我身心最累的一年。&lt;/p&gt;
&lt;p&gt;关于大四这一年，我单独写一段。&lt;/p&gt;
&lt;p&gt;拿了各种奖学金、各种计算机大赛证书、班长、党员、三好学生、技术牛，集各种荣誉于一身的我，本以为好的工作信手拈来，结果我差点没在大四跳楼了，按照惯例我们每年都会有一个跳楼的。从七月份开始，我就带着我的自负心去找工作。第一个是阿里，我周围只有我通过了笔试和电面，通知去北京面试。当时我的内心是无比自豪的。结果挂了，我可以负责任的说，不是阿里缩招的原因，就是我自己实力不行。开始我还觉得，反正是第一家，后面还有很多，不着急。陆陆续续的，百度，挂了；新浪，挂了；爱奇艺，挂了；折八百，挂了；搜狐，挂了；搜狗，挂了；滴滴，挂了。。。。。当时我的内心几乎是崩溃的。之后再清华大学实习了三个月，但是是带着压抑的心情去实习的。还有在这个过程中，有个人在一直支持着我，鼓励着我，要不然我真的会崩溃。我从15年7月份开始找工作，到了16年6月份拿到4份offer（小公司）结束，我将战线拉了一年，我真的一点都不比考研的轻松。这是我继高考复习以来，又一次经历如此的压抑，同时也又老了十岁。&lt;/p&gt;
&lt;p&gt;在大学的最后一段时间里，按照设定我应该是和朋友们吃吃饭，出去旅旅行，然后好好玩玩。然而呢，最后整整两个月，我在学驾照、做毕设、写论文、处理班级事务，一直到现在才有闲心写点东西。这毕业季过得，真憋屈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Graduation/dgree.jpg&quot; alt=&quot;学位授予&quot;&gt;&lt;/p&gt;
&lt;p&gt;高中毕业的时候，我把所有的东西都带走了，连张试卷都没留给学校。大学毕业的时候，我终于发现，有些东西是带不走的，有些东西是留不住的。&lt;/p&gt;
&lt;p&gt;其实还有很多东西要写，其实我可以好好组织一下语言去写，但是我不写了。第一，刚刚入职，还有很多工作上事务要处理；第二，过深的回忆容易感伤。所以就这样吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Graduation/class.JPG&quot; alt=&quot;班级合影&quot;&gt;&lt;/p&gt;
&lt;p&gt;这四年，我带了一个让我骄傲自豪的班级；我遇到了一群给我欢乐的朋友；我认识了一批照顾我四年的领导；我拜谒了众多受我学识的灵魂导师。这四年，我很累，但是如果再给我一次机会，我还会选择燕山大学，信息科学与工程学院，软件工程2班，和你们，一起，再度过，四年。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;—by 周博  2016年7月10日 in 北京&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现在&lt;/strong&gt;写毕业感言，或许有点晚了吧。6月29号毕业典礼结束后，也就宣布我们正式毕业了，不只是大学毕&lt;br&gt;
    
    </summary>
    
      <category term="生活拾遗" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="毕业" scheme="http://yoursite.com/tags/%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>iOS 内存管理之四：内存优化</title>
    <link href="http://yoursite.com/2016/04/04/Memory-Manage-4-Memory-Optimization/"/>
    <id>http://yoursite.com/2016/04/04/Memory-Manage-4-Memory-Optimization/</id>
    <published>2016-04-04T08:05:46.000Z</published>
    <updated>2018-05-13T12:26:58.674Z</updated>
    
    <content type="html">&lt;p&gt;所谓的内存优化，在设计程序的过程中，我们要在保证程序运行效率的前提下，尽量压缩程序运行时所占用的内&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;存。无论硬件设备的内存有多大，程序运行时占用内存越少越好。下面我将介绍在开发项目过程中，一些优化内存的方法。&lt;/p&gt;
&lt;h4 id=&quot;1-关于UITableView&quot;&gt;&lt;a href=&quot;#1-关于UITableView&quot; class=&quot;headerlink&quot; title=&quot;1.关于UITableView&quot;&gt;&lt;/a&gt;1.关于UITableView&lt;/h4&gt;&lt;p&gt;在项目开发中，&lt;code&gt;UITableView&lt;/code&gt; 是用的比较多的一个视图控件。如果能够对 &lt;code&gt;UITableView&lt;/code&gt; 的使用做好优化，程序的性能将提高很多。&lt;/p&gt;
&lt;h5 id=&quot;（1）善于使用UITableViewCell的重用机制&quot;&gt;&lt;a href=&quot;#（1）善于使用UITableViewCell的重用机制&quot; class=&quot;headerlink&quot; title=&quot;（1）善于使用UITableViewCell的重用机制&quot;&gt;&lt;/a&gt;（1）善于使用UITableViewCell的重用机制&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;重用机制&lt;/strong&gt;：这种机制下系统默认有一个可变数组 &lt;code&gt;NSMutableArray*  visiableCells&lt;/code&gt;,用来保存当前显示的cell。一个可变字典 &lt;code&gt;NSMutableDictnery* reusableTableCells&lt;/code&gt; ,用来保存可重复利用的cell。&lt;code&gt;UITableView&lt;/code&gt; 只会创建一屏幕的cell，放在 &lt;code&gt;visiableCells&lt;/code&gt;中。每当cell滑出屏幕，就会放到 &lt;code&gt;reusableTableCells&lt;/code&gt; 中，当要显示某一个位置的cell时，先去 &lt;code&gt;reusableTableCells&lt;/code&gt; 中取，如果有，直接取来用；如果没有，就会创建。这样极大减少了内存的开销。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在iOS 6之后，在UITableView和UICollectionView中除了可以复用cell,还可以复用各个Section的Header和Footer。可见Apple一直在不断优化。在项目开发中，我们需要给 &lt;code&gt;UITableViewCells&lt;/code&gt;、 &lt;code&gt;UICollectionViewCells&lt;/code&gt;、&lt;code&gt;UITableViewHeaderFooterViews&lt;/code&gt;设置正确的 &lt;code&gt;reuseIdentifier&lt;/code&gt;。当有多类cell需要复用是，我们可以根据 &lt;code&gt;reuseIdentifier&lt;/code&gt; 区分。我们可以在Xcode中设置，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Memory-Manage-4-Memory-Optimization/reuseIdentifier.png&quot; alt=&quot;setReuseImg&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是一个简单的cell复用的示例:&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView cellForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *cellIdentifier = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cellIdentifier = &lt;span class=&quot;string&quot;&gt;@&quot;你的xib文件视图中标注的reuseIdentifier&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];    &lt;span class=&quot;comment&quot;&gt;//根据identifier复用cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//如果没有对应的cell，创建cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!cell)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cell = [[&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; alloc] initWithStyle:&lt;span class=&quot;built_in&quot;&gt;UITableViewCellStyleDefault&lt;/span&gt; reuseIdentifier:cellIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;复用cell是一个很好的机制，但是使用不当也会出现问题，也就是所谓的&lt;strong&gt;复用重叠&lt;/strong&gt;问题。看下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView cellForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *cellIdentifier = &lt;span class=&quot;string&quot;&gt;@&quot;myCell1&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cell == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cell = [[&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; alloc] initWithStyle:&lt;span class=&quot;built_in&quot;&gt;UITableViewCellStyleDefault&lt;/span&gt; reuseIdentifier:cellIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((indexPath.row%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cell.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; blueColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell.textLabel.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%ld&quot;&lt;/span&gt;,(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Configure the cell...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我本打算将偶数行的设置为蓝色，基数行为默认颜色，并将cell的内容设置为行数，加以区分。结果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Memory-Manage-4-Memory-Optimization/cell.png&quot; alt=&quot;cell1Img&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出，开始初始化的13~14个cell正常，但是当滑动tableview时，就出现了问题，有的基数行cell也变为了蓝色。这是因为，下面的cell基本都是复用的，当没有显示指定cell的属性时，它就会使用已经创建过的cell的属性，导致有的蓝色有的白色。解决办法就是像下面这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView cellForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *cellIdentifier = &lt;span class=&quot;string&quot;&gt;@&quot;myCell1&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cell == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cell = [[&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; alloc] initWithStyle:&lt;span class=&quot;built_in&quot;&gt;UITableViewCellStyleDefault&lt;/span&gt; reuseIdentifier:cellIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((indexPath.row%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cell.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; blueColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell.textLabel.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%ld&quot;&lt;/span&gt;,(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Configure the cell...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;切记：当对多种cell赋予属性时，一定不能写在 &lt;code&gt;if (!cell){}&lt;/code&gt; 里面，避免复用出现问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;（2）优化UITableViewCell高度计算&quot;&gt;&lt;a href=&quot;#（2）优化UITableViewCell高度计算&quot; class=&quot;headerlink&quot; title=&quot;（2）优化UITableViewCell高度计算&quot;&gt;&lt;/a&gt;（2）优化UITableViewCell高度计算&lt;/h5&gt;&lt;p&gt;UITableView有两个很重要的回调方法：&lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt;和&lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;。很多人认为，在初始化tableview时，会先调用前者进行创建，然后再调用后者进行布局和属性设置。然而并非如此。真实的情况是这样的：UITableView是继承自UIScrollView的，需要先确定它的contentSize及每个Cell的位置，然后才会把重用的Cell放置到对应的位置。所以事实上，UITableView的回调顺序是先多次调用 &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; 以确定contentSize及Cell的位置，然后才会调用 &lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt;，从而来显示在当前屏幕的Cell。&lt;/p&gt;
&lt;p&gt;举个例子：如果现在要显示20个Cell，当前屏幕显示5个。那么刷新（reload）UITableView时，UITableView会先调用20次 &lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt; 方法，然后调用5次&lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt;方法；滚动屏幕时，每当Cell滚入屏幕，都会调用一次&lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;、&lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;所以，对于UITableViewCell的高度计算的优化，就是对这两个函数的处理。至于如何优化&lt;a href=&quot;http://weibo.com/u/1364395395?from=myfollow_all&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@我就叫Sunny怎么了&lt;/a&gt;写了一篇很好的&lt;a href=&quot;http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;去介绍。我就不多说了。&lt;/p&gt;
&lt;h5 id=&quot;（3）-懒加载（延迟加载）&quot;&gt;&lt;a href=&quot;#（3）-懒加载（延迟加载）&quot; class=&quot;headerlink&quot; title=&quot;（3） 懒加载（延迟加载）&quot;&gt;&lt;/a&gt;（3） 懒加载（延迟加载）&lt;/h5&gt;&lt;p&gt;懒加载并不是减少了程序内存消耗，而是将加载对象的时间推迟，在使用到对象的时候在对其进行初始化。例如一个UITableView一共有20行，但是屏幕只显示5行数组。那么在初始化tableview的时候，可以只先加载5行数据，另外15行等到显示的时候再去加载。这样可以减少初始化tableview时所需要的内存。（这样说有点牵强，因为实时加载会影响tableview的流畅度，但是大体就是这个意思 &amp;gt;&amp;lt;）&lt;/p&gt;
&lt;h4 id=&quot;2-关于图片的处理&quot;&gt;&lt;a href=&quot;#2-关于图片的处理&quot; class=&quot;headerlink&quot; title=&quot;2.关于图片的处理&quot;&gt;&lt;/a&gt;2.关于图片的处理&lt;/h4&gt;&lt;p&gt;图片在内存中会占很大开销，如果适当的处理图片，会减少很多内存的消耗。&lt;/p&gt;
&lt;h5 id=&quot;（1）缓存图片&quot;&gt;&lt;a href=&quot;#（1）缓存图片&quot; class=&quot;headerlink&quot; title=&quot;（1）缓存图片&quot;&gt;&lt;/a&gt;（1）缓存图片&lt;/h5&gt;&lt;p&gt;常见的从bundle中加载图片的方式有两种，一个是用&lt;code&gt;imageNamed&lt;/code&gt;，二是用&lt;code&gt;imageWithContentsOfFile&lt;/code&gt;，第一种比较常见一点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;imageNamed&lt;/code&gt;的优点是当加载时会缓存图片。&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;imageNamed&lt;/code&gt;&lt;/a&gt;的文档中这么说:&lt;br&gt;这个方法用一个指定的名字在系统缓存中查找并返回一个图片对象如果它存在的话。如果缓存中没有找到相应的图片，这个方法从指定的文档中加载然后缓存并返回这个对象。&lt;/p&gt;
&lt;p&gt;也就是说，&lt;code&gt;imageNamed&lt;/code&gt;方法加载的图片，会对图片进行缓存。而 &lt;code&gt;imageWithContentsOfFile&lt;/code&gt; 方法不会。&lt;/p&gt;
&lt;p&gt;所以，如果要加载的图片比较小，而且会反复使用，这种情况选择用 &lt;code&gt;imageNamed&lt;/code&gt;;如果要加载一个大图片，而且是一次性使用，那就使用 &lt;code&gt;imageWithContentsOfFile&lt;/code&gt;，没必要浪费内存去缓存它。&lt;/p&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 对图片进行缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *img = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageNamed:&lt;span class=&quot;string&quot;&gt;@&quot;imgName&quot;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不对图片缓存，用完即释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *img = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWithContentsOfFile:&lt;span class=&quot;string&quot;&gt;@&quot;imgName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;（2）调整图片大小&quot;&gt;&lt;a href=&quot;#（2）调整图片大小&quot; class=&quot;headerlink&quot; title=&quot;（2）调整图片大小&quot;&gt;&lt;/a&gt;（2）调整图片大小&lt;/h5&gt;&lt;p&gt;我们经常从网络获取图片或者从本地bundle获取图片，然后加载到 &lt;code&gt;UIImageView&lt;/code&gt; 中。在加载图片时，应尽量保证图片大小和 &lt;code&gt;UIImageView&lt;/code&gt; 大小相同。因为在运行中缩放图片很耗费资源，如果 &lt;code&gt;UIImageView&lt;/code&gt; 嵌套在 &lt;code&gt;UIScrollView&lt;/code&gt; 或者 &lt;code&gt;UITableView&lt;/code&gt;中，会更耗费资源。&lt;/p&gt;
&lt;p&gt;对于从本地bundle中加载的图片，我们可以事先件图片处理好。对于从网络下载的图片，在下载完成后，我们需要对图片进行缩放，然后再加载。&lt;/p&gt;
&lt;h5 id=&quot;（3）代码渲染-or-直接获取&quot;&gt;&lt;a href=&quot;#（3）代码渲染-or-直接获取&quot; class=&quot;headerlink&quot; title=&quot;（3）代码渲染 or 直接获取&quot;&gt;&lt;/a&gt;（3）代码渲染 or 直接获取&lt;/h5&gt;&lt;p&gt;前面已经说过，用代码去渲染一张图片会使图片占用内存翻倍。但是用代码去绘制图片，能够很好的去控制图片，并且能够做出很多漂亮的效果，前提是牺牲一部分内存；那如果所有图片都从bundle中加载呢？那会使bundle的体积增大，同时不能够用代码去灵活处理图片的效果。&lt;br&gt;所以，在开发过程中，是代码渲染图片，还是从bundle获取图片，需要做一个权衡。&lt;/p&gt;
&lt;h4 id=&quot;3-数据处理&quot;&gt;&lt;a href=&quot;#3-数据处理&quot; class=&quot;headerlink&quot; title=&quot;3.数据处理&quot;&gt;&lt;/a&gt;3.数据处理&lt;/h4&gt;&lt;p&gt;在项目开发中，我们会使用到各种格式的数据，例如 &lt;code&gt;JSON&lt;/code&gt;、&lt;code&gt;XML&lt;/code&gt; 等。还有各种各样的数据结构，例如数组、链表、字典、集合等。使用正确的数据格式和使用正确的数据结构，会减少我们的资源消耗。&lt;/p&gt;
&lt;h5 id=&quot;（1）选择正确的数据格式&quot;&gt;&lt;a href=&quot;#（1）选择正确的数据格式&quot; class=&quot;headerlink&quot; title=&quot;（1）选择正确的数据格式&quot;&gt;&lt;/a&gt;（1）选择正确的数据格式&lt;/h5&gt;&lt;p&gt;App与网络进行交互时，常常采用 &lt;code&gt;JSON&lt;/code&gt; 或者 &lt;code&gt;XML&lt;/code&gt; 类型的数据格式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; 是一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。解析 &lt;code&gt;JSON&lt;/code&gt; 会比 &lt;code&gt;XML&lt;/code&gt; 更快，但是 &lt;code&gt;JSON&lt;/code&gt; 传输的数据比较小。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XML&lt;/code&gt; 是一种重量级的数据交换格式，适用于很大的数据传输。当数据量较大时，使用 &lt;code&gt;XML&lt;/code&gt; 数据格式，会极大减少内存消耗，增加性能。&lt;/p&gt;
&lt;p&gt;另外，尽量避免数据多次转化。例如tableview中需要以数组的形势去赋值。那么服务器尽量返回数组类型。如果返回 &lt;code&gt;JSON&lt;/code&gt; 类型，在去转换为 &lt;code&gt;NSArray&lt;/code&gt; 类型，也会增加开销。&lt;/p&gt;
&lt;h5 id=&quot;（2）选择正确的数据结构&quot;&gt;&lt;a href=&quot;#（2）选择正确的数据结构&quot; class=&quot;headerlink&quot; title=&quot;（2）选择正确的数据结构&quot;&gt;&lt;/a&gt;（2）选择正确的数据结构&lt;/h5&gt;&lt;p&gt;不同的数据结构，处理数据的速度是不同的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数组&lt;/strong&gt; NSArray NSMutableArray:有序的一组值。使用索引来查询很快，使用值查找很慢， 插入/删除很慢。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字典&lt;/strong&gt;  NSDictionary NSMutableDictionary:存储键值对。用键来查找比较快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合&lt;/strong&gt; NSSet NSMutableSet:无序的一组值。用值来查找很快，插入/删除很快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-View的处理&quot;&gt;&lt;a href=&quot;#4-View的处理&quot; class=&quot;headerlink&quot; title=&quot;4.View的处理&quot;&gt;&lt;/a&gt;4.View的处理&lt;/h4&gt;&lt;h5 id=&quot;（1）避免使用过于复杂的xib&quot;&gt;&lt;a href=&quot;#（1）避免使用过于复杂的xib&quot; class=&quot;headerlink&quot; title=&quot;（1）避免使用过于复杂的xib&quot;&gt;&lt;/a&gt;（1）避免使用过于复杂的xib&lt;/h5&gt;&lt;p&gt;在目前很多项目开发中，还经常用到 &lt;code&gt;xib&lt;/code&gt;。当加载一个 &lt;code&gt;xib&lt;/code&gt; 时，所有的内容都会放到内存里，包括任何图片。如果 &lt;code&gt;xib&lt;/code&gt; 文件过于庞大，会占用很多内存。&lt;code&gt;xib&lt;/code&gt; 与 &lt;code&gt;storyboard&lt;/code&gt; 不同，&lt;code&gt;xib&lt;/code&gt;即使暂时用不到，view也会存在于内存里；&lt;code&gt;storyboard&lt;/code&gt; 仅在需要时实例化一个&lt;code&gt;view controller&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而且设置view属性时，尽可能的&lt;strong&gt;把 &lt;code&gt;opaque&lt;/code&gt; 属性设置为YES(不透明)&lt;/strong&gt;。这样会提高渲染系统优化一些渲染过程和提高性能。&lt;/p&gt;
&lt;h5 id=&quot;（2）正确设置View的背景&quot;&gt;&lt;a href=&quot;#（2）正确设置View的背景&quot; class=&quot;headerlink&quot; title=&quot;（2）正确设置View的背景&quot;&gt;&lt;/a&gt;（2）正确设置View的背景&lt;/h5&gt;&lt;p&gt;设置UIView的背景图片主要有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;UIColor&lt;/code&gt;的 &lt;code&gt;colorWithPatternImage&lt;/code&gt; 来设置背景色；&lt;/li&gt;
&lt;li&gt;给 &lt;code&gt;UIView&lt;/code&gt; 添加 &lt;code&gt;UIImageView&lt;/code&gt; 子视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种方式，适合使用小图平铺创建背景，能更快渲染也不会会费很多内存。例如使用一个10x10的像素大小重复背景。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithPatternImage:[&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageNamed:&lt;span class=&quot;string&quot;&gt;@&quot;backgroundImg&quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种方式，适合于使用大图，即整张图片来设置背景。如果使用 &lt;code&gt;colorWithPatternImage&lt;/code&gt; 会消耗太多内存从而收到内存警告导致应用程序突然崩溃。而使用 &lt;code&gt;UIImageView&lt;/code&gt; 会节约不少内存。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *backgroundView = [[&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; alloc] initWithImage:[&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageNamed:&lt;span class=&quot;string&quot;&gt;@&quot;backgroundImg&quot;&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:backgroundView];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;（3）设定Shadow-Path&quot;&gt;&lt;a href=&quot;#（3）设定Shadow-Path&quot; class=&quot;headerlink&quot; title=&quot;（3）设定Shadow Path&quot;&gt;&lt;/a&gt;（3）设定Shadow Path&lt;/h5&gt;&lt;p&gt;如果用下面代码给 &lt;code&gt;view.layer&lt;/code&gt; 添加一个shadow:&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view = [[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Setup the shadow ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.layer.shadowOffset = &lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.layer.shadowRadius = &lt;span class=&quot;number&quot;&gt;5.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.layer.shadowOpacity = &lt;span class=&quot;number&quot;&gt;0.6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会使&lt;code&gt;Core Animation&lt;/code&gt; 不得不在后台得出图形并加好阴影之后再去渲染，这会开销很大。&lt;/p&gt;
&lt;p&gt;如果使用shadowPath则会避免这种问题：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;view.layer.shadowPath = [[&lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt; bezierPathWithRect:view.bounds] &lt;span class=&quot;built_in&quot;&gt;CGPath&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;5-合理使用Autorelease-Pool&quot;&gt;&lt;a href=&quot;#5-合理使用Autorelease-Pool&quot; class=&quot;headerlink&quot; title=&quot;5.合理使用Autorelease Pool&quot;&gt;&lt;/a&gt;5.合理使用Autorelease Pool&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NSAutoreleasePool&lt;/code&gt;负责释放block中的autoreleased objects。一般情况下它会自动被UIKit调用。但是有些状况下也需要手动去创建它。&lt;/p&gt;
&lt;p&gt;假如创建很多临时对象，你会发现内存一直在减少直到这些对象被release的时候。这是因为只有当UIKit用光了autorelease pool的时候memory才会被释放。&lt;/p&gt;
&lt;p&gt;但是如果自己定义 &lt;code&gt;@autoreleasepool&lt;/code&gt; ，在里面创建临时对象，可以避免这个问题：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *urls = &amp;lt;&lt;span class=&quot;meta&quot;&gt;# An array of file URLs #&amp;gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; urls) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *fileContents = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithContentsOfURL:url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Process the string, creating and autoreleasing more objects. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;6-正确处理缓存&quot;&gt;&lt;a href=&quot;#6-正确处理缓存&quot; class=&quot;headerlink&quot; title=&quot;6.正确处理缓存&quot;&gt;&lt;/a&gt;6.正确处理缓存&lt;/h4&gt;&lt;p&gt;缓存可以分为&lt;strong&gt;内存缓存&lt;/strong&gt;和&lt;strong&gt;磁盘缓存&lt;/strong&gt;。在项目开发过程中，我们经常会对一些图片、声音、数据进行缓存。合理利用缓存机制，会大大提高程序的性能，提高APP的流畅性。例如被广为使用的 &lt;a href=&quot;https://github.com/rs/SDWebImage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SDWebImage&lt;/a&gt;,它使用的缓存机制是这样的：&lt;/p&gt;
&lt;p&gt;（1）先根据查看内存缓存，如果有直接获取。&lt;/p&gt;
&lt;p&gt;（2）如果内存没有，从磁盘缓存获取。&lt;/p&gt;
&lt;p&gt;（3）如果磁盘缓存也没有，直接通过URL从网络下载。&lt;/p&gt;
&lt;p&gt;当然这只是一个简单的描述，更加详细请看&lt;a href=&quot;http://weibo.com/touristdiary?is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@南峰子_老驴&lt;/a&gt;的一篇&lt;a href=&quot;http://southpeak.github.io/blog/2015/02/07/sourcecode-sdwebimage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SDWebImage实现分析&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;合理处理缓存，能够提高程序的性能，不用每次都从网络获取数据。但是也不能什么都存入缓存，这会消耗很多内存和磁盘空间。所以应合理使用缓存机制。&lt;/p&gt;
&lt;h4 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h4&gt;&lt;p&gt;以上，是我对于内存优化的一些理解。在写这篇文章过程中，参考了很多大牛的文章。对于一名在校应届本科生来说，我对于oc的理解还很浅薄，如果有错误或者有需要添加的地方，希望大家能够指出。我会加以改正并学习。&lt;/p&gt;
&lt;h4 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raywenderlich.com/31166/25-ios-app-performance-tips-tricks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;25 iOS App Performance Tips &amp;amp; Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://longxdragon.github.io/2015/05/26/UITableView%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UITableView优化技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的内存优化，在设计程序的过程中，我们要在保证程序运行效率的前提下，尽量压缩程序运行时所占用的内&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="内存" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存管理之三：ARC(Automatic Reference Counting)</title>
    <link href="http://yoursite.com/2016/03/30/Memory-Manage-3-ARC/"/>
    <id>http://yoursite.com/2016/03/30/Memory-Manage-3-ARC/</id>
    <published>2016-03-30T07:13:21.000Z</published>
    <updated>2018-05-13T12:26:50.334Z</updated>
    
    <content type="html">&lt;p&gt;在&lt;a href=&quot;http://luoanhao.github.io/2016/03/29/Memory-Manage-2-MRC/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇&lt;/a&gt;文章中，我们主要&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;介绍了基于&lt;strong&gt;MRC&lt;/strong&gt;环境下的内存管理。这篇文章主要介绍基于&lt;strong&gt;ARC&lt;/strong&gt;环境下的内存管理。从WWDC2011到现在已经有近5年的时间，ACR机制的应用已经十分成熟，如今在Xcode中新建项目，都默认开启ARC。下面我会从ARC的原理到使用进行详细讲解。&lt;/p&gt;
&lt;h3 id=&quot;一、什么是ARC&quot;&gt;&lt;a href=&quot;#一、什么是ARC&quot; class=&quot;headerlink&quot; title=&quot;一、什么是ARC&quot;&gt;&lt;/a&gt;一、什么是ARC&lt;/h3&gt;&lt;p&gt;ARC——Automatic Reference Counting，自动引用计数。它&lt;strong&gt;不是运行时特性，不是垃圾回收器（GC）&lt;/strong&gt;，而是一种&lt;strong&gt;编译时特性&lt;/strong&gt;。    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automatic Reference Counting (ARC) is a compiler-level feature that simplifies the process of managing object lifetimes (memory management) in Cocoa applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与MRC模式相比，在ARC模式下会减少相应的工作量。为什么这样说呢？因为在ARC模式下编写代码，不需要写&lt;code&gt;retain&lt;/code&gt;、&lt;code&gt;release&lt;/code&gt;、&lt;code&gt;autorelease&lt;/code&gt;这三个关键字来对实例对象进行手动管理内存，这会减少很多代码。当开启ARC时，编译器在编译代码时会自动在代码合适的地方插入&lt;code&gt;retain&lt;/code&gt;、&lt;code&gt;release&lt;/code&gt;和&lt;code&gt;autorelease&lt;/code&gt;。也就是说，原来在MRC模式下需要写的类似于&lt;code&gt;[obj release]&lt;/code&gt; 这样的代码，在ARC模式下编译器会自动帮我们完成，不需要我们去写，这就是所谓的&lt;strong&gt;自动引用计数&lt;/strong&gt;。这样会相应地提高开发效率。&lt;/p&gt;
&lt;h3 id=&quot;二、ARC工作原理&quot;&gt;&lt;a href=&quot;#二、ARC工作原理&quot; class=&quot;headerlink&quot; title=&quot;二、ARC工作原理&quot;&gt;&lt;/a&gt;二、ARC工作原理&lt;/h3&gt;&lt;p&gt;ARC模式的基本原理与MRC相同，都是&lt;strong&gt;引用计数原理&lt;/strong&gt;，只是书写方式不同。在MRC模式下，如果想要保持一个对象使其不被释放，需要使用&lt;code&gt;retain&lt;/code&gt;关键字。在ARC模式下要做的就是用一个指针指向这个对象，只要指针没有被置空，对象就会一直保持在堆上。当将指针指向新值时，原来的对象会被release一次。&lt;/p&gt;
&lt;p&gt;ARC可以为开发者节省很多代码，使用ARC以后再也不需要关心什么时候retain，什么时候release，但是这并不意味你可以不思考内存管理，我们需要经常性地问自己这个问题：&lt;strong&gt;谁持有这个对象？&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-“持有”概念&quot;&gt;&lt;a href=&quot;#1-“持有”概念&quot; class=&quot;headerlink&quot; title=&quot;1.“持有”概念&quot;&gt;&lt;/a&gt;1.“持有”概念&lt;/h4&gt;&lt;p&gt;在ARC中，我们说对象A“持有”对象B，就是说对象A“强引用”对象B。写法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; * obj = [[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; * A = obj;		&lt;span class=&quot;comment&quot;&gt;//A指向obj,此时A对obj有一个引用，强引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引用又分为&lt;strong&gt;强引用&lt;/strong&gt;和&lt;strong&gt;弱引用&lt;/strong&gt;。被 &lt;code&gt;strong&lt;/code&gt; 关键字修饰的对象A，如果指向对象obj,即obj被一个 &lt;code&gt;strong&lt;/code&gt; 指针指向，obj被强引用，则obj不会销毁。如果对象没有任何 &lt;code&gt;strong&lt;/code&gt; 指针指向，那么就讲销毁。被 &lt;code&gt;weak&lt;/code&gt; 关键字修饰的对象B，如果指向对象obj,那么对象obj被一个 &lt;code&gt;weak&lt;/code&gt; 指针指向，obj被弱引用，obj是否销毁与其无关。&lt;/p&gt;
&lt;p&gt;一个 &lt;code&gt;weak&lt;/code&gt; 指针P指向一个对象obj，并没有增加P的引用计数。另外，在ARC模式下，&lt;strong&gt;所有对象指针类型默认为 &lt;code&gt;strong&lt;/code&gt; 类型&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;2-理解strong和weak&quot;&gt;&lt;a href=&quot;#2-理解strong和weak&quot; class=&quot;headerlink&quot; title=&quot;2.理解strong和weak&quot;&gt;&lt;/a&gt;2.理解strong和weak&lt;/h4&gt;&lt;p&gt;&lt;code&gt;strong&lt;/code&gt; 和 &lt;code&gt;weak&lt;/code&gt; 类似于MRC模式下的 &lt;code&gt;retain&lt;/code&gt; 和 &lt;code&gt;assign&lt;/code&gt; 。请看下图：&lt;br&gt;&lt;img src=&quot;/uploads/Memory-Manage-3-ARC/Strong.png&quot; alt=&quot;strongImg&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上图中，有两个 &lt;code&gt;strong&lt;/code&gt; 类型指针A和B指向O，一个 &lt;code&gt;weak&lt;/code&gt; 类型指针C指向O。每有一个 &lt;code&gt;strong&lt;/code&gt; 类型指针指向O，在编译时，对象O会进行 &lt;code&gt;[O retain]&lt;/code&gt; 一次，此时对象O的引用计数为2。&lt;code&gt;weak&lt;/code&gt; 指针对其引用计数没有影响。当对象A或者对象B不再指向O时，对象O的引用计数减1，当没有对象持有时，进行释放。说到底，ARC模式的管理方式还是基于引用计数。&lt;/p&gt;
&lt;h3 id=&quot;三、ARC修饰符&quot;&gt;&lt;a href=&quot;#三、ARC修饰符&quot; class=&quot;headerlink&quot; title=&quot;三、ARC修饰符&quot;&gt;&lt;/a&gt;三、ARC修饰符&lt;/h3&gt;&lt;p&gt;在ARC环境下，有4个与内存相关的&lt;strong&gt;变量所有权修饰符&lt;/strong&gt;，他们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__strong&lt;/li&gt;
&lt;li&gt;__weak&lt;/li&gt;
&lt;li&gt;__autoreleasing&lt;/li&gt;
&lt;li&gt;__unsafe_unretained&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里所说的&lt;strong&gt;变量所有权修饰符&lt;/strong&gt;，与属性（property）中的&lt;strong&gt;属性修饰符&lt;/strong&gt;不同，他们有如下对应关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assign&lt;/code&gt; 对应的所有权类型是 &lt;code&gt;__unsafe_unretained&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt; 对应的所有权类型是 &lt;code&gt;__strong&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;retain&lt;/code&gt; 对应的所有权类型是 &lt;code&gt;__strong&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strong&lt;/code&gt; 对应的所有权类型是 &lt;code&gt;__strong&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsafe_unretained&lt;/code&gt; 对应的所有权类型是 &lt;code&gt;__unsafe_unretained&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weak&lt;/code&gt; 对应的所有权类型是 &lt;code&gt;__weak&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于&lt;strong&gt;属性修饰符&lt;/strong&gt;，后面我会写一篇关于 &lt;code&gt;property&lt;/code&gt; 的文章进行详细介绍，在此暂时不做介绍。接下来主要介绍一下4个&lt;strong&gt;变量所有权修饰符&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-strong&quot;&gt;&lt;a href=&quot;#1-strong&quot; class=&quot;headerlink&quot; title=&quot;1.__strong&quot;&gt;&lt;/a&gt;1.__strong&lt;/h4&gt;&lt;p&gt;&lt;code&gt;__strong&lt;/code&gt; 表示引用为强引用。对应定义 property 时用到的 &lt;code&gt;strong&lt;/code&gt; 。当对象没有任何一个强引用指向它时，它才会被释放。如果在声明引用时不加修饰符，那么引用将默认是强引用。当需要释放强引用指向的对象时，需要保证所有指向对象强引用置为 nil。__strong 修饰符是 id 类型和对象类型默认的所有权修饰符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;__strong&lt;/code&gt;修饰的变量会自动初始化为 &lt;code&gt;nil&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;2-weak&quot;&gt;&lt;a href=&quot;#2-weak&quot; class=&quot;headerlink&quot; title=&quot;2.__weak&quot;&gt;&lt;/a&gt;2.__weak&lt;/h4&gt;&lt;p&gt;&lt;code&gt;__weak&lt;/code&gt; 表示弱引用，对应定义 property 时用到的 &lt;code&gt;weak&lt;/code&gt;。&lt;code&gt;__weak&lt;/code&gt; 最常见的一个作用就是&lt;strong&gt;用来避免强引用循环&lt;/strong&gt;。但是需要注意的是，&lt;code&gt;__weak&lt;/code&gt; 修饰符只能用于 iOS5 以上的版本，在 iOS4 及更低的版本中使用 &lt;code&gt;__unsafe_unretained&lt;/code&gt; 修饰符来代替。关于 &lt;code&gt;__weak&lt;/code&gt;,有以下几点需要注意：&lt;/p&gt;
&lt;p&gt;（1）弱引用不会影响对象的释放，而当对象被释放时，所有指向它的弱引用都会自定被置为 nil，这样可以防止野指针。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Memory-Manage-3-ARC/weak.png&quot; alt=&quot;weakImg&quot;&gt;&lt;br&gt;对于对象N，开始有一个强引用指针A和一个弱引用指针B指向它，之后A指向M，没有强引用指针指向N，N被释放，此时弱引用指针B自动被置为 &lt;code&gt;nil&lt;/code&gt;，防止变为野指针。&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;__weak&lt;/code&gt; 主要用来避免循环引用，主要有以下几个应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在使用 &lt;code&gt;delegate&lt;/code&gt; 时，我们需要将 &lt;code&gt;delegate&lt;/code&gt; 的属性定义为 &lt;code&gt;weak&lt;/code&gt;,以避免强引用循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ClassOneVC:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassOneViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &amp;lt;myDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate func];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ClassTwoVC:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassOneViewController&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ClassOneViewController * classOneVC = [ClassOneViewController new]；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classOneVC.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;//delegate为weak类型，不会对self强引用，避免循环引用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//delegate func&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)func&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在 Block 中防止强引用循环，后面细讲。&lt;/li&gt;
&lt;li&gt;用来修饰指向由 Interface Builder 创建的控件。比如：@property (weak, nonatomic) IBOutlet UIImageView myImgV。&lt;blockquote&gt;
&lt;p&gt;对于在类中使用的UIKit控件，一般为 &lt;code&gt;strong&lt;/code&gt; 类型，至于为什么在Interface Builder或者StoryBoard中创建的控件可以用 &lt;code&gt;weak&lt;/code&gt; ，有一种解释是在Interface Builder或者StoryBoard中进行了strong，具体什么原理还请大神解答。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-autoreleasing&quot;&gt;&lt;a href=&quot;#3-autoreleasing&quot; class=&quot;headerlink&quot; title=&quot;3.__autoreleasing&quot;&gt;&lt;/a&gt;3.__autoreleasing&lt;/h4&gt;&lt;p&gt;用 &lt;code&gt;__autoreleasing&lt;/code&gt; 修饰一个对象，表示这个对象被添加到 &lt;code&gt;autorelease pool&lt;/code&gt;中自动释放引用。这和MRC模式下的 &lt;code&gt;autorelease&lt;/code&gt; 的用法相同。只不过在MRC模式下，不能够再显示使用 &lt;code&gt;autorelease&lt;/code&gt; 方法了，但是 &lt;code&gt;autorelease&lt;/code&gt; 的机制还是有效的，即通过使用 &lt;code&gt;autorelease&lt;/code&gt; 修饰对象。&lt;/p&gt;
&lt;p&gt;下面两行代码意义相同：    &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString * str = [[[NSString alloc] initWithFormat:@&amp;quot;hello&amp;quot;] autorelease];  //MRC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString * __autoreleasing str = [[NSString alloc] initWithFormat:@&amp;quot;hello&amp;quot;];    //ARC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，定义property时不能使用这个修饰符，因为任何一个对象的property都不应该是 &lt;code&gt;autorelese&lt;/code&gt; 类型。&lt;/p&gt;
&lt;p&gt;在ARC模式下，使用（隐式使用）&lt;code&gt;__autoreleasing&lt;/code&gt; 的几个场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法返回值&lt;/li&gt;
&lt;li&gt;访问 &lt;code&gt;__weak&lt;/code&gt; 修饰的变量&lt;/li&gt;
&lt;li&gt;id类型指针&lt;/li&gt;
&lt;li&gt;指针的指针（id *）&lt;/li&gt;
&lt;li&gt;某些类方法隐式创建自己的 &lt;code&gt;autorelease pool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;id 类型类似于(NSObject &lt;em&gt; ）,所以（id &lt;/em&gt;）类似于（NSObject ** ）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;（1）方法返回值&quot;&gt;&lt;a href=&quot;#（1）方法返回值&quot; class=&quot;headerlink&quot; title=&quot;（1）方法返回值&quot;&gt;&lt;/a&gt;（1）方法返回值&lt;/h5&gt;&lt;p&gt;请看下面代码：    &lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; *)myObject &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; *obj = [[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个方法中，&lt;code&gt;obj&lt;/code&gt; 的默认所有权修饰符为 &lt;code&gt;__strong&lt;/code&gt; 。当return时，使 &lt;code&gt;obj&lt;/code&gt;超出其作用域，它强引用持有的对象本应该释放，但是由于该对象作为方法的返回值，所以一般情况下编译器会自动将 &lt;code&gt;obj&lt;/code&gt; 注册到 Autorelease Pool中。这样就&lt;strong&gt;延长了&lt;/strong&gt;对象的生命周期，使其出了作用域之后，还能够使用。当Autorelease Pool 被销毁的时候，对象的生命周期才会结束。&lt;/p&gt;
&lt;p&gt;Autorelease Pool 是与线程一一映射的，这就是说一个 autoreleased 的对象的延迟释放是发生在它所在的 Autorelease Pool 对应的线程上的。。因此，在方法返回值的这个场景中，如果 Autorelease Pool 的 drain 方法没有在接收方和提供方交接的过程中触发，那么 autoreleased 对象是不会被释放的。所以不必担心 “Autorelease Pool 都销毁了，接收方还没接收到对象”这样的问题。&lt;/p&gt;
&lt;p&gt;关于Autorelease Pool何时释放，生命周期的问题，实现原理等问题，可以参考这篇文章：&lt;a href=&quot;http://blog.sunnyxx.com/2014/10/15/behind-autorelease/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑幕背后的Autorelease&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;#####（2）访问 &lt;code&gt;__weak&lt;/code&gt; 修饰变量&lt;br&gt;当访问由 &lt;code&gt;__weak&lt;/code&gt; 修饰的变量时，实际访问的是注册到 Autorelease Pool中的对象，例如下面两段代码意义相同：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; *obj0 = [&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; obj1 = obj0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;class=%@&quot;&lt;/span&gt;, [obj1 class]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编译时会处理成以下这样：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; obj1 = obj0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; __autoreleasing A = obj1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;class=%@&quot;&lt;/span&gt;, [A class]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样做是为了延长对象的生命周期。因为在 &lt;code&gt;__weak&lt;/code&gt; 修饰符只持有对象的弱引用，而在访问对象的过程中，该对象有可能被废弃，如果把被访问的对象注册到 Autorelease Pool 中，就能保证 Autorelease Pool 被销毁前对象是存在的。&lt;/p&gt;
&lt;h5 id=&quot;3-id类型指针&quot;&gt;&lt;a href=&quot;#3-id类型指针&quot; class=&quot;headerlink&quot; title=&quot;(3) id类型指针&quot;&gt;&lt;/a&gt;(3) id类型指针&lt;/h5&gt;&lt;p&gt;一个被引用过几百遍的例子，如在使用NSError时：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *__autoreleasing error; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![data writeToFile:filename options:&lt;span class=&quot;built_in&quot;&gt;NSDataWritingAtomic&lt;/span&gt; error:&amp;amp;error]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Error: %@&quot;&lt;/span&gt;, error); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，如果error定义为 &lt;code&gt;strong&lt;/code&gt;类型，即使不用 &lt;code&gt;__autoreleasing&lt;/code&gt; 修饰，编译器也会帮你自动添加，保证你传入的是一个 &lt;code&gt;autoreleaing&lt;/code&gt; 类型的引用，如下（意义与上段代码相同）：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *__autoreleasing tempError = error; &lt;span class=&quot;comment&quot;&gt;// 编译器自动添加 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![data writeToFile:filename options:&lt;span class=&quot;built_in&quot;&gt;NSDataWritingAtomic&lt;/span&gt; error:&amp;amp;tempError]) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　error = tempError; &lt;span class=&quot;comment&quot;&gt;// 编译器自动添加添加 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Error: %@&quot;&lt;/span&gt;, error); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是为了提高程序效率，我们在定义的error的时候，一般都声明为 &lt;code&gt;autoreleasing&lt;/code&gt; 类型。&lt;/p&gt;
&lt;h5 id=&quot;（4）指针的指针&quot;&gt;&lt;a href=&quot;#（4）指针的指针&quot; class=&quot;headerlink&quot; title=&quot;（4）指针的指针&quot;&gt;&lt;/a&gt;（4）指针的指针&lt;/h5&gt;&lt;p&gt;在ARC环境下，所有种指针的指针类型（id *）的函数参数如果不加修饰符，编译器会默认将他们认定为 &lt;code&gt;__autoreleasing&lt;/code&gt; 类型。例如下面两段代码等价：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)myFunc:(&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; **)obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// do something  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)myFunc:(&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; * __autoreleasing *)obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// do something  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;5-类方法隐式创建-Autorelease-Pool&quot;&gt;&lt;a href=&quot;#5-类方法隐式创建-Autorelease-Pool&quot; class=&quot;headerlink&quot; title=&quot;(5)类方法隐式创建 Autorelease Pool&quot;&gt;&lt;/a&gt;(5)类方法隐式创建 Autorelease Pool&lt;/h5&gt;&lt;p&gt;某些类的方法会隐式地使用自己的Autorelease Pool，例如NSDictionary的[enumerateKeysAndObjectsUsingBlock]方法：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)loopThroughDictionary:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)dict error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [dict enumerateKeysAndObjectsUsingBlock:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; key, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; *stop)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// do stuff  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (there is some error &amp;amp;&amp;amp; error != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                *error = [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;MyError&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码中，会隐式创建一个Autorelease Pool,等价于：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)loopThroughDictionary:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)dict error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [dict enumerateKeysAndObjectsUsingBlock:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; key, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; *stop)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 被隐式创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (there is some error &amp;amp;&amp;amp; error != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    *error = [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;MyError&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// *error 在这里已经被dict的做枚举遍历时创建的autorelease pool释放掉了 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了能够正常的使用*error，我们需要一个strong型的临时引用，在dict的枚举Block中是用这个临时引用，保证引用指向的对象不会在出了dict的枚举Block后被释放，正确的方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)loopThroughDictionary:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)dict error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　__block &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt;* tempError; &lt;span class=&quot;comment&quot;&gt;// 加__block保证可以在Block内被修改  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　[dict enumerateKeysAndObjectsUsingBlock:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; key, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; *stop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (there is some error) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　*tempError = [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;MyError&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　*error = tempError; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-unsafe-unretained&quot;&gt;&lt;a href=&quot;#4-unsafe-unretained&quot; class=&quot;headerlink&quot; title=&quot;4.__unsafe_unretained&quot;&gt;&lt;/a&gt;4.__unsafe_unretained&lt;/h4&gt;&lt;p&gt;ARC是在iOS 5引入的，而这个修饰符主要是为了在ARC刚发布时兼容iOS 4以及版本更低的设备，因为这些版本的设备没有weak pointer system，简单的理解这个系统就是我们上面讲weak时提到的，能够在 &lt;code&gt;weak&lt;/code&gt; 引用指向对象被释放后，把引用值自动设为 &lt;code&gt;nil&lt;/code&gt; 的系统。这个修饰符在定义property时对应的是”unsafe_unretained”，实际可以将它理解为MRC时代的 &lt;code&gt;assign&lt;/code&gt; ：纯粹只是将引用指向对象，没有任何额外的操作，在指向对象被释放时依然原原本本地指向原来被释放的对象（所在的内存区域）。所以非常不安全。&lt;/p&gt;
&lt;p&gt;现在可以完全忽略掉这个修饰符了，因为iOS 4早已退出历史舞台,目前的APP基本都不会再去兼容iOS4。&lt;/p&gt;
&lt;h3 id=&quot;四、ARC中的Block&quot;&gt;&lt;a href=&quot;#四、ARC中的Block&quot; class=&quot;headerlink&quot; title=&quot;四、ARC中的Block&quot;&gt;&lt;/a&gt;四、ARC中的Block&lt;/h3&gt;&lt;p&gt;一般情况下，block捕获的外部变量，可以在block内部使用，但是无法修改，例如下面代码：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * str = &lt;span class=&quot;string&quot;&gt;@&quot;hello&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^ block)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    block = ^ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//str = @&quot;change&quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    block();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注：static的变量和全局变量不需要加__block就可以在Block中修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果修改 &lt;code&gt;str&lt;/code&gt;，编译器会报错。如果想要修改 &lt;code&gt;str&lt;/code&gt; ，需要用 &lt;code&gt;__block&lt;/code&gt; 修饰符修饰要修改的变量，但也会引入新的问题，请看下面示例：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyViewController * __block myController = [[MyViewController alloc] init…];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myController.completionHandler =  ^(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [myController dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面这段代码中，&lt;code&gt;myController&lt;/code&gt; 的 &lt;code&gt;completionHandler&lt;/code&gt; 调用了 &lt;code&gt;myController&lt;/code&gt; 的方法[dismissViewController…]，这时 &lt;code&gt;completionHandler&lt;/code&gt; 会对 &lt;code&gt;myController&lt;/code&gt; 做 &lt;code&gt;retain&lt;/code&gt; 操作。而我们知道，&lt;code&gt;myController&lt;/code&gt; 对 &lt;code&gt;completionHandler&lt;/code&gt; 也至少有一个retain（一般准确讲是copy），这时就出现了在内存管理中最糟糕的情况：循环引用！&lt;/p&gt;
&lt;p&gt;简单点说就是：myController retain了completionHandler，而completionHandler也retain了myController。循环引用导致了myController和completionHandler最终都不能被释放。&lt;/p&gt;
&lt;p&gt;针对以上问题，如果循环引用已经产生了，我们可以这样去解决：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block MyViewController * myController = [[MyViewController alloc] init…];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myController.completionHandler =  ^(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [myController dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myController = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 注意这里，将myController置为nil,保证了block结束myController强引用的解除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了避免循环引用，大家可能想到这样一个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyViewController *myController = [[MyViewController alloc] init…];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyViewController * __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; weakMyController = myController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myController.completionHandler =  ^(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	[weakMyViewController dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述代码中，我们让block捕获了一个弱引用，即 &lt;code&gt;weakMyController&lt;/code&gt;。但是问题又来了：block如果捕获一弱引用，在编译后会将其捕获在自己的函数栈中，当block函数执行完毕，就会释放这个弱引用。那么当myController指向的对象在completionHandler被调用前释放，那么completionHandler就不能正常的运作了。在一般的单线程环境中，这种问题出现的可能性不大，但是到了多线程环境，就很不好说了。&lt;/p&gt;
&lt;p&gt;针对这个问题，有引入了下面的&lt;strong&gt;最佳解决方案&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyViewController *myController = [[MyViewController alloc] init…];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyViewController * __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; weakMyController = myController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    myController.completionHandler =  ^(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyViewController *strongMyController = weakMyController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strongMyController) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [strongMyController dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// do something...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;block内部定义了一个强引用，这就保证捕获的弱引用 &lt;code&gt;weakMyController&lt;/code&gt; 在block函数栈运行结束后不会释放。如果说block存在于堆上，那么 &lt;code&gt;strongMyController&lt;/code&gt; 作为block的成员，也会存在于堆上，只有在blokc销毁时，它才会销毁。&lt;/p&gt;
&lt;p&gt;关于理解被Block捕获的引用和在Block内定义的引用的区别，及block底层原理，请看唐巧这篇&lt;a href=&quot;http://blog.devtang.com/2013/07/28/a-look-inside-blocks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于block&lt;/a&gt;的文章。&lt;/p&gt;
&lt;p&gt;最后关于block再说一点。__block在MRC时代有两个作用：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;说明变量可改&lt;/li&gt;
&lt;li&gt;说明指针指向的对象不做这个隐式的retain操作，用于避免循环引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在ARC模式下，&lt;strong&gt;__block修饰符只说明变量可修改&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;五、ARC与Toll-Free-Bridging&quot;&gt;&lt;a href=&quot;#五、ARC与Toll-Free-Bridging&quot; class=&quot;headerlink&quot; title=&quot;五、ARC与Toll-Free Bridging&quot;&gt;&lt;/a&gt;五、ARC与Toll-Free Bridging&lt;/h3&gt;&lt;p&gt;Toll-Free Briding 保证了在程序中，可以方便和谐的使用 Core Foundation 类型的对象和Objective-C 类型的对象。&lt;/p&gt;
&lt;h4 id=&quot;1-问题的引入&quot;&gt;&lt;a href=&quot;#1-问题的引入&quot; class=&quot;headerlink&quot; title=&quot;1.问题的引入&quot;&gt;&lt;/a&gt;1.问题的引入&lt;/h4&gt;&lt;p&gt;在 MRC 时代，由于 Objective-C 类型的对象和 Core Foundation 类型的对象都是相同的 release 和 retain 操作规则，所以 Toll-Free Bridging 的使用比较简单，但是自从切换到 ARC 后，Objective-C 类型的对象内存管理规则改变了，不能使用release和retain操作，而 Core Foundation 依然是之前的机制，也就是说，&lt;strong&gt;Core Foundation 不支持 ARC&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这时候我们就需要解决一个问题：在做 Core Foundation 与 Objective-C 类型转换的时候，我们不仅要做类型转换，还要将其内存管理规则进行转换。&lt;/p&gt;
&lt;p&gt;于是苹果在引入 ARC 之后对 Toll-Free Bridging 的操作也加入了对应的方法与修饰符，用来指明用哪种规则管理内存，或者说是内存管理权的归属。这些方法和修饰符分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;__bridge（修饰符）&lt;/li&gt;
&lt;li&gt;__bridge_retained（修饰符） or CFBridgingRetain（函数）&lt;/li&gt;
&lt;li&gt;__bridge_transfer（修饰符） or CFBridgingRelease（函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#####（1）__bridge&lt;/p&gt;
&lt;p&gt;只是声明类型准换，不做内存管理规则转换。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//NSString 转换为 CFStringRef&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt; s1 = (__bridge &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;) [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Hello&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//其他对象类型转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFTypeRef&lt;/span&gt; s2 = (__bridge &lt;span class=&quot;built_in&quot;&gt;CFTypeRef&lt;/span&gt;)[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只是做了类型的转化，但管理规则未变，依然要用 Objective-C 类型的 ARC 来管理 s1，你不能用 CFRelease() 去释放 s1。&lt;/p&gt;
&lt;p&gt;#####（2）__bridge_retained or CFBridgingRetain&lt;br&gt;表示将指针类型转变的同时，将内存管理的责任由原来的 Objective-C 交给Core Foundation 来处理，也就是，将 ARC 转变为 MRC。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *s1 = [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Hello&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt; s2 = (__bridge_retained &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;)s1;   &lt;span class=&quot;comment&quot;&gt;//将内存管理权交给s2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRelease&lt;/span&gt;(s2); &lt;span class=&quot;comment&quot;&gt;// 注意要在使用结束后加这个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时内存管理规则由ARC变为了MRC，我们需要手动的来管理s2的内存，而对于s1，我们即使将其置为nil，也不能释放内存。&lt;/p&gt;
&lt;p&gt;上面代码也等价于：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *s1 = [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Hello, %@!&quot;&lt;/span&gt;, name];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt; s2 = (&lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;)&lt;span class=&quot;built_in&quot;&gt;CFBridgingRetain&lt;/span&gt;(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRelease&lt;/span&gt;(s2); &lt;span class=&quot;comment&quot;&gt;// 注意要在使用结束后加这个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3-bridge-transfer（修饰符）-or-CFBridgingRelease（函数）&quot;&gt;&lt;a href=&quot;#3-bridge-transfer（修饰符）-or-CFBridgingRelease（函数）&quot; class=&quot;headerlink&quot; title=&quot;(3)__bridge_transfer（修饰符） or CFBridgingRelease（函数）&quot;&gt;&lt;/a&gt;(3)__bridge_transfer（修饰符） or CFBridgingRelease（函数）&lt;/h5&gt;&lt;p&gt;这个修饰符和函数的功能和上面那个__bridge_retained相反，它表示将管理的责任由Core Foundation转交给Objective-C，即将管理方式由MRC转变为ARC。&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt; cfStr = &lt;span class=&quot;built_in&quot;&gt;CFURLCreateStringByAddingPercentEscapes&lt;/span&gt;(. . .);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *str = (__bridge_transfer &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)cfStr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//or NSString *str = (NSString *)CFBridgingRelease(cfStr);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们将result的管理责任交给了ARC来处理，我们就不需要再显式调用CFRelease()了。&lt;/p&gt;
&lt;h3 id=&quot;六、循环引用&quot;&gt;&lt;a href=&quot;#六、循环引用&quot; class=&quot;headerlink&quot; title=&quot;六、循环引用&quot;&gt;&lt;/a&gt;六、循环引用&lt;/h3&gt;&lt;p&gt;在ARC模式下，不用我们去手动管理内存，这方便了很多，也减少了很多工作量。但是ARC模式也有它自己需要注意的问题，那就是&lt;strong&gt;循环引用&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-什么是循环引用&quot;&gt;&lt;a href=&quot;#1-什么是循环引用&quot; class=&quot;headerlink&quot; title=&quot;1.什么是循环引用&quot;&gt;&lt;/a&gt;1.什么是循环引用&lt;/h4&gt;&lt;p&gt;如下图中，对象A和对象B，相互引用对方作为自己的成员变量，只有当对象销毁时，才会将成员变量的计数器减1。但是对象A的销毁依赖于对象B的销毁，对象B的销毁依赖于对象A的销毁。他们互相依赖，谁都不能销毁，这就造成了循环引用。这样即使没有其他强引用指针指向它们，它们也不会销毁。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Memory-Manage-3-ARC/retainCircle.png&quot; alt=&quot;retainCircleImg&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight mm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//两个数组，arr1和arr2互相引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *arr1 = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *arr2 = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [arr1 addObject:arr2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [arr2 addObject:arr1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用Instruments测试结果：&lt;br&gt;&lt;img src=&quot;/uploads/Memory-Manage-3-ARC/leaksTest.png&quot; alt=&quot;leaksTestImg&quot;&gt;&lt;/p&gt;
&lt;p&gt;还有一种复杂的循环引用情景，那就是多个对象间依次持有，形成一个环状，这也会造成循环引用问题。例如下图中的情况：&lt;br&gt;&lt;img src=&quot;/uploads/Memory-Manage-3-ARC/retainCircle2.png&quot; alt=&quot;retainCircle2Img&quot;&gt;&lt;br&gt;在实际项目开发中，项目的环境比较大，所以一旦产生这种多个对象之间的循环引用，修改起来十分繁琐，所以在实际开发中，应当注意。&lt;/p&gt;
&lt;h4 id=&quot;2-容易产生循环引用场景&quot;&gt;&lt;a href=&quot;#2-容易产生循环引用场景&quot; class=&quot;headerlink&quot; title=&quot;2.容易产生循环引用场景&quot;&gt;&lt;/a&gt;2.容易产生循环引用场景&lt;/h4&gt;&lt;p&gt;iOS开发中，有三个场景容易造成循环引用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block 使用&lt;/li&gt;
&lt;li&gt;delegate 使用&lt;/li&gt;
&lt;li&gt;NSTimer 使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体如何产生于解除，请看&lt;a href=&quot;http://www.cnblogs.com/wengzilin/p/4347974.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;3-避免和解除循环引用&quot;&gt;&lt;a href=&quot;#3-避免和解除循环引用&quot; class=&quot;headerlink&quot; title=&quot;3.避免和解除循环引用&quot;&gt;&lt;/a&gt;3.避免和解除循环引用&lt;/h4&gt;&lt;p&gt;1.如果想要避免产生循环引用，最长见的就是使用弱引用 （&lt;code&gt;weak reference&lt;/code&gt;）。弱引用虽然持有对象，但是不增加引用计数，这样就避免了循环引用的产生。&lt;/p&gt;
&lt;p&gt;2.如果循环引用已经产生，想要解除循环引用的话，需要开发者手动断开依赖对象。所以如果知道在什么时候断开循环引用回收内存，那就在相应的位置将对象手动置为 &lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;有关ARC模式下内存管理的内容，就写到这里。还请大家勘误。下一篇将介绍几种简单的内存优化方案。&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;1.&lt;a href=&quot;https://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beginning ARC in iOS 5 Tutorial Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://www.cnblogs.com/flyFreeZn/p/4264220.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发ARC内存管理技术要点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://www.samirchen.com/ios-arc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS ARC 内存管理要点&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;https://book.douban.com/subject/26287173/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发进阶&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://luoanhao.github.io/2016/03/29/Memory-Manage-2-MRC/&quot;&gt;上一篇&lt;/a&gt;文章中，我们主要&lt;br&gt;
    
    </summary>
    
      <category term="iOS基础" scheme="http://yoursite.com/categories/iOS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="内存" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="ARC" scheme="http://yoursite.com/tags/ARC/"/>
    
  </entry>
  
</feed>
